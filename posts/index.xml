<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bodacious Blog</title>
    <link>https://mullikine.github.io/posts/</link>
    <description>Recent content in Posts on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Sep 2019 00:00:00 +1200</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ameliorating list-processes</title>
      <link>https://mullikine.github.io/posts/ameliorating-list-processes/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/ameliorating-list-processes/</guid>
      <description>What is list-processes? list-processes is an emacs-lisp function which displays daemons running as subprocesses under emacs.
The trouble with list-processes  It doesn&amp;rsquo;t format the command string  Commands with multiline arguments are printed verbatim Arguments are not quoted   This means that commands may flow several lines (as many as it takes to print out the full command).
Also, 90% of the time you can&amp;rsquo;t copy the command and paste in the terminal because individual parameters with spaces are split into separate arguments.</description>
    </item>
    
    <item>
      <title>Circumventing paywalls with eww browser</title>
      <link>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser/</guid>
      <description>Use google cache and curl Make the curl-firefox script Vanilla curl always returns 404 from Google&amp;rsquo;s cache.
#!/bin/bash  /usr/bin/curl -A &amp;#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0&amp;#34; &amp;#34;$@&amp;#34; Create the test functions in emacs (defmacro url-is-404 (url) &amp;#34;URL is 404&amp;#34; `(sh-notty-true (concat &amp;#34;curl-firefox -s -I &amp;#34; (q ,url) &amp;#34; | grep -q \&amp;#34;404 Not Found\&amp;#34;&amp;#34;))) (defmacro url-cache-is-404 (url) &amp;#34;URL cache is 404&amp;#34; `(url-is-404 (concat &amp;#34;http://webcache.googleusercontent.com/search?q=cache:&amp;#34; ,url))) Try them out (url-is-404 &amp;#34;https://medium.</description>
    </item>
    
    <item>
      <title>Uniqifying emacs apps</title>
      <link>https://mullikine.github.io/posts/uniqifying-emacs-apps/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/uniqifying-emacs-apps/</guid>
      <description>The problem Many useful emacs apps can only have one instance running at a time due to working with a fixed buffer name.
 Examples of useful apps which you can only run one of  eww Perl-REPL dictionary-search calculator   The fix: rename the buffer to tac on a hash after it is created Create the advice function (defun unique-buffer-generic-after-advice (&amp;amp;rest args) &amp;#34;Give the buffer a unique name&amp;#34; (ignore-errors (let* ((hash (short-hash (str (time-to-seconds)))) (new-buffer-name (pcre-replace-string &amp;#34;(\\*?</description>
    </item>
    
    <item>
      <title>Fixing hugo terminal theme</title>
      <link>https://mullikine.github.io/posts/hugo-setup-terminal-theme/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mullikine.github.io/posts/hugo-setup-terminal-theme/</guid>
      <description>https://github.com/panr/hugo-theme-terminal/issues/43
I had to add this to config.toml to get the terminal theme to work.
[params] fullWidthTheme = false centerTheme = false</description>
    </item>
    
    <item>
      <title>lispy&#39;s convolute vs paredit&#39;s convolute</title>
      <link>https://mullikine.github.io/posts/convolute/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mullikine.github.io/posts/convolute/</guid>
      <description>The following illustrates the difference between lispy&amp;rsquo;s convolute function and paredit&amp;rsquo;s convolute function.
original sexp (a a1 (b b1 (c c1 (d d1 (e) d9) c9) b9) a9) (special-lispy-convolute)  binding C  Swaps parent with grandparent including their elements.
Current element holds still.
Reversible
;; Typing C on (c results in this (b b1 (a a1 (c c1 (d d1 (e) d9) c9) a9) b9) (paredit-convolute-sexp &amp;amp;optional N)  binding M-P  Swaps parent with grandparent including their elements.</description>
    </item>
    
    <item>
      <title>Practical macros in Racket</title>
      <link>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</guid>
      <description>Read the original article here.           Written by: Kevin R. Stravers &amp;lt;2017-11-17 Fri&amp;gt;    Practical macros in Racket and how to work with them A macro is central in any Lisp and must be mastered in order to master the language. However, Racket is in a state of macro chaos - at least in the official documentation. There&amp;rsquo;s define-syntax-rule, syntax-parse, syntax-case, and so many more.</description>
    </item>
    
  </channel>
</rss>