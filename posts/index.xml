<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bodacious Blog</title>
    <link>https://mullikine.github.io/posts/</link>
    <description>Recent content in Posts on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fixing hugo terminal theme</title>
      <link>https://mullikine.github.io/posts/hugo-setup-terminal-theme/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mullikine.github.io/posts/hugo-setup-terminal-theme/</guid>
      <description>https://github.com/panr/hugo-theme-terminal/issues/43
I had to add this to config.toml to get the terminal theme to work.
[params] fullWidthTheme = false centerTheme = false</description>
    </item>
    
    <item>
      <title>lispy&#39;s convolute vs paredit&#39;s convolute</title>
      <link>https://mullikine.github.io/posts/convolute/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mullikine.github.io/posts/convolute/</guid>
      <description>The following illustrates the difference between lispy&amp;rsquo;s convolute function and paredit&amp;rsquo;s convolute function.
original sexp (a a1 (b b1 (c c1 (d d1 (e) d9) c9) b9) a9) (special-lispy-convolute)  binding C  Swaps parent with grandparent including their elements.
Current element holds still.
Reversible
;; Typing C on (c results in this (b b1 (a a1 (c c1 (d d1 (e) d9) c9) a9) b9) (paredit-convolute-sexp &amp;amp;optional N)  binding M-P  Swaps parent with grandparent including their elements.</description>
    </item>
    
    <item>
      <title>Practical macros in Racket</title>
      <link>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</guid>
      <description>Read the original article here.           Written by: Kevin R. Stravers &amp;lt;2017-11-17 Fri&amp;gt;    Practical macros in Racket and how to work with them A macro is central in any Lisp and must be mastered in order to master the language. However, Racket is in a state of macro chaos - at least in the official documentation. There&amp;rsquo;s define-syntax-rule, syntax-parse, syntax-case, and so many more.</description>
    </item>
    
  </channel>
</rss>