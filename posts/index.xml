<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bodacious Blog</title>
    <link>https://mullikine.github.io/posts/</link>
    <description>Recent content in Posts on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Sep 2019 00:00:00 +1200</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adding new digraphs to vim and evil</title>
      <link>https://mullikine.github.io/posts/adding-new-digraphs-to-vim-and-evil/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/adding-new-digraphs-to-vim-and-evil/</guid>
      <description>I run this command to search for symbols but often it lacks the symbol I require vimhelp digraph-table·	.M	0xb7	183	MIDDLE DOT ⇔	==	21D4	8660	LEFT RIGHT DOUBLE ARROW ∀	FA	2200	8704	FOR ALL ∂	dP	2202	8706	PARTIAL DIFFERENTIAL ∃	TE	2203	8707	THERE EXISTS ∅	/0	2205	8709	EMPTY SET ∆	DE	2206	8710	INCREMENT ∇	NB	2207	8711	NABLA ∈	(-	2208	8712	ELEMENT OF ∋	-)	220B	8715	CONTAINS AS MEMBER ∏	*P	220F	8719	N-ARY PRODUCT ` ∑	+Z	2211	8721	N-ARY SUMMATION ` ≤	=&amp;lt;	2264	8804	LESS-THAN OR EQUAL TO ≥	&amp;gt;=	2265	8805	GREATER-THAN OR EQUAL TO ≪	&amp;lt;*	226A	8810	MUCH LESS-THAN ≫	*&amp;gt;	226B	8811	MUCH GREATER-THAN I had to Google for these symbols as they were not in the list  List of symbols we wish to make into digraphs  ℕ - double-struck capital N ℤ - Zahlen - double-struck capital Z ℝ - double-struck capital R   Run the unicode program to find the decimal ID for each symbol we want unicode ℕ unicode ℤ unicode ℝ Add them to the vim digraph table Vim uses the decimal value of the symbol.</description>
    </item>
    
    <item>
      <title>Ameliorating list-processes</title>
      <link>https://mullikine.github.io/posts/ameliorating-list-processes/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/ameliorating-list-processes/</guid>
      <description>What is list-processes? list-processes is an emacs-lisp function which displays daemons running as subprocesses under emacs.
The trouble with list-processes  It doesn&amp;rsquo;t format the command string  Commands with multiline arguments are printed verbatim Arguments are not quoted   This means that commands may flow several lines (as many as it takes to print out the full command).
Also, 90% of the time you can&amp;rsquo;t copy the command and paste in the terminal because individual parameters with spaces are split into separate arguments.</description>
    </item>
    
    <item>
      <title>Circumventing paywalls with eww browser</title>
      <link>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser/</guid>
      <description>Use google cache and curl Make the curl-firefox script Vanilla curl always returns 404 from Google&amp;rsquo;s cache.
#!/bin/bash  /usr/bin/curl -A &amp;#34;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0&amp;#34; &amp;#34;$@&amp;#34; Create the test functions in emacs (defmacro url-is-404 (url) &amp;#34;URL is 404&amp;#34; `(sh-notty-true (concat &amp;#34;curl-firefox -s -I &amp;#34; (q ,url) &amp;#34; | grep -q \&amp;#34;404 Not Found\&amp;#34;&amp;#34;))) (defmacro url-cache-is-404 (url) &amp;#34;URL cache is 404&amp;#34; `(url-is-404 (concat &amp;#34;http://webcache.googleusercontent.com/search?q=cache:&amp;#34; ,url))) Try them out (url-is-404 &amp;#34;https://medium.</description>
    </item>
    
    <item>
      <title>Didactic emacs-lisp macro example (ie. a tutorial)</title>
      <link>https://mullikine.github.io/posts/macro-tutorial/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/macro-tutorial/</guid>
      <description>In this tutorial we build a function b which allows you to run shell code within elisp syntax (it looks like emacs lisp).
This tutorial is useful to learn to write emacs-lisp macros but is also useful for understanding macros of any language.
First some prerequisite functions (defmacro shut-up-c (&amp;amp;rest body) &amp;#34;This works for c functions where shut-up does not.&amp;#34; `(let* ((inhibit-message t)) ,@body)) (defun get-dir () &amp;#34;Gets the current working directory.</description>
    </item>
    
    <item>
      <title>Getting arxiv in the terminal</title>
      <link>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</guid>
      <description>It all starts with this emacs plugin (require &amp;#39;biblio-arxiv) We create a bash script We name it arxiv-summary but also symlink it to &amp;lsquo;as&amp;rsquo;.
#!/bin/bash export TTY # Cant name this &amp;#39;as&amp;#39; because it interferes with ~pip~ # Collect history of all arxiv-summary invocations ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null # How often do I actually need to use the assembler &amp;#39;as&amp;#39;?</description>
    </item>
    
    <item>
      <title>Uniqifying emacs apps</title>
      <link>https://mullikine.github.io/posts/uniqifying-emacs-apps/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/uniqifying-emacs-apps/</guid>
      <description>The problem Many useful emacs apps can only have one instance running at a time due to working with a fixed buffer name.
 Examples of useful apps which you can only run one of  eww Perl-REPL dictionary-search calculator   The fix: rename the buffer to tack on a hash after it is created Create the advice function (defun unique-buffer-generic-after-advice (&amp;amp;rest args) &amp;#34;Give the buffer a unique name&amp;#34; (ignore-errors (let* ((hash (short-hash (str (time-to-seconds)))) (new-buffer-name (pcre-replace-string &amp;#34;(\\*?</description>
    </item>
    
    <item>
      <title>Fixing hugo terminal theme</title>
      <link>https://mullikine.github.io/posts/hugo-setup-terminal-theme/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mullikine.github.io/posts/hugo-setup-terminal-theme/</guid>
      <description>https://github.com/panr/hugo-theme-terminal/issues/43
I had to add this to config.toml to get the terminal theme to work.
[params] fullWidthTheme = false centerTheme = false</description>
    </item>
    
    <item>
      <title>Lispy vs Paredit: The convolute function</title>
      <link>https://mullikine.github.io/posts/convolute/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/convolute/</guid>
      <description>The following illustrates the difference between lispy&amp;rsquo;s convolute function and paredit&amp;rsquo;s convolute function.
original sexp (a a1 (b b1 (c c1 (d d1 (e) d9) c9) b9) a9) (special-lispy-convolute)  binding C  Swaps parent with grandparent including their elements.
Current element holds still.
Reversible
;; Typing C on (c results in this (b b1 (a a1 (c c1 (d d1 (e) d9) c9) a9) b9) (paredit-convolute-sexp &amp;amp;optional N)  binding M-P  Swaps parent with grandparent including their elements.</description>
    </item>
    
    <item>
      <title>Practical macros in Racket</title>
      <link>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</guid>
      <description>Read the original article here.           Written by: Kevin R. Stravers &amp;lt;2017-11-17 Fri&amp;gt;    Practical macros in Racket and how to work with them A macro is central in any Lisp and must be mastered in order to master the language. However, Racket is in a state of macro chaos - at least in the official documentation. There&amp;rsquo;s define-syntax-rule, syntax-parse, syntax-case, and so many more.</description>
    </item>
    
  </channel>
</rss>