<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Bodacious Blog</title>
    <link>https://mullikine.github.io/posts/</link>
    <description>Recent content in Posts on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Jan 2021 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Retrospective on my personality</title>
      <link>https://mullikine.github.io/posts/retrospective-on-my-personality/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/retrospective-on-my-personality/</guid>
      <description>Myer&amp;rsquo;s Briggs Mediator {INFP} \
Assertive Mediator (INFP-A)  Purpose of this document Sometimes when I realise I am different to other people in a particular way, I will add to this document.
Retrospective Likes  Theory of mind / sonder  Peacefulness Harmony   Facetiousness Freedom of thought and to express oneself  Dislikes  Contrivances Hypocrisy Bigotry Pedantry Competitiveness  Subordination Exploitation Deviousness    Competitive style  Non-competitive  Sharing Integrable Non-greedy   Uncompromising  Altruistic Optimistic Hopeful Ambitious   Romantic  It&amp;rsquo;s not about winning.</description>
    </item>
    
    <item>
      <title>Critique of Dr Carrie Madej &amp; Tania the Herbalist</title>
      <link>https://mullikine.github.io/posts/critique-of-dr-carrie-madej-tania-the-herbalist/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/critique-of-dr-carrie-madej-tania-the-herbalist/</guid>
      <description>Here is my personal critique after listening to this video  Original article Dr Carrie Madej &amp;amp; Tania the Herbalist - YouTube  Claims Part of us can be owned by whoever owns the patent of the covid vaccine Ridiculous.
The claim is that if it&amp;rsquo;s actually taken up into the genome and it&amp;rsquo;s permanent then part of us can be owned by the patent.
This is lunacy and very unrealistic that this would ever occur.</description>
    </item>
    
    <item>
      <title>alexbeals colorize</title>
      <link>https://mullikine.github.io/posts/review-of-colorize/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-colorize/</guid>
      <description>summary I scrape https://alexbeals.com/projects/colorize/ to obtain the color and use it in my scripts.
scripts setbg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null color=&amp;#34;$1&amp;#34; : &amp;#34;${color:=&amp;#34;000000&amp;#34;}&amp;#34; color=&amp;#34;$(p &amp;#34;$color&amp;#34; | sed &amp;#39;s/^#//&amp;#39;)&amp;#34; td_thing=&amp;#34;$(mktemp -t -d td_thingXXXXXX || echo /dev/null)&amp;#34; cd &amp;#34;$td_thing&amp;#34; convert -size 100x100 &amp;#34;xc:#$color&amp;#34; &amp;#34;$color.</description>
    </item>
    
    <item>
      <title>Pomegranate Brownies</title>
      <link>https://mullikine.github.io/posts/pomegranate-brownies/</link>
      <pubDate>Sat, 16 Jan 2021 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/pomegranate-brownies/</guid>
      <description>These are my first ever brownies but I had a lot of help from Michael Oliver.
This recipe belongs to him.
Pomegranate brownies Apparatus  parchment paper large mixing bowl whisk spoon baking dish toothpick paring knife  How to scrape a vanilla bean Vanilla is a beloved ingredient for its ability to enhance the flavor and aroma of any confection; it is an essential ingredient in everything from cakes and whipped cream to jams and ice cream.</description>
    </item>
    
    <item>
      <title>Suggesting new words for the glossary with KeyBERT and pytextrank</title>
      <link>https://mullikine.github.io/posts/suggesting-new-words-for-the-glossary-with-keybert-and-pytextrank/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/suggesting-new-words-for-the-glossary-with-keybert-and-pytextrank/</guid>
      <description>Demo: Adding to the glossary using suggested keyphrases 
Fleshing out a glossary on microbiology 
Adding words from Stackexchange 
Code Python pytextrank turned out to be more fit for purpose than KeyBERT.
The issue with KeyBERT is that it is more abstractive in creating keywords, suggesting keywords omitting stopwords, etc.. KeyBERT is good for finding topic keywords, but not great at finding extractive (as opposed to abstractive) keywords.</description>
    </item>
    
    <item>
      <title>sx: Move immediately to selected answer and suggest keywords for glossary</title>
      <link>https://mullikine.github.io/posts/sx-move-immediately-to-selected-answer-and-suggest-keywords-for-glossary/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/sx-move-immediately-to-selected-answer-and-suggest-keywords-for-glossary/</guid>
      <description>Demo Quick search for command, copy and run.

A longer demo:

1 2 3 4 5 6 7 8 9 10 11 12 13  (defun sx-move-to-accepted-answer () (interactive) (if (string-match &amp;#34;^Accepted Answer$&amp;#34; (buffer-string)) (progn (re-search-forward &amp;#34;^Accepted Answer$&amp;#34;) (beginning-of-line)))) (defvar sx-question-mode--erase-and-print-question-after-hook &amp;#39;()) (defun sx-question-mode--erase-and-print-question-after-advice (&amp;amp;rest args) (run-hooks &amp;#39;sx-question-mode--erase-and-print-question-after-hook)) (advice-add &amp;#39;sx-question-mode--erase-and-print-question :after &amp;#39;sx-question-mode--erase-and-print-question-after-advice) (add-hook &amp;#39;sx-question-mode--erase-and-print-question-after-hook &amp;#39;redraw-glossary-buttons-when-window-scrolls-or-file-is-opened) (add-hook &amp;#39;sx-question-mode--erase-and-print-question-after-hook &amp;#39;sx-move-to-accepted-answer)   </description>
    </item>
    
    <item>
      <title>Building a glossary for Dwarf Fortress</title>
      <link>https://mullikine.github.io/posts/building-a-glossary-for-dwarf-fortress/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/building-a-glossary-for-dwarf-fortress/</guid>
      <description>Synopsis To finally learn DF, I will attempt to build a glossary for it.
Follow along 
Steps Create wrappers around sort and uniq This allows unicode chars to be sorted and not discarded.
sort
1 2 3 4  #!/bin/sh export LC_ALL=C; /usr/bin/sort &amp;#34;$@&amp;#34;   uniq
1 2 3 4  #!/bin/sh export LC_ALL=C; /usr/bin/uniq &amp;#34;$@&amp;#34;   From the map, make a list of characters and their frequency.</description>
    </item>
    
    <item>
      <title>Review of &#39;Lambda World 2019 - Language-Oriented Programming with Racket - Matthias Felleisen - YouTube&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-lambda-world-2019-language-oriented-programming-with-racket-matthias-felleisen-youtube/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-lambda-world-2019-language-oriented-programming-with-racket-matthias-felleisen-youtube/</guid>
      <description>Original video Lambda World 2019 - Language-Oriented Programming with Racket - Matthias Felleisen - YouTube  Notes Process   Develop a programming language in an afternoon.
  Throw them away in the morning.
  The point is they are cheap to produce.
  Verification is the easier problem The more difficult problem is abstraction design.
Behind every framework is a language trying to get out to protect syntactic ideas, semantic wants and the logical ideas that you have.</description>
    </item>
    
    <item>
      <title>Preview docker-compose.yml as an svg</title>
      <link>https://mullikine.github.io/posts/view-docker-compose-yml-as-an-svg/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/view-docker-compose-yml-as-an-svg/</guid>
      <description>Demo 
Code for managing plantuml scope.sh Preview a file as plain text.
1 2 3 4 5 6 7 8  case &amp;#34;$bn&amp;#34; in docker-compose.yml) { cat &amp;#34;$rp&amp;#34; | docker-compose-plantuml --link-graph &amp;amp;&amp;amp; exit 4 } ;; *) esac   cr Compile and run a file.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  docker-compose.</description>
    </item>
    
    <item>
      <title>Setting up opensemanticsearch, fixing a docker-compose bug, making a PR, or 2</title>
      <link>https://mullikine.github.io/posts/setting-up-opensemanticsearch-fixing-a-docker-compose-bug-making-a-pr/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-opensemanticsearch-fixing-a-docker-compose-bug-making-a-pr/</guid>
      <description>Synopsis I&amp;rsquo;d like to use opensemanticsearch to index my own filesystem.
I&amp;rsquo;d like to use Apache Tika to create a text mirror of my file system in place of my own, makeshift text mirroring software.
I&amp;rsquo;d like to make use of opensemanticsearch&#39;s spacy-services module.
Demo: Running Solr, Tika and spacy-services servers 
A bug in starting the docker composure It appears that somebody else has also encountered this.
https://github.com/opensemanticsearch/open-semantic-search/issues/329
Error 1 2 3  x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -D__LITTLE_ENDIAN__=1 -I/usr/include/python3.</description>
    </item>
    
    <item>
      <title>make-it-run, an expect script to automate fixing errors from running programs</title>
      <link>https://mullikine.github.io/posts/make-it-run-an-expect-script-to-automate-fixing-errors-from-running-programs/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/make-it-run-an-expect-script-to-automate-fixing-errors-from-running-programs/</guid>
      <description>Demo Run on a loop until the program works 1  while ! make-it-run pti38 &amp;#34;ModuleNotFoundError:.*&amp;#34; &amp;#34;tm -w -te sps -args pip-install-from-error&amp;#34;; do echo &amp;#34;Retrying&amp;#34;; done   
Code The invocation command 1  make-it-run pti38 &amp;#34;ModuleNotFoundError:.*&amp;#34; &amp;#34;sps pip-install-from-error&amp;#34;   shell make-it-run
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null # command c=&amp;#34;$1&amp;#34; # expect bad pattern e=&amp;#34;$2&amp;#34; # fix command fc=&amp;#34;$3&amp;#34; { test -z &amp;#34;$c&amp;#34; || test -z &amp;#34;$e&amp;#34; || test -z &amp;#34;$fc&amp;#34;; } &amp;amp;&amp;amp; exit 1 e=&amp;#34;$(p &amp;#34;$e&amp;#34; | sed &amp;#39;s/\([[`;$&amp;#34;]\)/\\\1/g&amp;#39;)&amp;#34; x -sh &amp;#34;$c&amp;#34; -w &amp;#34;expect {\n-re \&amp;#34;$e\&amp;#34; { set user_input \&amp;#34;\$expect_out(0,string)\&amp;#34;; set ret [exec $fc\&amp;#34;\$user_input\&amp;#34;]; exit 1; } default { interact; }; }&amp;#34;   py-import-to-package Use Google to guess what the pypi package name is from its import.</description>
    </item>
    
    <item>
      <title>Selecting the matching regex at point, greedily, in emacs</title>
      <link>https://mullikine.github.io/posts/selecting-the-matching-regex-at-point-greedily-in-emacs/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/selecting-the-matching-regex-at-point-greedily-in-emacs/</guid>
      <description>Synopsis It&amp;rsquo;s quite frustrating, really, that there is no builtin command for this. However useful er/expand-region may be at selecting a semantic region monotonically increasingly beneath the cursor, it makes more sense to have a function of my own design that decides what is important beneath the cursor and to use that as the specification for what I want to select.
Enter my-select-regex-at-point. I am using this as I speak to select the function my-select-regex-at-point as I enter it into my blog.</description>
    </item>
    
    <item>
      <title>Shorten long paths in lsp-mode sideline</title>
      <link>https://mullikine.github.io/posts/shorten-long-paths-in-lsp-mode-sideline/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/shorten-long-paths-in-lsp-mode-sideline/</guid>
      <description>Premise As I was reading some haskell, I was bothered by the long lsp-ui-sideline strings, which were encroaching upon my code.
Demo: Before and after 
LSP string format There is a file in lsp-mode, lsp- protocol.el which contains code to generate functions for reading and writing to lsp formatted strings.
https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-protocol.el
Code Before 1 2 3 4 5 6 7 8 9 10 11 12 13 14  (defun lsp-ui-sideline--extract-info (contents) &amp;#34;Extract the line to print from CONTENTS.</description>
    </item>
    
    <item>
      <title>Automating a little bit of termshark and htop using tcl/expect</title>
      <link>https://mullikine.github.io/posts/automating-a-little-bit-of-termshark-and-htop/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-a-little-bit-of-termshark-and-htop/</guid>
      <description>Synopsis I want to be able to start a search from the command line. This will be faster than remembering the obscure bindings for both terminal user interfaces.
Demonstration htop 
termshark 
Code htop The last parameter will be considered to be a search filter, if it is doesn&amp;rsquo;t look like an option.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #!</description>
    </item>
    
    <item>
      <title>Automating sx (stackexchange for emacs)</title>
      <link>https://mullikine.github.io/posts/automating-sx-stackexchange-for-emacs/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-sx-stackexchange-for-emacs/</guid>
      <description>Synopsis I want to bidirectionally open a question in sx after finding it in chrome or open a question in chrome after finding it in sx.
Make a CLI tool to open stackexchange in emacs from the command line Get the question ID from the url 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  (defun sx-get-appropriate-site-and-id-from-url (url) (let* ((question (s-replace-regexp &amp;#34;.</description>
    </item>
    
    <item>
      <title>Automating cookiecutter in emacs</title>
      <link>https://mullikine.github.io/posts/automating-cookiecutter-in-emacs/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-cookiecutter-in-emacs/</guid>
      <description>Demo 
Code  This does a few things.  It searches Google for a cookiecutter repo on GitHub It downloads the template and files it away nicely. It creates a new project directory. It creates a new project within the new project directory from the template and prompts interactively.     1 2 3 4 5 6 7  (defun my-github-search-and-clone-cookiecutter (query) (interactive (list (read-string-hist &amp;#34;cookiecutter query:&amp;#34;))) (let* ((url (fz (cl-sn (concat &amp;#34;upd glh cookiecutter &amp;#34; (q query) &amp;#34; | cat&amp;#34; ) :chomp t))) (dir (if url (gc url))) (name (if (and url dir) (read-string-hist &amp;#34;project name: &amp;#34; query)))) (if (and dir name) (term-sps (concat &amp;#34;CWD= zrepl cookiecutter &amp;#34; (q dir)) (new-project-dir name)))))   </description>
    </item>
    
    <item>
      <title>Using mitmproxy with proxychains to inspect http traffic</title>
      <link>https://mullikine.github.io/posts/using-mitmproxy-with-proxychains-to-inspect-http-traffic/</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-mitmproxy-with-proxychains-to-inspect-http-traffic/</guid>
      <description>Synopsis With mitmproxy it is possible to inspect live applications for their http traffic. This is useful for reverse-engineering APIs, among other purposes. Proxychains allows you to run an application through a proxy, even if the applications doesn&amp;rsquo;t directly support proxies. It doesn&amp;rsquo;t work for every application you might try, but it&amp;rsquo;s still quite handy.
Demonstration 
Automate the process further mitm
1 2 3 4 5 6 7 8  #!</description>
    </item>
    
    <item>
      <title>Creating a transient-mode for advanced Google search operators, and GitHub too</title>
      <link>https://mullikine.github.io/posts/creating-a-transient-mode-for-advanced-google-search-operators/</link>
      <pubDate>Sat, 07 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/creating-a-transient-mode-for-advanced-google-search-operators/</guid>
      <description>Synopsis I want to be able to search Google easily using advanced operators, but not have to remember, nor type in, the syntax.
I create a user interface to generate the google search query.
Demonstration Looking for a PDF about the perigee moon, but without the word apogee 
Searching for PDFs about transducers that are not to do with clojure 
Code All it does is, given a list of google operaters, it constructs a little gui, which shells out to a script.</description>
    </item>
    
    <item>
      <title>CodeCraft: Embedded Rust tooling</title>
      <link>https://mullikine.github.io/posts/embedded-rust-tooling/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/embedded-rust-tooling/</guid>
      <description>CodeCraft https://groups.google.com/g/codecraft-dunedin/c/leiGYiL%5FfqQ     Speaker     Ian Rees     Relevant links https://github.com/knurling-rs/defmt  glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  OpenOCD Open On-Chip Debugger Open-source software that interfaces with a hardware debugger&amp;#39;s JTAG port.</description>
    </item>
    
    <item>
      <title>CodeCraft: Raymarching Triply Periodic Minimal Surfaces</title>
      <link>https://mullikine.github.io/posts/raymarching-triply-periodic-minimal-surfaces/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/raymarching-triply-periodic-minimal-surfaces/</guid>
      <description>glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  catenary catenary curve [#physics] [#geometry] The curve that an idealized hanging chain or cable assumes under its own weight when supported only at its ends.</description>
    </item>
    
    <item>
      <title>Go directly to main - Navigating arbitrary repositories</title>
      <link>https://mullikine.github.io/posts/open-main-function-in-emacs/</link>
      <pubDate>Tue, 03 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/open-main-function-in-emacs/</guid>
      <description>Premise I would like to quckly jump to the entrypoint of a repository I have just downloaded.
Demonstration 
Repositories with lots of languages 

Code elisp 1 2 3 4 5 6 7 8 9 10 11 12 13  (defun open-main () (interactive) (let ((found (fz (sn &amp;#34;open-main&amp;#34;) nil nil nil nil t))) (if found ;; (find-file found) (let ((path (s-replace-regexp &amp;#34;^\\([^:]+\\).*&amp;#34; &amp;#34;\\1&amp;#34; found)) (pos (s-replace-regexp &amp;#34;^[^:]+:\\([0-9]+\\):.*&amp;#34; &amp;#34;\\1&amp;#34; found))) (with-current-buffer (find-file path) (goto-byte (string-to-int pos)))) ;; (etv found) ))) (define-key global-map (kbd &amp;#34;H-o&amp;#34;) &amp;#39;open-main)   shell open-main</description>
    </item>
    
    <item>
      <title>Search Stack Exchange within emacs using Google search</title>
      <link>https://mullikine.github.io/posts/stackexchange-inside-emacs-with-google-search/</link>
      <pubDate>Sun, 01 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/stackexchange-inside-emacs-with-google-search/</guid>
      <description>Premise There is a great package for emacs, sx, which enables you to search stackexchange. I&amp;rsquo;d like to use google to search for problems across all the stackexchange sites. I&amp;rsquo;d also like to go immediately to the most relevant question.
Demonstration 
How to crack an egg with stackexchange   Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  (require &amp;#39;my-lists) (defun sx-get-appropriate-site-and-query (query) (let* ((site (fz (or (-filter-not-empty-string (str2lines (sn (concat &amp;#34;gl &amp;#34; (q query) &amp;#34; | grep -P \&amp;#34;(stackoverflow|stackexchange|serverfault).</description>
    </item>
    
    <item>
      <title>Application to Canva for Search Infrastructure Engineer</title>
      <link>https://mullikine.github.io/posts/application-to-canva/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/application-to-canva/</guid>
      <description>Online copy: https://mullikine.github.io/posts/application-to-canva/  To Canva,
Please consider me for the position of Search Infrastructure Software Engineer.
Since returning from the software industry to study IR (Information Retieval) in 2018, I have been hunting for a job developing search engines.
I have ancillary experience, such as developing cloud infrastructure and developing search engines, but do not have the experience yet of combining those two skills, though I am very eager to find a job doing just that.</description>
    </item>
    
    <item>
      <title>Curriculum Vitae</title>
      <link>https://mullikine.github.io/posts/about-me/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/about-me/</guid>
      <description>Download full CV
Shane Mulligan (BSc) Blogs  Practical macros in racket and how to work with them CodeLingo vs linters Combined glossary of A-Z Personal blog (You are already here) TakaheAI  Areas of expertise  Linux Automation (CLI and cloud) Natural Language Processing Domain-specific languages Language-agnostic programming Information retrieval  What type of job suits me  Working with many file types Working within many contexts Creating tooling to assist other developers Distilling knowledge  Job Application for DevOps Engineer // Bodacious Blog</description>
    </item>
    
    <item>
      <title>Automated, interactive build, install and readme of foreign repository</title>
      <link>https://mullikine.github.io/posts/detect-build-files-and-install-then-read-the-readme/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/detect-build-files-and-install-then-read-the-readme/</guid>
      <description>Automation of downloading a git repository and building its contents  Without reading the manual Reading the manual is also automated  
Codedescription>
    </item>
    
    <item>
      <title>Review of &#39;Goodbye YAML: Infrastructure as Code in Clojure - Eno Compton &amp; Tyler van Hensbergen - YouTube&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-goodbye-yaml-infrastructure-as-code-in-clojure-eno-compton-tyler-van-hensbergen-youtube/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-goodbye-yaml-infrastructure-as-code-in-clojure-eno-compton-tyler-van-hensbergen-youtube/</guid>
      <description>Original article Goodbye YAML: Infrastructure as Code in Clojure - Eno Compton &amp;amp; Tyler van Hensbergen - YouTube CDK Source https://github.com/aws/aws-cdk CDK Guide https://github.com/awsdocs/aws-cdk-guide CDK CLJ cdk-clj/examples at master Stedi/cdk-clj GitHub  Install 1  npm install -g aws-cdk   npm wrapper script additions  npm install -g should not be run as sudo, so with this I can install without breaking npm.   1 2 3 4 5 6 7 8  # https://stackoverflow.</description>
    </item>
    
    <item>
      <title>A toggle-buttoncloud (a systemwide control panel) in emacs</title>
      <link>https://mullikine.github.io/posts/a-toggle-buttoncloud-a-systemwide-control-panel-in-emacs/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/a-toggle-buttoncloud-a-systemwide-control-panel-in-emacs/</guid>
      <description>Demonstration 
Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155  (defset toggle-scripts (glob &amp;#34;toggle-*&amp;#34; &amp;#34;$SCRIPTS&amp;#34;)) (defset toggle-myrc-keys (str2lines (cl-sn &amp;#34;cat $NOTES/myrc.</description>
    </item>
    
    <item>
      <title>Updates and demonstrations of the glossary system</title>
      <link>https://mullikine.github.io/posts/updates-and-demonstrations-of-the-glossary-system/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/updates-and-demonstrations-of-the-glossary-system/</guid>
      <description>Demonstrations Learning clojure Here I demonstrate how easy it is to see and navigate glossary items highlighted across code, documentation and websites.

Learning the language of Lord of the Rings 
Learning archaic English from the KJV Bible</description>
    </item>
    
    <item>
      <title>Updates to the emacs glossary system</title>
      <link>https://mullikine.github.io/posts/updates-to-the-emacs-glossary-system/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/updates-to-the-emacs-glossary-system/</guid>
      <description>Key bindings    kb f      L glossary-add-link Create a link for a term to a topic. From then on, that topic&amp;rsquo;s glossary is loaded when the term is seen.   A add-to-glossary-file-for-buffer Add a new term to one of the most relevant glossaries.    Creating / adding to the ansible glossary 
Learning Lord of the Rings lore as I&amp;rsquo;m reading</description>
    </item>
    
    <item>
      <title>Glossaries for learning in emacs</title>
      <link>https://mullikine.github.io/posts/glossaries-for-learning-in-emacs/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/glossaries-for-learning-in-emacs/</guid>
      <description>Overview of the glossary system Purpose The glossary system is like a wiki system, but more dynamic.
Glossaries can be overlain onto anything &amp;ndash; books, websites, Facebook conversations, code, etc.
The glossary system provides the following abilities:
 Document-specific glossaries Topic-specific glossaries Visual set functions (Union and difference) for glossaries Highlighting to see what has been entered into the glossary already  The glossary system allows me to read, ingest and learn from documents, seeing what I know from a glance.</description>
    </item>
    
    <item>
      <title>Job Application for DevOps Engineer</title>
      <link>https://mullikine.github.io/posts/job-application/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/job-application/</guid>
      <description>Phone Email City     +64 21 1462 759 mullikine@gmail.com Dunedin, NZ    .org-center { margin-left: auto; margin-right: auto; text-align: center; }  Platform Engineering · Software Engineering · Test Automation · Natural Language Processing
 Shane Mulligan [Cover Letter] Dear Hiring Manager, Please consider me for this role. I&amp;rsquo;m passionate about developing tooling and automating software development processes. In 2020 I contracted for FMG in Australia developing CI/CD infrastructure their vehicle autonomy team on AWS.</description>
    </item>
    
    <item>
      <title>CodeCraft: Creating UIs for CLI programs with Docker and Emacs</title>
      <link>https://mullikine.github.io/posts/codecraft-creating-uis-for-cli-programs-with-docker-and-emacs/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/codecraft-creating-uis-for-cli-programs-with-docker-and-emacs/</guid>
      <description>Speaker URL     Shane Mulligan (Myself) https://github.com/mullikine/     Similar presentation Conquering Kubernetes with Emacs - YouTube  Creating standalone UI applications for CLI tools using emacs and docker emacs (editor macros) Macros could be automated key input. This works for almost all CLI programs.
tmux Years ago NickM, the creator of tmux gave a talk at St Davids lecture theatre. I didn&amp;rsquo;t go, but I was distraught when I found out I had missed the event.</description>
    </item>
    
    <item>
      <title>CodeCraft: Stacklet - Save Money on the Cloud</title>
      <link>https://mullikine.github.io/posts/codecraft-stacklet-save-money-on-the-cloud/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/codecraft-stacklet-save-money-on-the-cloud/</guid>
      <description>Company website https://stacklet.io/ Open source code https://github.com/cloud-custodian/cloud-custodian     Speaker URL     Tim Penhey https://github.com/howbazaar    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  stacklet.io https://stacklet.io/ Save money on the cloud.</description>
    </item>
    
    <item>
      <title>Automatic, interactive handling of build files and IaC</title>
      <link>https://mullikine.github.io/posts/automatic-interactive-handling-of-build-files-and-iac/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automatic-interactive-handling-of-build-files-and-iac/</guid>
      <description>Premise I do not want to need to remember how to build certain projects.
I would like to self-document in code which types of build files I have encountered.
 Effortless Explorative Extensible  Demonstration 
Code zsh binding 1 2 3 4 5 6 7 8 9 10 11 12 13 14  function zsh-cr() { trap func_trap EXIT func_trap() { tput rc } tput sc exec &amp;lt;/dev/tty cr } # M-TAB bindkey -s &amp;#34;\e[2~&amp;#34; &amp;#34;^A^Kcr\n&amp;#34;   cr (bash)  Capabilities:  Interactively prioritise and suggest which build files to run Compile/run a specific build/source file, if specified Specify which type of file I&amp;rsquo;d like to treat this file as When one build file is unable to compile the project, or advance the build process, try the next one.</description>
    </item>
    
    <item>
      <title>Easy, hyperlink wordclouds in emacs</title>
      <link>https://mullikine.github.io/posts/easy-hyperlink-wordclouds-in-emacs/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/easy-hyperlink-wordclouds-in-emacs/</guid>
      <description>Word clouds 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  (defface glossary-button-face &amp;#39;((t :foreground &amp;#34;#3fa75f&amp;#34; :background &amp;#34;#2e2e2e&amp;#34; :weight bold :underline t)) &amp;#34;Face for glossary buttons.&amp;#34;) (define-button-type &amp;#39;glossary-button &amp;#39;follow-link t &amp;#39;help-echo &amp;#34;Click to go to definition&amp;#34; &amp;#39;face &amp;#39;glossary-button-face) (defun create-buttoncloud (button-name-action-tuples-list) (with-output-to-temp-buffer &amp;#34;*button cloud*&amp;#34; (with-current-buffer &amp;#34;*button cloud*&amp;#34; (let ((consecutive)) (cl-loop for bt in button-name-action-tuples-list do (progn (if consecutive (insert &amp;#34; &amp;#34;)) (insert-button (car bt) &amp;#39;type &amp;#39;glossary-button &amp;#39;action (cdr bt)) (setq consecutive t))))))) (create-buttoncloud &amp;#39;((&amp;#34;yo&amp;#34; .</description>
    </item>
    
    <item>
      <title>Generating hyperlinks for glossaries and other parsers in emacs</title>
      <link>https://mullikine.github.io/posts/generating-hyperlinks-for-glossaries-and-other-parsers-in-emacs/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/generating-hyperlinks-for-glossaries-and-other-parsers-in-emacs/</guid>
      <description>TL;DR: Build a wiki, but far more powerful  I would like to be reminded of things as I read, like a wiki, but better. I would like to see a glossary of the words I have learned. I would like to know at a moment&amp;rsquo;s glance what I have already read and understood. I would like to be reminded of important things as I&amp;rsquo;m having a conversation.  Great for  Reading books Keeping and navigating a glossary extremely easily Procedurally/generatively navigating text (the applications are endless)  Enter, emacs Demonstration</description>
    </item>
    
    <item>
      <title>annotate any buffer in emacs</title>
      <link>https://mullikine.github.io/posts/annotate-any-buffer-in-emacs/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/annotate-any-buffer-in-emacs/</guid>
      <description>Synopsis Using annotate.el, it&amp;rsquo;s possible to annotate files and Info buffers, without modifying the file itself.
I&amp;rsquo;d like to make this work for any buffer.
Demonstration &amp;ndash; annotating dired 
Firstly, override the annotate-actual-file-name function to handle more buffer types 1 2 3 4 5 6 7 8 9 10 11  (defun annotate-actual-file-name () &amp;#34;Get the actual file name of the current buffer&amp;#34; (substring-no-properties (or (annotate-info-actual-filename) (string-or (buffer-file-name)) (string-or (if (major-mode-p &amp;#39;eww-mode) (concat &amp;#34;**&amp;#34; (get-path)))) (string-or (try (concat &amp;#34;**&amp;#34; (cond ((major-mode-p &amp;#39;dired-mode) (slugify (concat (str (buffer-mode)) &amp;#34;-&amp;#34; (mnm (my/pwd)) &amp;#34;-&amp;#34; (buffer-name)))) (t (slugify (concat (str (buffer-mode)) &amp;#34;-&amp;#34; (buffer-name)))))) &amp;#34;&amp;#34;)) &amp;#34;&amp;#34;)))   Add to some hooks for buffer types I&amp;rsquo;d like to annotate 1 2 3 4 5  (defset modes-for-annotate-mode &amp;#39;(Info-mode-hook helpful-mode help-mode prog-mode conf-mode text-mode yaml-mode ssh-config-mode)) (cl-loop for m in modes-for-annotate-mode do ;; (message (str m)) (let ((h (str2sym (concat (sym2str m) &amp;#34;-hook&amp;#34;)))) (add-hook h &amp;#39;enable-annotate t)))   dired-mode-hook happens too early, so I needed this 1 2 3 4 5  (defun dired-around-advice (proc &amp;amp;rest args) (let ((res (apply proc args))) (enable-annotate) res)) (advice-add &amp;#39;dired :around #&amp;#39;dired-around-advice)   When annotate is loaded, it creates some overlays.</description>
    </item>
    
    <item>
      <title>Review of &#39;Haskell Concepts in One Sentence&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-haskell-concepts-in-one-sentence/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-haskell-concepts-in-one-sentence/</guid>
      <description>Original article Haskell Concepts in One Sentence monad Composed of three functions and encodes control flow which allows pure functions to be strung together. recursive function A function that calls itself inside its own definition. monad transformer allows you to stack more than one monad for use in a function. Lift an operation on a functor that uses fmap to operate on the data contained in the functor. Optics(lens and prisms) allow you to get and set data in a data type.</description>
    </item>
    
    <item>
      <title>Use selection as input to occur-mode</title>
      <link>https://mullikine.github.io/posts/use-selection-as-input-to-occur-mode/</link>
      <pubDate>Sat, 05 Sep 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/use-selection-as-input-to-occur-mode/</guid>
      <description>This is the magic 1 2 3 4 5 6 7 8 9 10 11 12 13 14  ;; This allows me to select text and use that for the basis of occur (defun occur-around-advice (proc &amp;amp;rest args) (interactive (nconc (or (if (selection-p) (let ((sel (selection))) (deselect) (list (concat &amp;#34;\\b&amp;#34; sel &amp;#34;\\b&amp;#34;))) nil) (occur-read-primary-args)) (and (use-region-p) (list (region-bounds))))) (let ((res (if (use-region-p) (apply proc (list (selection))) (apply proc args)))) res)) (advice-add &amp;#39;occur :around #&amp;#39;occur-around-advice)   If you want to revert the behaviour then run this 1  (advice-remove &amp;#39;occur #&amp;#39;occur-around-advice)   Demonstration</description>
    </item>
    
    <item>
      <title>Stream editing code at macro time</title>
      <link>https://mullikine.github.io/posts/stream-editing-code-at-macro-time/</link>
      <pubDate>Fri, 04 Sep 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/stream-editing-code-at-macro-time/</guid>
      <description>I have some minimise and unminimise shell scripts, which I&amp;rsquo;ve wrapped into emacs lisp functions 1 2 3 4 5 6 7  (defun mnm (input) &amp;#34;Minimise string.&amp;#34; (sh-notty &amp;#34;mnm&amp;#34; input)) (defun umn (input) &amp;#34;Unminimise string.&amp;#34; (sh-notty &amp;#34;umn&amp;#34; input nil nil nil t))   This is the minimise or mnm script It shortens strings that contain paths which are known environment variables.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  #!</description>
    </item>
    
    <item>
      <title>calibredb inside emacs with text pdfs</title>
      <link>https://mullikine.github.io/posts/calibredb-inside-emacs-with-text-pdfs/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/calibredb-inside-emacs-with-text-pdfs/</guid>
      <description>Summary I want to be able to read pdfs from within emacs and convert them to text, so I can read them within a terminal.
I want this to work for dired, calibredb and org-mode, or anywhere else.
Demonstration 
Solution Ensure there are no openwith associations for pdfs 1  (remove-from-list &amp;#39;openwith-associations &amp;#39;(&amp;#34;\\.pdf\\&amp;#39;&amp;#34; &amp;#34;z&amp;#34; (file)))   Ensure there is no entry for pdfs in org-file=apps 1  (remove-from-list &amp;#39;org-file-apps &amp;#39;(&amp;#34;\\.</description>
    </item>
    
    <item>
      <title>easy elisp variable editing</title>
      <link>https://mullikine.github.io/posts/easy-elisp-variable-editing/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/easy-elisp-variable-editing/</guid>
      <description>Summary It&amp;rsquo;s useful to be able to make quick edits to the contents elisp variables, such as rearranging elements in a hook.
Demonstration 
Here is the code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  (defun edit-var-elisp (variable &amp;amp;optional buffer frame) (interactive (let ((v (variable-at-point)) (enable-recursive-minibuffers t) (orig-buffer (current-buffer)) val) (setq val (completing-read (if (symbolp v) (format &amp;#34;Describe variable (default %s): &amp;#34; v) &amp;#34;Describe variable: &amp;#34;) #&amp;#39;help--symbol-completion-table (lambda (vv) ;; In case the variable only exists in the buffer ;; the command we switch back to that buffer before ;; we examine the variable.</description>
    </item>
    
    <item>
      <title>Generating poetry with GPT-2</title>
      <link>https://mullikine.github.io/posts/generating-poetry-with-gpt-2/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/generating-poetry-with-gpt-2/</guid>
      <description>Resources https://github.com/kylemcdonald/gpt-2-poetry https://kylemcdonald.github.io/gpt-2-poetry/ Final code https://github.com/mullikine/gpt-2  Running the Dockerfile.cpu 
Original steps  Download the HTML from poetryfoundation.org based on the urls in romantic-urls.txt. https://gist.github.com/bea516e3726d0a0ab139bca534a43fe9   Use Parse Poetry.py to extract
 title author poem    Save that data to output/.
 The metadata is contained in the first few lines.    Use Generate GPT-2.py to generate poems based on random chunks from the poems and the seed words.</description>
    </item>
    
    <item>
      <title>searching for libraries in emacs with libraries.io</title>
      <link>https://mullikine.github.io/posts/searching-for-libraries-in-emacs-with-libraries-io/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/searching-for-libraries-in-emacs-with-libraries-io/</guid>
      <description>Summary I&amp;rsquo;d like to search for libraries using libraries.io, but not have to leave emacs.
Demonstration 
Add to eww&amp;rsquo;s URL handling hook to download the actual code 
Code Define an engine-mode engine 1 2 3  (defengine libraries &amp;#34;https://libraries.io/search?q=%s&amp;#34; :keybinding &amp;#34;/&amp;#34;)   Create the function to clean up the page after loading in eww 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  (defun clean-up-libraries-io () (interactive) (beginning-of-buffer) (toggle-read-only) (cua-set-mark) (search-forward &amp;#34;------&amp;#34;) (forward-line) (forward-char) (delete-selected) (end-of-buffer) (cua-set-mark) (re-search-backward &amp;#34;^License&amp;#34;) (previous-line) (delete-selected) (beginning-of-buffer) (toggle-read-only)) (add-to-list &amp;#39;eww-patchup-url-alist &amp;#39;(&amp;#34;://libraries.</description>
    </item>
    
    <item>
      <title>grep.app inside emacs</title>
      <link>https://mullikine.github.io/posts/grep-app-inside-emacs/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/grep-app-inside-emacs/</guid>
      <description>Summary grep.app is a free web app that lets you perform full-text search on GitHub code, using regex to match content, file paths and repository names.
The problem I&amp;rsquo;d like to make this more convenient by searching and obtaining example code all within emacs.
 emacs&amp;rsquo; eww-mode doesn&amp;rsquo;t support javascript. I&amp;rsquo;d like to present the website in a usable form &amp;ndash; code snippets cleaned up. I&amp;rsquo;d like to automate the process of searching so that it doesn&amp;rsquo;t require any typing.</description>
    </item>
    
    <item>
      <title>M-SPC for running commands in zsh</title>
      <link>https://mullikine.github.io/posts/m-spc-for-running-commands-in-zsh/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/m-spc-for-running-commands-in-zsh/</guid>
      <description>Demonstration 
zshrc config modifications 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  # # fz command # bindkey -s &amp;#34;^[ &amp;#34; &amp;#34;^A^Kslmenu\r&amp;#34; function zsh-slmenu() { trap func_trap EXIT func_trap() { tput rc } tput sc exec &amp;lt;/dev/tty slmenu } # M-SPC autoload -z zsh-slmenu zle -N zsh-slmenu bindkey &amp;#34;\e &amp;#34; zsh-slmenu   slmenu script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  #!</description>
    </item>
    
    <item>
      <title>Review of &#39;Search Benchmarking: RediSearch vs. Elasticsearch | Redis Labs&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-search-benchmarking-redisearch-vs-elasticsearch-redis-labs/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-search-benchmarking-redisearch-vs-elasticsearch-redis-labs/</guid>
      <description>Original article Search Benchmarking: RediSearch vs. Elasticsearch | Redis Labs  Search Benchmarking: RediSearch vs. Elasticsearch by Keren Ouaknine
Background RediSearch is a distributed full-text search and aggregation engine built as a module on top of Redis. It enables users to execute complex search queries on their Redis dataset in an extremely fast manner. The unique architecture of RediSearch, which was written in C and built from the ground up on optimized data structures, makes it a true alternative to other search engines in the market.</description>
    </item>
    
    <item>
      <title>Generating elisp functions interactively to wrap shell commands</title>
      <link>https://mullikine.github.io/posts/generating-elisp-functions-interactively-to-wrap-shell-commands/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/generating-elisp-functions-interactively-to-wrap-shell-commands/</guid>
      <description>Required functions This is needed to provide history and to allow you to enter the empty string to completing-read.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  (defun completing-read-hist (prompt &amp;amp;optional histvar initial-input) &amp;#34;read-string but with history.&amp;#34; (if (not histvar) (setq histvar (str2sym (concat &amp;#34;completing-read-hist-&amp;#34; (slugify prompt) (if initial-input (concat &amp;#34;-&amp;#34; initial-input) &amp;#34;&amp;#34;))))) (initvar histvar) (if (and (not initial-input) (listp histvar)) (setq initial-input (first histvar))) (eval `(progn ;; (str (completing-read ,prompt ,histvar nil nil initial-input &amp;#39;,histvar nil)) (let ((inhibit-quit t)) (or (with-local-quit (let ((completion-styles ;; &amp;#39;(basic partial-completion emacs22) &amp;#39;(basic))) (str (ivy-completing-read-with-empty-string-def ,prompt ,histvar nil nil initial-input &amp;#39;,histvar nil))) ;; (str (helm-comp-read ,prompt ,histvar :initial-input ,initial-input :must-match nil :history ,histvar :input-history &amp;#39;,histvar)) ) &amp;#34;&amp;#34;)))))   Generator code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  (defun join-args-for-command (args &amp;amp;optional forcequotes) (s-join &amp;#34; &amp;#34; (mapcar (if forcequotes &amp;#39;q &amp;#39;s/q) args))) (defun gen-command-from-shell-command (command &amp;amp;rest arguments-defaults) &amp;#34;Generates an interactive command from a list of argument names of an external command&amp;#34; (interactive (let* ((exe (fz (list-executables))) (args-defaults-string (read-string-hist (concat &amp;#34;gencom: &amp;#34; exe &amp;#34; &amp;#34;))) (args-defaults-list-string (str2list (cl-sn (concat &amp;#34;cmd2lines &amp;#34; args-defaults-string) :chomp t)))) `(,exe ,@args-defaults-list-string))) (let* ( ;; Construct/Reconstruct args-string (args-defaults-string (join-args-for-command arguments-defaults)) (args-defaults-list-tuples (mapcar (lambda (s) (let ((ss (s-split &amp;#34;=&amp;#34; s))) (cons (first ss) (second ss)))) arguments-defaults)) (args-list (mapcar &amp;#39;car args-defaults-list-tuples)) (defaults-list (mapcar &amp;#39;cdr args-defaults-list-tuples)) (slug-list (mapcar &amp;#39;slugify args-list)) (slug-defaults-tuples-list (mapcar* &amp;#39;cons slug-list defaults-list)) ;; These are defaults for an interactive invocation, not for a normal function invocation (defaults-list (cl-loop for s in slug-defaults-tuples-list collect (cons (car s) (or (cdr s) (read-string-hist (concat &amp;#34;gencom: &amp;#34; command &amp;#34;.</description>
    </item>
    
    <item>
      <title>Generate cl-defun from defun</title>
      <link>https://mullikine.github.io/posts/generate-cl-defun-from-defun/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/generate-cl-defun-from-defun/</guid>
      <description>Premise We need to turn an arbitrary defun into a cl-defun because cl-defun has the &amp;amp;key parameter option which allows us to specify named arguments as opposed to positional arguments.
Solution I made a macro to do this automatically.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  (defmacro cl-genfuncwrapper (fun) (let* ( (newfun (intern (concat &amp;#34;cl-&amp;#34; (symbol-name fun)))) (optional nil) (sigbuilder (-flatten (cl-loop for e in (help-function-arglist fun) collect (progn (if (eq &amp;#39;&amp;amp;optional e) (progn (setq optional t) &amp;#39;()) (if optional (list &amp;#39;&amp;amp;key e) (list e))))))) (callbuilder (-flatten (cl-loop for e in (help-function-arglist fun) collect (progn (if (or (eq &amp;#39;&amp;amp;optional e) (eq &amp;#39;&amp;amp;key e)) &amp;#39;() (list e)))))) (sig sigbuilder) (iform (interactive-form fun))) `(cl-defun ,newfun ,sig ,iform (,fun ,@callbuilder))))   Example (use-case) I would like to create a function called cl-sh-notty which allows me to provide named arguments to the function rather than positional ones.</description>
    </item>
    
    <item>
      <title>Interactively run elisp commands using a stripped down-syntax</title>
      <link>https://mullikine.github.io/posts/interactively-run-elisp-commands-using-a-stripped-down-syntax/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/interactively-run-elisp-commands-using-a-stripped-down-syntax/</guid>
      <description>Premise It takes too long to run emacs lisp functions with the usual syntax.
Solution I create a new emacs REPL that enables me to run emacs commands in a far more efficient manner.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  (defun call-command-or-function (funcsym &amp;amp;rest body) (if (and (function-p funcsym) (commandp funcsym)) (if body (eval `(funcall-interactively funcsym ,@body)) (call-interactively funcsym)) (eval `(call-function funcsym ,@body)))) (defun degloved-command-to-sexp (s) (let ((lisp-code (concat &amp;#34;&amp;#39;(&amp;#34; (sn (concat &amp;#34;cmd-cip \\=&amp;#34; s)) &amp;#34;)&amp;#34;))) (eval-string lisp-code))) (defun degloved-get-command () (interactive) (let* ((funname (str (car (find-function-read)))) (funsym (str2sym funname)) (arglist (help-function-arglist funsym)) (cmd-arglist (cons funsym arglist)) (cmd-arglist-string (str cmd-arglist)) (full-command (if arglist (read-string-hist (concat cmd-arglist-string &amp;#34;: &amp;#34;) nil (concat funname &amp;#34; &amp;#34;)) funname))) (if (called-interactively-p &amp;#39;interative) (new-buffer-from-string full-command) full-command))) (defun degloved-run (command) (interactive (list (degloved-get-command))) (let* ((lisp-code (degloved-command-to-sexp command)) (funcsym (car lisp-code)) (body (cdr lisp-code))) (eval `(call-command-or-function funcsym ,@body)))) (define-key global-map (kbd &amp;#34;M-X&amp;#34;) &amp;#39;degloved-run) (define-key global-map (kbd &amp;#34;H-d&amp;#34;) &amp;#39;degloved-run)   The follow script demonstrates how I quote tokens conditionally for elisp generation 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #!</description>
    </item>
    
    <item>
      <title>The best regex trick ever in different languages</title>
      <link>https://mullikine.github.io/posts/the-best-regex-trick-ever-in-different-languages/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/the-best-regex-trick-ever-in-different-languages/</guid>
      <description> Original article https://www.rexegg.com/regex-best-trick.html  The trick is a way to match all except for &amp;hellip; For example, Match Tarzan but not &amp;ldquo;Tarzan&amp;rdquo;.
emacs lisp 1 2 3 4 5 6  (let ((str1 &amp;#34;\&amp;#34;Tarzan\&amp;#34;&amp;#34;) (str2 &amp;#34;Tarzan&amp;#34;)) (when (string-match &amp;#34;\&amp;#34;Tarzan\&amp;#34;\\|\\(Tarzan\\)&amp;#34; str1) (message (concat &amp;#34;str1:&amp;#34; (match-string 1 str1)))) (when (string-match &amp;#34;\&amp;#34;Tarzan\&amp;#34;\\|\\(Tarzan\\)&amp;#34; str2) (message (concat &amp;#34;str2:&amp;#34; (match-string 1 str2)))))   &amp;#34;\&amp;#34;str2:Tarzan\&amp;#34;&amp;#34; </description>
    </item>
    
    <item>
      <title>Using babel with Google translate</title>
      <link>https://mullikine.github.io/posts/using-babel-with-google-translate/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-babel-with-google-translate/</guid>
      <description>Create wrapper script around soimort/translate-shell translate-shell 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null # translate-shell -s en -t fr &amp;#34;$@&amp;#34; stdin_exists() { ! [ -t 0 ] &amp;amp;&amp;amp; ! test &amp;#34;$(readlink /proc/$$/fd/0)&amp;#34; = /dev/null } if stdin_exists; then ins=&amp;#34;$(cat)&amp;#34; set -- &amp;#34;$@&amp;#34; &amp;#34;$ins&amp;#34; fi $MYGIT/soimort/translate-shell/translate -brief &amp;#34;$@&amp;#34;   Create the entries in org-template-gen 1 2 3 4 5 6 7 8 9 10 11 12 13  french) { echo &amp;#34;#+BEGIN_SRC text -n :f \&amp;#34;translate-shell -s fr -t en\&amp;#34; :async :results verbatim code&amp;#34; cat &amp;#34;$input_fp&amp;#34; | postprocess echo -n &amp;#34;#+END_SRC&amp;#34; } ;; english) { echo &amp;#34;#+BEGIN_SRC text -n :f \&amp;#34;translate-shell -s en -t fr\&amp;#34; :async :results verbatim code&amp;#34; cat &amp;#34;$input_fp&amp;#34; | postprocess echo -n &amp;#34;#+END_SRC&amp;#34; } ;;   Create the entries in hydra-org-template 1 2  (&amp;#34;E&amp;#34; (hot-expand &amp;#34;&amp;lt;s&amp;#34; &amp;#34;french&amp;#34;) &amp;#34;french&amp;#34;) (&amp;#34;F&amp;#34; (hot-expand &amp;#34;&amp;lt;s&amp;#34; &amp;#34;english&amp;#34;) &amp;#34;english&amp;#34;)   Demonstration</description>
    </item>
    
    <item>
      <title>Fixing LSP for Python in emacs</title>
      <link>https://mullikine.github.io/posts/fixing-lsp-for-python-in-emacs/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/fixing-lsp-for-python-in-emacs/</guid>
      <description>TL;DR The documentation doesn&amp;rsquo;t appear in python mode.
I was using anaconda-mode to display documentation to alleviate the problem.
I found the problem in the way lsp-mode extracts documentation from the request.
Now it works.
I&amp;rsquo;ve also created a function my-lsp-get- hover-docs to create a new buffer from the documentation for the thing under the cursor.
As a side-effect of all of this, I&amp;rsquo;ve learned to create my own overlays.</description>
    </item>
    
    <item>
      <title>Add super and hyper to terminal emacs</title>
      <link>https://mullikine.github.io/posts/add-super-and-hyper-to-terminal-emacs/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/add-super-and-hyper-to-terminal-emacs/</guid>
      <description>Tapping these chords will add the modifier to the chord that follows.
 Source material https://www.gnu.org/software/emacs/manual/html%5Fnode/elisp/Translation-Keymaps.html https://emacs.stackexchange.com/questions/18245/making-terminal-emacs-treat-apps-aka-menu-key-as-super-modifier  Now I have a means of typing any bindings that use the super or hyper keys.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  (defun add-event-modifier (string e) (let ((symbol (if (symbolp e) e (car e)))) (setq symbol (intern (concat string (symbol-name symbol)))) (if (symbolp e) symbol (cons symbol (cdr e))))) (defun superify (prompt) (let ((e (read-event))) (vector (if (numberp e) (logior (lsh 1 23) e) (if (memq &amp;#39;super (event-modifiers e)) e (add-event-modifier &amp;#34;s-&amp;#34; e)))))) (defun hyperify (prompt) (let ((e (read-event))) (vector (if (numberp e) (logior (lsh 1 24) e) (if (memq &amp;#39;hyper (event-modifiers e)) e (add-event-modifier &amp;#34;H-&amp;#34; e)))))) (define-key global-map (kbd &amp;#34;C-M-6&amp;#34;) nil) ;For GUI (define-key function-key-map (kbd &amp;#34;C-M-6&amp;#34;) &amp;#39;superify) ;For GUI (define-key function-key-map (kbd &amp;#34;C-M-^&amp;#34;) &amp;#39;superify) (define-key global-map (kbd &amp;#34;C-M-\\&amp;#34;) nil) ;Ensure that this bindings isnt taken (define-key function-key-map (kbd &amp;#34;C-M-\\&amp;#34;) &amp;#39;hyperify)   </description>
    </item>
    
    <item>
      <title>Automate vim with emacs keyboard macros</title>
      <link>https://mullikine.github.io/posts/automate-vim-with-emacs-keyboard-macros/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/automate-vim-with-emacs-keyboard-macros/</guid>
      <description>This will open the list of blog posts inside of vim.
This outputs a shell command into vim and starts it within spacemacs via emacsclient.
1  sp -shE &amp;#34;cd /home/shane/blog/posts; find . -name &amp;#39;*.org&amp;#39; | v&amp;#34;   I now want to go through the remaining blog posts listed in vim (which do not have margin=0.05in as the first line and add it.
Not knowing if it&amp;rsquo;s possible to create a multi-file keyboard macro in vim, I will use emacs macros on vim via term-mode.</description>
    </item>
    
    <item>
      <title>Creating a portfolio PDF from my blog</title>
      <link>https://mullikine.github.io/posts/creating-a-portfolio-pdf-from-my-blog/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/creating-a-portfolio-pdf-from-my-blog/</guid>
      <description>Firstly, touch up my blog articles to be suitable for PDF Do this by automating vim with emacs.
Find blog articles without LATEX_HEADER 1  cd $HOME/blog/posts; find . -name &amp;#39;*.org&amp;#39; | eipct -x -E &amp;#34;! grep -q LATEX_HEADER&amp;#34; | eipct -x grep -q HUGO_BASE | head -n 5   ./aws-services.org ./rat.org ./music-playlists-in-emacs-lisp.org ./minor-mode-wrappers-for-shell-commands.org ./review-of-introduction-rust-by-example.org Automate vim with emacs keyboard macros I want to add the latex header to all the blog posts without one.</description>
    </item>
    
    <item>
      <title>Install haskell missing libraries</title>
      <link>https://mullikine.github.io/posts/install-haskell-missing-libraries/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/install-haskell-missing-libraries/</guid>
      <description>List installed resolvers stack-list-resolvers
1 2 3 4 5 6 7 8 9 10 11 12 13 14  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null # stack ls snapshots --lts remote | cat # TODO Make a way to list local resolvers cd /media/external-hd$HOME/.stack/build-plan find . -maxdepth 1 -name &amp;#34;lts-*.yaml&amp;#34; | sed -e &amp;#39;s/^\.\///&amp;#39; -e &amp;#39;s/\.yaml$//&amp;#39; | awk1 | while IFS=$&amp;#39;\n&amp;#39; read -r line; do echo &amp;#34;$line&amp;#34; unbuffer oci yq -r &amp;#39;.</description>
    </item>
    
    <item>
      <title>Advanced jq</title>
      <link>https://mullikine.github.io/posts/advanced-jq/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/advanced-jq/</guid>
      <description>Original article https://stedolan.github.io/jq/manual/#foreach/h3/code  options 1 2 3 4 5  · --compact-output / -c: By default, jq pretty-prints JSON output. Using this option will result in more compact output by instead putting each JSON object on a single line.   stream 1  jq -n &amp;#39;[{foo:&amp;#34;bar&amp;#34;},{foo:&amp;#34;baz&amp;#34;}]&amp;#39; | jq -cn --stream &amp;#39;fromstream(1|truncate_stream(inputs))&amp;#39;   {&amp;#34;foo&amp;#34;:&amp;#34;bar&amp;#34;} {&amp;#34;foo&amp;#34;:&amp;#34;baz&amp;#34;} generate some json 1  [{foo:&amp;#34;bar&amp;#34;},{foo:&amp;#34;baz&amp;#34;}]   
[ { &amp;#34;foo&amp;#34;: &amp;#34;bar&amp;#34; }, { &amp;#34;foo&amp;#34;: &amp;#34;baz&amp;#34; } ] Convert the json to stream 1  fromstream(1|truncate_stream(inputs))   {&amp;#34;foo&amp;#34;:&amp;#34;bar&amp;#34;} {&amp;#34;foo&amp;#34;:&amp;#34;baz&amp;#34;} Explanation --stream turns the json into a list of the paths to the values.</description>
    </item>
    
    <item>
      <title>Navigate buffers in emacs using arbitrary string filters and parsers</title>
      <link>https://mullikine.github.io/posts/navigate-files-in-emacs-using-rosielang/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/navigate-files-in-emacs-using-rosielang/</guid>
      <description>TL;DR The basic idea here is that we might want to navigate to the next and previous instances of a common pattern in a file.
The common pattern might be an IP address, say or an email.
I extend emacs to use output from the rosie parser to navigate a file.
This will be useful in future because most likely I will want to use other parsers.
Demonstration Select from lists of filters and navigate</description>
    </item>
    
    <item>
      <title>Suggesting emacs functions depending on the context</title>
      <link>https://mullikine.github.io/posts/suggesting-emacs-functions-depending-on-the-context/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/suggesting-emacs-functions-depending-on-the-context/</guid>
      <description>TL;DR Implement in emacs lisp a way of suggesting functions to myself depending on a set of cues
Demonstration 
Designing the plugin Some predicate atoms 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  (defun chomp (str) &amp;#34;Chomp leading and tailing whitespace from STR for each line.&amp;#34; (while (string-match &amp;#34;\\`\n+\\|^\\s-+\\|\\s-+$\\|\n+\\&amp;#39;&amp;#34; str) (setq str (replace-match &amp;#34;&amp;#34; t t str))) str) (defalias &amp;#39;q &amp;#39;shell-quote-argument) (defun rpl-at-line-p (rpl) (let* ((output (chomp (shell-command-to-string (concat &amp;#34;rosie grep -o subs &amp;#34; (q rpl)) (thing-at-point &amp;#39;line t)))) (matches (str2list output)) (n (length matches))) (and (not (string-empty-p output)) (&amp;gt; n 0)))) (defun rpl-at-point-p (rpl) (let* ((output (chomp (sn (concat &amp;#34;rosie grep -o subs &amp;#34; (q rpl)) (thing-at-point &amp;#39;sexp t)))) (matches (str2list output)) (n (length matches))) (and (not (string-empty-p output)) (&amp;gt; n 0))))   Some functions to debug the above predicate atoms 1 2 3 4 5 6 7 8 9  (defun rpl-at-line (rpl) (let* ((output (chomp (sn (concat &amp;#34;rosie grep -o subs &amp;#34; (q rpl)) (thing-at-point &amp;#39;line t)))) (matches (str2list output))) matches)) (defun rpl-at-point (rpl) (let* ((output (chomp (sn (concat &amp;#34;rosie grep -o subs &amp;#34; (q rpl)) (thing-at-point &amp;#39;sexp t)))) (matches (str2list output))) matches))   Some functions that we might want to suggest 1 2 3 4 5 6 7 8 9 10  (defun copy-ip-here () (interactive) (xc (first (rpl-at-point &amp;#34;net.</description>
    </item>
    
    <item>
      <title>Trying out python libraries in emacs</title>
      <link>https://mullikine.github.io/posts/trying-out-python-libraries-in-emacs/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/trying-out-python-libraries-in-emacs/</guid>
      <description>Create a convenience script for creating temporary directories 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118  #!</description>
    </item>
    
    <item>
      <title>Use chrome puppeteer to provide a DOM for emacs eww</title>
      <link>https://mullikine.github.io/posts/use-chrome-puppeteer-to-provide-a-dom-for-emacs-eww/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/use-chrome-puppeteer-to-provide-a-dom-for-emacs-eww/</guid>
      <description>Basically, a lot of websites these days generate the DOM using javascript.
You can dump the DOM from chrome and inject it into eww just before it renders.
Firstly, create a script for dumping the dom given a url dump-dom shell script.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  #!</description>
    </item>
    
    <item>
      <title>Effective lisp string editing in emacs</title>
      <link>https://mullikine.github.io/posts/effective-lisp-string-editing-in-emacs/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/effective-lisp-string-editing-in-emacs/</guid>
      <description>Premise I wanted to edit strings in a more isolated and optimised environment for editing strings.
The best way to do so turned out to be a combination of buffer narrowing and switching to a new mode who&amp;rsquo;s sole purpose is to provide a generic mode for editing text and a key binding to widen the buffer again.
Create the major mode and the &amp;lsquo;edit string&amp;rsquo; function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  (defvar lispy-string-edit-mode-map (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap &amp;#34;lispy string&amp;#34;))) (define-key map (kbd &amp;#34;C-c &amp;#39;&amp;#34;) &amp;#39;lispy-edit-string) map)) (define-derived-mode lispy-string-edit-mode text-mode &amp;#34;lispy string&amp;#34; &amp;#34;Major mode for editing lisp strings&amp;#34;) (defun emacs-lisp-edit-string () (interactive) (if (and (lispy--buffer-narrowed-p) (major-mode-p &amp;#39;lispy-string-edit-mode)) (progn (cfilter &amp;#34;q -f&amp;#34;) (while (lispy--buffer-narrowed-p) (ignore-errors (call-interactively &amp;#39;recursive-widen))) (emacs-lisp-mode)) (if (lispy--in-string-p) (save-mark-and-excursion (progn (lispy-mark) (call-interactively &amp;#39;my/enter-edit-emacs) (lispy-string-edit-mode) (cfilter &amp;#34;uq&amp;#34;)))))) (defalias &amp;#39;lispy-edit-string &amp;#39;emacs-lisp-edit-string)   Demonstration Editing strings is so much easier now!</description>
    </item>
    
    <item>
      <title>ElasticSearch and emacs</title>
      <link>https://mullikine.github.io/posts/elasticsearch-and-emacs/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/elasticsearch-and-emacs/</guid>
      <description>babel https://github.com/dakrone/es-mode
The built-in babel interpreter for ES query DSL targets http://localhost:9200/.
POST /_search?pretty { &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} } } { &amp;#34;took&amp;#34; : 0, &amp;#34;timed_out&amp;#34; : false, &amp;#34;_shards&amp;#34; : { &amp;#34;total&amp;#34; : 0, &amp;#34;successful&amp;#34; : 0, &amp;#34;skipped&amp;#34; : 0, &amp;#34;failed&amp;#34; : 0 }, &amp;#34;hits&amp;#34; : { &amp;#34;total&amp;#34; : 0, &amp;#34;max_score&amp;#34; : 0.0, &amp;#34;hits&amp;#34; : [ ] } } tablify POST /test/doc/_search { &amp;#34;aggs&amp;#34; : { &amp;#34;my_terms_agg&amp;#34; : { &amp;#34;terms&amp;#34; : { &amp;#34;field&amp;#34; : &amp;#34;type&amp;#34; } } }, &amp;#34;size&amp;#34;: 0 } </description>
    </item>
    
    <item>
      <title>Navigating code language-agnostically with ctags</title>
      <link>https://mullikine.github.io/posts/navigating-code-language-agnostically-with-ctags/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/navigating-code-language-agnostically-with-ctags/</guid>
      <description>required tools  cscope pycscope cqmakedb ctags-exuberant tags2uml  supported languages Basically, as many as ctags supports.
 I have utilised only the following:  python php java c++ go rust javascript typescript     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  find -L -O3 $CWD \  -true \  -and \  \( \  -name &amp;#39;*.</description>
    </item>
    
    <item>
      <title>parsing c&#43;&#43; with python</title>
      <link>https://mullikine.github.io/posts/parsing-c-with-python/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/parsing-c-with-python/</guid>
      <description>Example https://pygccxml.readthedocs.io/en/master/examples/templates/example.html  C++ is notoriously difficult to parse.
parse-cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null stdin_exists() { ! [ -t 0 ] &amp;amp;&amp;amp; ! test &amp;#34;$(readlink /proc/$$/fd/0)&amp;#34; = /dev/null } if stdin_exists; then fp=&amp;#34;$(tf cpp)&amp;#34; set -- &amp;#34;$fp&amp;#34; &amp;#34;$@&amp;#34; exec &amp;lt;&amp;amp;1 fi fp=&amp;#34;$1&amp;#34; test -f &amp;#34;$fp&amp;#34; || exit 1 x -sh &amp;#34;parse-cpp.</description>
    </item>
    
    <item>
      <title>Updating Trigger Studio for Age of Empires II: DE</title>
      <link>https://mullikine.github.io/posts/ts-aoe2de/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/ts-aoe2de/</guid>
      <description>Credits Without the help of dderevjanik and KSneijders, this update would not be possible.
  dderevjanik
 http://dderevjanik.github.io/agescx/formatscx/#format    KSneijders
 https://github.com/KSneijders/AoE2ScenarioParser    Update: &amp;lt;2020-06-27 Sat&amp;gt; Using AoE2ScenarioParser by KSneijders Extract a trigger into JSON using the python library.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152  { &amp;#34;_TriggerObject__description&amp;#34;: &amp;#34;\u0000&amp;#34;, &amp;#34;_TriggerObject__short_description&amp;#34;: &amp;#34;\u0000&amp;#34;, &amp;#34;_name&amp;#34;: &amp;#34;StartYearCountdown\u0000&amp;#34;, &amp;#34;condition_order&amp;#34;: [ 0 ], &amp;#34;conditions&amp;#34;: [ { &amp;#34;ai_signal&amp;#34;: -1, &amp;#34;amount_or_quantity&amp;#34;: 0, &amp;#34;area_1_x&amp;#34;: -1, &amp;#34;area_1_y&amp;#34;: -1, &amp;#34;area_2_x&amp;#34;: -1, &amp;#34;area_2_y&amp;#34;: -1, &amp;#34;comparison&amp;#34;: -1, &amp;#34;condition_type&amp;#34;: 4, &amp;#34;inverted&amp;#34;: -1, &amp;#34;next_object&amp;#34;: -1, &amp;#34;object_group&amp;#34;: -1, &amp;#34;object_list&amp;#34;: 826, &amp;#34;object_type&amp;#34;: -1, &amp;#34;player&amp;#34;: 0, &amp;#34;py/object&amp;#34;: &amp;#34;AoE2ScenarioParser.</description>
    </item>
    
    <item>
      <title>PlantUML</title>
      <link>https://mullikine.github.io/posts/plantuml/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/plantuml/</guid>
      <description>docker wrapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null stdin_exists() { ! [ -t 0 ] &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>Elasticsearch concepts</title>
      <link>https://mullikine.github.io/posts/elasticsearch-concepts/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/elasticsearch-concepts/</guid>
      <description>search  Original article https://icij.gitbook.io/datashare/all/search-with-operators Original article https://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl-query-string-query.html   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60  Fuzziness Character-level edit-distance.</description>
    </item>
    
    <item>
      <title>Python property</title>
      <link>https://mullikine.github.io/posts/python-property/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-property/</guid>
      <description>Using regular attributes 1 2 3 4 5 6 7 8 9 10 11 12  class Student: def __init__(self, name, marks): self.name = name self.marks = marks self.gotmarks = self.name + &amp;#39; obtained &amp;#39; + self.marks + &amp;#39; marks&amp;#39; st = Student(&amp;#34;Jaki&amp;#34;, &amp;#34;25&amp;#34;) print(st.name) print(st.marks) print(st.gotmarks)   Using functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Student: def __init__(self, name, marks): self.</description>
    </item>
    
    <item>
      <title>Effective Communication in a Digital Work Environment</title>
      <link>https://mullikine.github.io/posts/review-of-airsend/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-airsend/</guid>
      <description>Original article AirSend  A while ago, we published an article that dives into synchronous and asynchronous communication.
 Synchronous communication communication that happens in real time. It’s a company meeting on Zoom or an active chat room. Asynchronous communication communication that happens… not in real time. email, notes on a zoom meeting, etc.  Synchronous For uncertainty and/or urgency, use Synchronous.
It’s good for exploring ideas together, having discussions to make decisions, and addressing crisis situations.</description>
    </item>
    
    <item>
      <title>Review of &#39;An Update on the Evolution of the Oculus Platform | Oculus&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-an-update-on-the-evolution-of-the-oculus-platform-oculus/</link>
      <pubDate>Wed, 24 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-an-update-on-the-evolution-of-the-oculus-platform-oculus/</guid>
      <description>Original article An Update on the Evolution of the Oculus Platform | Oculus Oculus Go Obsoleted. A portable, all-in-one VR headset made for entertainment. Maintain the system software with bug fixes and security patches through 2022 Oculus Quest Redefined the category, with full head and hand movement powered by our Insight tracking system.   1 2 3 4 5 6  6DOF Six degrees of freedom The freedom of movement of a rigid body in three-dimensional space.</description>
    </item>
    
    <item>
      <title>Automating Google vs via the terminal</title>
      <link>https://mullikine.github.io/posts/automating-google-vs-via-the-terminal/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-google-vs-via-the-terminal/</guid>
      <description>Original article https://medium.com/applied-data-science/the-google-vs-trick-618c8fd5359f   1 2 3 4 5 6 7 8 9 10 11  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null term=&amp;#34;$@&amp;#34; term=&amp;#34;$(p &amp;#34;$term&amp;#34; | urlencode)&amp;#34; curl &amp;#34;http://suggestqueries.google.com/complete/search?&amp;amp;output=toolbar&amp;amp;gl=us&amp;amp;hl=en&amp;amp;q=$term%20vs&amp;#34; | xml2json | jq -r &amp;#39;.toplevel.CompleteSuggestion[].suggestion.data&amp;#39; | sed &amp;#34;s/^$termvs \?//&amp;#34; | uniqnosort | sed &amp;#34;/^$/d&amp;#34; | pavs   1  google-vs apple | fzf --sync | xa google-vs | fzf --sync | xa google-vs | fzf --sync | xa google-vs | fzf --sync | xa google-vs   Demonstration: Finding alternatives</description>
    </item>
    
    <item>
      <title>management.py</title>
      <link>https://mullikine.github.io/posts/management-py/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/management-py/</guid>
      <description>Premise I was looking at this pastebin clone when I wanted to know what management.py was.
 Source code GitHub - HongyiFu/django-pastebin-clone: A pastebin clone done in Python with Django framework (no frontend)  Searching for management.py  Tools used  LSP emacs google stackoverflow     1  v +/&amp;#34;Encapsulate the logic of the django-admin and manage.py utilities.&amp;#34; &amp;#34;/usr/local/lib/python3.5/dist-packages/django/core/management/__init__.py&amp;#34;   These are handed off to a ManagementUtility instance, which has a .</description>
    </item>
    
    <item>
      <title>Review of &#39;9 top open-source tools for monitoring Kubernetes | TechBeacon&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-9-top-open-source-tools-for-monitoring-kubernetes-techbeacon/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-9-top-open-source-tools-for-monitoring-kubernetes-techbeacon/</guid>
      <description>Original article 9 top open-source tools for monitoring Kubernetes | TechBeacon  EFK 1 2 3 4 5 6 7 8 9 10 11 12 13 14  Fluentd A cross platform open-source data collection software. Fluentd vs Logstash Logstash routes all data into a single stream and then uses algorithmic if-then statements to send them to the correct destination. Fluentd uses tags to route events. Each Fluentd event has a tag that tells Fluentd where it needs to be routed.</description>
    </item>
    
    <item>
      <title>Rosetta stones for commands and code</title>
      <link>https://mullikine.github.io/posts/rosetta-stones-for-commands-and-code/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/rosetta-stones-for-commands-and-code/</guid>
      <description>Setup commands 1 2 3 4 5 6 7 8  cd $NOTES/ws/rosetta-stones/windows-vs-linux url2org &amp;#34;https://www.lemoda.net/windows/windows2unix/windows2unix.html&amp;#34; &amp;gt; lemoda.net.org cd $NOTES/ws/rosetta-stones/shell elinks-dump &amp;#34;https://hyperpolyglot.org/shell&amp;#34; &amp;gt; hyperpolyglot.txt cd $NOTES/ws/rosetta-stones/lisp elinks-dump &amp;#34;https://hyperpolyglot.org/lisp&amp;#34; &amp;gt; hyperpolyglot.txt   TUI 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null topic=&amp;#34;$1&amp;#34; shift cd $NOTES/ws/rosetta-stones test -n &amp;#34;$topic&amp;#34; || topic=&amp;#34;$(find .</description>
    </item>
    
    <item>
      <title>Terraform Configuration Language</title>
      <link>https://mullikine.github.io/posts/terraform-configuration-language/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/terraform-configuration-language/</guid>
      <description>Original links https://www.terraform.io/docs/configuration/expressions.html  terraform language 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  //Using Locals(available in terraform 0.10.3 or later) &amp;amp; interpolation  locals {//Put all common tags here  common_tags = &amp;#34;${map( &amp;#34;${oci_identity_tag_namespace.tag_namespace1.name}.${oci_identity_tag.tag1.name}&amp;#34;,&amp;#34;value&amp;#34;, &amp;#34;HumanResources.Environment&amp;#34;, &amp;#34;Production&amp;#34;, &amp;#34;Operations.Project&amp;#34;, &amp;#34;Beta&amp;#34; )}&amp;#34; } resource &amp;#34;oci_core_instance&amp;#34; t { . . . freeform_tags = &amp;#34;${map(&amp;#34;key${count.</description>
    </item>
    
    <item>
      <title>System design primer</title>
      <link>https://mullikine.github.io/posts/system-design-primer/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/system-design-primer/</guid>
      <description>Original source https://github.com/donnemartin/system-design-primer  Terms - geographically federated systems
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  federation [#databases] Several databases hold information, but certain instances are completely responsible for different portions of the data commonly based off characteristics of the data itself.</description>
    </item>
    
    <item>
      <title>Implementing operators from other languages in elisp</title>
      <link>https://mullikine.github.io/posts/implementing-operators-from-other-languages-in-elisp/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/implementing-operators-from-other-languages-in-elisp/</guid>
      <description>Ruby https://en.wikibooks.org/wiki/Ruby%5FProgramming/Syntax/Operators
||= (double pipe) http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html
Useful for initializing with default values.
   op explanation arity precedence association     \vert\vert\eq A \vert\vert\eq B assigns B to A iff A is nil or false Binary 15 Right    1 2 3 4 5 6 7 8  (defmacro ||= (sym value) &amp;#34;Idempotent assignment operator from Ruby&amp;#34; `(progn (if (not (variable-p &amp;#39;,sym)) (setq ,sym ,value)) ,sym)) (provide &amp;#39;my-operators)   &amp;amp;&amp;amp;\eq (double ampersand equals) http://www.</description>
    </item>
    
    <item>
      <title>Review of &#39;Terraform code quality - CloudSkiff&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-terraform-code-quality-cloudskiff/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-terraform-code-quality-cloudskiff/</guid>
      <description>Original article Terraform code quality - CloudSkiff  Terraform code quality starts by the basics with Terraform Validate.
Terraform validate is a subcommand in Terraform that will only address structure and coherence, which means that an obviously bad code like this one will be perfectly right in the eyes of Terraform :
1 2 3 4 5 6 7 8 9 10 11 12 13  provider &amp;#34;aws&amp;#34; { region = &amp;#34;BOGUS&amp;#34; } resource &amp;#34;aws_bogus_resource&amp;#34; &amp;#34;vm&amp;#34; { ami = &amp;#34;BOGUS&amp;#34; instance_type = &amp;#34;BOGUS_TOO&amp;#34; vpc_security_group_ids = [&amp;#34;123456789&amp;#34;] key_name = &amp;#34;BOGUS&amp;#34; tags = { Name = &amp;#34;CNCF London Meetup&amp;#34; } }   1  terraform validate   1  Success!</description>
    </item>
    
    <item>
      <title>Creating linter plugins for emacs with flycheck</title>
      <link>https://mullikine.github.io/posts/creating-linter-plugins-for-emacs/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/creating-linter-plugins-for-emacs/</guid>
      <description>Options :standard-input t This instructs emacs to pipe the buffer into the linter command.
variables These are used in the command definition.
For syntax checkers that can’t read from standard input Flycheck provides the special source and source-inplace argument symbols for the :command property.
These argument symbols create temporary files in the system temp directory or beneath the original file respectively and give pass them to the syntax checker upon invocation.</description>
    </item>
    
    <item>
      <title>GitHub Super-Linter and emacs</title>
      <link>https://mullikine.github.io/posts/github-super-linter-and-emacs/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/github-super-linter-and-emacs/</guid>
      <description>Article https://github.blog/2020-06-18-introducing-github-super-linter-one-linter-to-rule-them-all/ Source Code https://github.com/github/super-linter TLDR I create a plugin for emacs to use GitHub super linter  Use Super linter locally  Instructions https://github.com/github/super-linter/blob/master/docs/run-linter-locally.md  Create a wrapper script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null if test &amp;#34;$#&amp;#34; -eq 0; then set -- .</description>
    </item>
    
    <item>
      <title>Using the terraform linter</title>
      <link>https://mullikine.github.io/posts/using-the-terraform-linter/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-the-terraform-linter/</guid>
      <description>TLDR  Create a wrapper script for tflint Search for terraform files Lint them  The point of this blog post is to demonstrate that this process is very quick.
Wrapper script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null last_arg=&amp;#34;${@: -1}&amp;#34; fp=&amp;#34;$last_arg&amp;#34; if test -f &amp;#34;$fp&amp;#34;; then rp=&amp;#34;$(realpath &amp;#34;$fp&amp;#34;)&amp;#34; bn=&amp;#34;$(basename &amp;#34;$fp&amp;#34;)&amp;#34; dn=&amp;#34;$(dirname &amp;#34;$rp&amp;#34;)&amp;#34; cd &amp;#34;$dn&amp;#34; test &amp;#34;$#&amp;#34; -gt 0 &amp;amp;&amp;amp; set -- &amp;#34;${@:1:$(($#-1))}&amp;#34; # shift last arg set -- &amp;#34;$@&amp;#34; &amp;#34;$bn&amp;#34; fi docker run --rm -v &amp;#34;$(pwd):/$(pwd | slugify)&amp;#34; -w &amp;#34;/$(pwd | slugify)&amp;#34; --entrypoint= wata727/tflint:latest tflint &amp;#34;$@&amp;#34; | strip-ansi   Demonstration</description>
    </item>
    
    <item>
      <title>Common search functions in emacs</title>
      <link>https://mullikine.github.io/posts/common-search-functions-in-emacs/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/common-search-functions-in-emacs/</guid>
      <description>The plan Create bindings to query natural language models for suggestions  Generate relevant natural language queries  guru99 project management 1 2 3 4  (defun my-egr-guru99 (query) (interactive (list (read-string &amp;#34;egr:&amp;#34; &amp;#34;guru99 &amp;#34;))) ;; (sps (concat &amp;#34;eww &amp;#34; (q (car (str2list (sn (concat &amp;#34;gl &amp;#34; (q query)))))))) (eww (car (str2list (sn (concat &amp;#34;gl &amp;#34; (q query)))))))   
github repositories  Search google Download Browse</description>
    </item>
    
    <item>
      <title>Kubernetes tooling</title>
      <link>https://mullikine.github.io/posts/kubernetes-tooling/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/kubernetes-tooling/</guid>
      <description>List https://github.com/ramitsurana/awesome-kubernetes/blob/master/docs/projects/projects.md  kubeval 1 2 3 4 5 6 7 8  kubeval A tool for validating a k8s YAML or JSON configuration file. It does so using schemas generated from the k8s OpenAPI specification, and therefore can validate schemas for multiple versions of k8s.    cdk8s - Define Kubernetes apps and reusable components using familiar programming languages kompose ksonnet-lib kube-libsonnet - Generic library of Kubernetes objects for Jsonnet/Kubecfg with object to array mapping for painless overrides.</description>
    </item>
    
    <item>
      <title>Review of &#39;Introduction - Rust By Example&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-introduction-rust-by-example/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-introduction-rust-by-example/</guid>
      <description>Original article Introduction - Rust By Example  Hello world 1 2 3 4 5 6  fn main() { // Statements here are executed when the compiled binary is called  // Print text to the console  println!(&amp;#34;Hello World!&amp;#34;); }    Hello World! Primitives Rust provides access to a wide variety of primitives. A sample includes:
 Scalar Types  signed integers: i8, i16, i32, i64, i128 and isize (pointer size) unsigned integers: u8, u16, u32, u64, u128 and usize (pointer size) floating point: f32, f64 char Unicode scalar values like &amp;lsquo;a&amp;rsquo;, &amp;lsquo;α&amp;rsquo; and &amp;lsquo;∞&amp;rsquo; (4 bytes each) bool either true or false and the unit type (), whose only possible value is an empty tuple: ()    Despite the value of a unit type being a tuple, it is not considered a compound type because it does not contain multiple values.</description>
    </item>
    
    <item>
      <title>Convert docker-compose to kubernetes</title>
      <link>https://mullikine.github.io/posts/convert-docker-compose-to-kubernetes/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/convert-docker-compose-to-kubernetes/</guid>
      <description>Source code https://github.com/kubernetes/kompose  kompose A tool to help users who are familiar with docker-compose move to k8s.
kompose takes a Docker Compose file and translates it into k8s resources.
kompose is a convenience tool to go from local Docker development to managing your application with k8s.
Transformation of the Docker Compose format to k8s resources manifest may not be exact, but it helps tremendously when first deploying an application on k8s.</description>
    </item>
    
    <item>
      <title>FB Careers Live Singapore</title>
      <link>https://mullikine.github.io/posts/fb-careers-live-singapore/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/fb-careers-live-singapore/</guid>
      <description>FB Live Singapore Enterprise Engineering Helpdesk team  Career mobility. Production engineer. Helpdesk is an internal tool for employees. Helpdesk moved to remote support - work from home.  Work and life balance. What is important
 flexibility  product and development Regulated how to perform work healthy work and life balance  sometimes working in menlo park     culture  collaboration  small teams every team has a mission engineering teams do not know eachother because the company is too large  internal forums to solve this problem     autonomy  when he was a junior, the manager would ask what we should do  mentorship drives the builder mentality     builder mentality moving fast  flexibility to test out different things they think will work can launch to 1% of users and collect data to see how people use it a lot of freedom to say what kind of features you should be building   diversity and uniqueness   something about team that most people dont know APAC vs US  In singapore the office is much smaller.</description>
    </item>
    
    <item>
      <title>Grep on results of grep from emacs</title>
      <link>https://mullikine.github.io/posts/grep-on-results-of-grep-from-emacs/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/grep-on-results-of-grep-from-emacs/</guid>
      <description>1 2 3  (defun grep-ead-on-results (paths query) (interactive (list (selection-or-buffer-string) (read-string &amp;#34;ead:&amp;#34;))) (sps (concat &amp;#34;ead &amp;#34; query) &amp;#34;&amp;#34; (sn &amp;#34;sed -n &amp;#39;/:[0-9]/s/^\\([^:]*\\):.*/\\1/p&amp;#39; | uniqnosort&amp;#34; paths)))   1  (defset grep-mode-funcs (list &amp;#39;grep-ead-on-results))   Testing it out I want to find a docker container wrapper that has both --entrypoint and sets a variable called dn.
This one was found.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #!</description>
    </item>
    
    <item>
      <title>systemd masked units</title>
      <link>https://mullikine.github.io/posts/systemd-masked-units/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/systemd-masked-units/</guid>
      <description>systemd  systemd masked unit  mask is a stronger version of disable.
Using disable all symlinks of the specified unit file are removed.
If using mask the units will be linked to /dev/null.
This will be displayed if you check e.g. by systemctl status halt.service.
The advantage of mask is to prevent any kind of activation, even manual.
Caution systemctl list-unit-files is listing the state of the unit files (static, enabled, disabled, masked, indirect) and has nothing to do with the state of the service.</description>
    </item>
    
    <item>
      <title>Understanding Kubernetes</title>
      <link>https://mullikine.github.io/posts/understanding-kubernetes/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/understanding-kubernetes/</guid>
      <description>Original articles Understanding Kubernetes Objects | Kubernetes https://kubernetes.io/docs/concepts/  Work in progress
Objects 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  object Persistent entities in the k8s system. k8s uses these entities to represent the state of your cluster. They can describe: - What containerized applications are running (and on which nodes) - The resources available to those applications - The policies around how those applications behave, such as restart policies, upgrades, and fault-tolerance A &amp;#34;record of intent&amp;#34; -- once you create the object, the k8s system will constantly work to ensure that object exists.</description>
    </item>
    
    <item>
      <title>French music</title>
      <link>https://mullikine.github.io/posts/french-music/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/french-music/</guid>
      <description>Final playlist  Tino Rossi - J&amp;rsquo;attendrai, 1939 - YouTube Michel Allard - LA SEINE - Guy Lafarge - Flavien Monod - J. Douliez - Continental 16.089-A - 1949 - YouTube Les Bicyclettes de Belsize (w/lyrics) ~ Engelbert Humperdinck - YouTube Joe &amp;ldquo;Fingers&amp;rdquo; Carr - Under Paris Skies / La La Collette - YouTube  </description>
    </item>
    
    <item>
      <title>Review of &#39;Overview of Docker Compose | Docker Documentation&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-overview-of-docker-compose-docker-documentation/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-overview-of-docker-compose-docker-documentation/</guid>
      <description>Original article Overview of Docker Compose | Docker Documentation  Define and run multi-container Docker applications.
Use a YAML file to configure your application&amp;rsquo;s services.
Works in all environments: - production, - staging, - development, - testing, - CI
3 steps: - Define your app&amp;rsquo;s environment with a Dockerfile so it can be reproduced anywhere. - Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.</description>
    </item>
    
    <item>
      <title>Review of &#39;MuniHac 2018: Keynote: Beautiful Template Haskell - YouTube&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-munihac-2018-keynote-beautiful-template-haskell-youtube/</link>
      <pubDate>Mon, 15 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-munihac-2018-keynote-beautiful-template-haskell-youtube/</guid>
      <description>Original article MuniHac 2018: Keynote: Beautiful Template Haskell - YouTube  A brief introduction to typed template Haskell The only way you can make a Code value is by quoting.
The only way you can use a Code value is by splicing.
Why typed template programming is beautiful is that there are types.
Quote and Slice interact in beautifuls to generate programs.
Glossary 1 2 3 4  staging programs Writing programs using template haskell.</description>
    </item>
    
    <item>
      <title>Dired with glimpse and find</title>
      <link>https://mullikine.github.io/posts/dired-with-glimpse-and-find/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/dired-with-glimpse-and-find/</guid>
      <description>Firstly, create the dired-cmd function 1 2 3 4 5  (defun dired-cmd (cmd dirname &amp;amp;optional switches) (interactive (cons (read-string &amp;#34;cmd:&amp;#34;) (dired-read-dir-and-switches &amp;#34;&amp;#34;))) (ignore-errors (kill-buffer dirname)) (let ((insert-directory-program cmd)) (dired dirname switches)))   Create the dired wrapper script This allows you to pipe a list of directories into emacs&#39; dired-mode.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  #!</description>
    </item>
    
    <item>
      <title>Review of &#39;Google AI Blog: PEGASUS: A State-of-the-Art Model for Abstractive Text Summarization&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-google-ai-blog-pegasus-a-state-of-the-art-model-for-abstractive-text-summarization/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-google-ai-blog-pegasus-a-state-of-the-art-model-for-abstractive-text-summarization/</guid>
      <description>Original article Google AI Blog: PEGASUS: A State-of-the-Art Model for Abstractive Text Summarization Source code GitHub - google-research/pegasus text summarization one of the most challenging tasks in natural language processing, involving understanding of long passages, information compression, and language generation.  The dominant paradigm for training ML models to do this is seq2seq learning, where a NN learns to map input sequences to output sequences.
seq2seq models were initially developed using RNN.</description>
    </item>
    
    <item>
      <title>High level strategy for 2020</title>
      <link>https://mullikine.github.io/posts/high-level-strategy-for-2020/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/high-level-strategy-for-2020/</guid>
      <description>The situation My environment would work until the standard medium itself (Ubuntu) changes &amp;ndash; and it will change soon.
Ubuntu is becoming obsolete because the OS you use no longer matters, due to containerisation.
The personal computer is becoming obsolete because everything can now be done in the cloud.
Ways the standard medium of programming could change Container-based functional OS  Condenders:  Kubernetes NixOS    API-based cloud OS  Condenders:  AWS OpenAI API Google Cloud Microsoft (GitHub)    Currency-based Bockchain OS  Contenders:  Ethereum Cardano Nebulas    Tensor-based Deep-Learning OS  Contenders:  TensorFlow NVidia    Ways to prolong the lifespan of my environment Interface Integrate interfaces to the above platforms into my own OS and to each other.</description>
    </item>
    
    <item>
      <title>OpenAI API for NLP</title>
      <link>https://mullikine.github.io/posts/openai-api-for-nlp/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/openai-api-for-nlp/</guid>
      <description>OpenAI API https://beta.openai.com/  Related articles I&amp;rsquo;d like to add some OpenAI support to emacs.
 Emacs Websockets // Bodacious Blog  API  Apply the API to any language task  semantic search, summarization, sentiment analysis, content generation, translation, and more&amp;hellip;    Use only a few examples or by specifying your task in English.
Semantic search 1 2 3 4 5 6  Semantic Search [openai-api] Allows searching over documents based on the natural-language meaning of queries rather than keyword matching.</description>
    </item>
    
    <item>
      <title>Review of &#39;Introduction to GraphQL | GraphQL&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-introduction-to-graphql-graphql/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-introduction-to-graphql-graphql/</guid>
      <description>Original article Introduction to GraphQL | GraphQL Much better introduction article https://www.graphql-tools.com/docs/generate-schema/     GraphQL is
 a query language for your API, and a server-side runtime for executing queries database agnostic    A GraphQL service is created by
 defining types (Query, User) fields on those types, providing functions for each of the fields in each of the types.    example 1  A GraphQL service that tells us  username name     1 2 3 4 5 6 7 8  type Query { me: User } type User { id: ID name: String }   Serverside javascript API interface This example appears to be missing a function for the id of the User type.</description>
    </item>
    
    <item>
      <title>Review of &#39;What to write down when you&#39;re reading to learn - Aceso Under Glass&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-what-to-write-down-when-you-re-reading-to-learn-aceso-under-glass/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-what-to-write-down-when-you-re-reading-to-learn-aceso-under-glass/</guid>
      <description>Original article What to write down when you&amp;rsquo;re reading to learn - Aceso Under Glass Thoughts I will apply this to my red book.  For shallow research:
 Determine/discover what you care about before you start reading. Write down anything relevant to that care.  For deep research:
 Write down anything you find interesting. Write down anything important to the work&amp;rsquo;s key argument. Write down anything that&amp;rsquo;s taking up mental RAM, whether it seems related or interesting or not.</description>
    </item>
    
    <item>
      <title>Emacs Websockets</title>
      <link>https://mullikine.github.io/posts/review-of-emacs-websockets/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-emacs-websockets/</guid>
      <description>Original article Emacs Websockets  https://developer.mozilla.org/en-US/docs/Web/API/WebSockets%5FAPI
websocket echo test https://websocket.org/echo.html
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ;; load the websocket extension (require &amp;#39;websocket) ;; open a new websocket and name it my-websocket (setq my-websocket (websocket-open &amp;#34;wss://echo.websocket.org&amp;#34; ;; provide a function to call when we receive a message from the server :on-message (lambda ( _websocket ; We ignore this frame ; frame data from which we can extract text with websocket-frame-text ) (message &amp;#34;ws frame: %S&amp;#34; (websocket-frame-text frame))) ;; provide a function to call when the websocket is closed :on-close (lambda (_websocket) (message &amp;#34;websocket closed&amp;#34;)))) ;; send &amp;#34;hello from emacs&amp;#34; through the websocket (websocket-send-text my-websocket &amp;#34;hello from emacs&amp;#34;) ;; close the websocket (websocket-close my-websocket)   turn Emacs into a websocket server 1 2 3 4 5 6 7 8 9 10  (setq my-websocket-server (websocket-server 3000 :host &amp;#39;local :on-message (lambda (_websocket frame) (message &amp;#34;received message through websocket&amp;#34;)) :on-open (lambda (_websocket) (message &amp;#34;websocket opened&amp;#34;)) :on-close (lambda (_websocket) (message &amp;#34;websocket closed&amp;#34;))))    we start a websocket server and call it my-websocket-server the server is running on localhost port 3000 when the server receives a message, we print &amp;ldquo;received message through websocket&amp;rdquo; when a client connects to the server, we print &amp;ldquo;websocket opened&amp;rdquo; when a client closes the websocket, we print &amp;ldquo;websocket closed&amp;rdquo;  Now to test this code, we could use the sample from the earlier section, but instead let&amp;rsquo;s use some Javascript code that we will enhance later on.</description>
    </item>
    
    <item>
      <title>Review of &#39;The Future of Mathematics? - YouTube&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-the-future-of-mathematics-youtube/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-the-future-of-mathematics-youtube/</guid>
      <description>Original article The Future of Mathematics? - YouTube Kevin Buzzard&amp;rsquo;s Blog https://xenaproject.wordpress.com/ Source code https://github.com/leanprover/lean Emacs mode https://github.com/leanprover/lean-mode Lean blog (Microsoft Research) http://leanprover.github.io/  Work in progress
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  Lean [#Microsoft research] [programming language] A theorem prover and programming language. It is based on the Calculus of Constructions with inductive types. Lean has a number of features that differentiate it from other interactive theorem provers.</description>
    </item>
    
    <item>
      <title>Stepping through &#39;Haskell by Example&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-haskell-by-example/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-haskell-by-example/</guid>
      <description>Original article Haskell by Example  Hello World 1  main = putStrLn &amp;#34;hello world&amp;#34;   hello world Values 1 2 3 4 5 6 7 8  main = do putStrLn $ &amp;#34;haskell &amp;#34; ++ &amp;#34;lang&amp;#34; putStrLn $ &amp;#34;1+1 = &amp;#34; ++ show (1+1) putStrLn $ &amp;#34;7.0/3.0 = &amp;#34; ++ show (7.0/3.0) print $ True &amp;amp;&amp;amp; False print $ True || False print $ not True   haskell lang 1+1 = 2 7.</description>
    </item>
    
    <item>
      <title>Using Uber&#39;s queryparser. Parsing and analysis of Vertica, Hive, and Presto SQL</title>
      <link>https://mullikine.github.io/posts/using-uber-s-queryparser/</link>
      <pubDate>Thu, 11 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-uber-s-queryparser/</guid>
      <description>Source code https://github.com/uber/queryparser Article Queryparser, an Open Source Tool for Parsing and Analyzing SQL  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  OLAP vs OLTP Two kinds of database-backed operations that you need to do: - OLTP You need to use a database as part of some business process. - OLAP You use a database as part of analysis.</description>
    </item>
    
    <item>
      <title>Review of &#39;[2006.03511] Unsupervised Translation of Programming Languages&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-2006-03511-unsupervised-translation-of-programming-languages/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-2006-03511-unsupervised-translation-of-programming-languages/</guid>
      <description>Original article 2006.03511 Unsupervised Translation of Programming Languages News https://venturebeat.com/2020/06/08/facebooks-transcoder-ai-converts-code-from-one-programming-language-into-another/ Research Lample et al. Researcher Guillaume Lample Facebook AI Research glample@fb.com  Fully unsupervised neural transcompiler  Converts languages obtained from GitHub  BigQuery   unsupervised  it looks for previously undetected patterns in data sets without labels and with a minimal amount of human supervision   outperforms rule-based baselines by a “significant” margin.  Model of TransCoder   seq2seq with attention</description>
    </item>
    
    <item>
      <title>Rewrite of &#39;Understanding Transformers in NLP: State-of-the-Art Models&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-understanding-transformers-in-nlp-state-of-the-art-models/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-understanding-transformers-in-nlp-state-of-the-art-models/</guid>
      <description>Original article Understanding Transformers in NLP: State-of-the-Art Models  Table of Contents  Sequence-to-Sequence Models &amp;ndash; A Backdrop  RNN based Sequence-to-Sequence Model Challenges   Introduction to the Transformer in NLP  Understanding the Model Architecture Grokking Self-Attention Calculation of Self-Attention Limitations of the Transformer   Understanding Transformer-XL  Using Transformer for Language Modeling Using Transformer-XL for Language Modeling   The New Sensation in NLP: Google&amp;rsquo;s BERT  Model Architecture BERT Pre-Training Tasks    Sequence-to-Sequence Models &amp;ndash; A Backdrop seq2seq models in NLP are used to convert sequences of Type A to sequences of Type B.</description>
    </item>
    
    <item>
      <title>Scripting Haskell and creating projects with Stack</title>
      <link>https://mullikine.github.io/posts/scripting-haskell-and-creating-projects-with-stack/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/scripting-haskell-and-creating-projects-with-stack/</guid>
      <description>How to script with stack How to Script with Stack How to create a stack project How to Build with Stack Write bitrot free code with Haskell Practical Haskell: Bitrot-free Scripts  Upgrading haskell 1 2 3 4 5 6 7 8 9  #!/bin/bash export TTY . $HOME/scripts/libraries/bash-library.sh export PATH=&amp;#34;$HOME/.local/bin:$(remove_from_path $SCRIPTS)&amp;#34; cabal install Cabal cabal-install cabal update sudo stack upgrade   Developing cabal packages https://cabal.readthedocs.io/en/latest/developing-packages.html
 Given a directory of haskell (.</description>
    </item>
    
    <item>
      <title>Babel pipeline</title>
      <link>https://mullikine.github.io/posts/babel-pipeline/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/babel-pipeline/</guid>
      <description>Work in progress
Rapidly create scripts from emacs that use multiple programming languages.
rash  1 2 3 4  cd / echo This is the root directory ls | head -n 5 ls -ld * | wc -l  
This is the root directory bin boot boot-sav cdrom chroot 38  1 2  This is my standard input  
 1 2 3 4 5 6 7  cat echo _________ echo cd / echo This is the root directory ls | head -n 5 ls -ld * | wc -l</description>
    </item>
    
    <item>
      <title>haskell</title>
      <link>https://mullikine.github.io/posts/haskell/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell/</guid>
      <description>1  :t interact   interact :: (String -&amp;gt; String) -&amp;gt; IO () This is treated as part of the program 1  words &amp;#34;foo bar baz&amp;#34;   [&amp;#34;foo&amp;#34;,&amp;#34;bar&amp;#34;,&amp;#34;baz&amp;#34;] Convert strings to numbers You must also specify the type.
1  (read &amp;#34;5&amp;#34;) :: Int   5 Use map It applies a function to a list and results in a new list.
1  :t map   map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b] The result should be list of integer 1  (map read $ words &amp;#34;1 2&amp;#34;) :: [Int]   [1,2] Without specifying the result, read will not work.</description>
    </item>
    
    <item>
      <title>racket</title>
      <link>https://mullikine.github.io/posts/racket/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/racket/</guid>
      <description>Work in progress
1  (build-path (find-system-path &amp;#39;home-dir) &amp;#34;**&amp;#34; &amp;#34;*.rkt&amp;#34;)   #&amp;lt;path:/home/shane/**/*.rkt&amp;gt; Some functions  symbol-&amp;gt;string path-&amp;gt;string     1 2 3 4 5 6 7 8  (require file/glob) (display (string-join (take (map path-&amp;gt;string (glob (build-path (find-system-path &amp;#39;home-dir) &amp;#34;notes/**&amp;#34; &amp;#34;*.rkt&amp;#34;))) 5) &amp;#34;\n&amp;#34;))   /home/shane/notes/ws/codelingo/racket/c-code-generator.rkt /home/shane/notes/ws/codelingo/read-yaml.rkt /home/shane/notes/ws/dcbc-school-of-computer-science/db.rkt /home/shane/notes/ws/dcbc-school-of-computer-science/presentation.rkt /home/shane/notes/ws/learn/racket/functional.rkt1  find $NOTES -type f | glob-grep &amp;#34;*.rkt&amp;#34; | head -n 10   /home/shane/notes/test.rkt /home/shane/notes/test-format.rkt /home/shane/notes/ws/racket/scratch.rkt /home/shane/notes/ws/racket/scratch/scratch.</description>
    </item>
    
    <item>
      <title>Create binding to add arguments to org babel block</title>
      <link>https://mullikine.github.io/posts/create-binding-to-add-arguments-to-org-babel-block/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/create-binding-to-add-arguments-to-org-babel-block/</guid>
      <description>Make a keybinding that adds CLI arguments 1 2 3 4 5 6 7 8 9 10  (defun org-babel-change-block-type () (interactive) (if (or (org-in-src-block-p) (org-in-block-p &amp;#39;(&amp;#34;src&amp;#34; &amp;#34;example&amp;#34; &amp;#34;verbatim&amp;#34; &amp;#34;clocktable&amp;#34;))) (progn (call-interactively &amp;#39;org-babel-raise) (call-interactively &amp;#39;hydra-org-template/body)) (self-insert-command 1))) (define-key org-mode-map (kbd &amp;#34;M-.&amp;#34;) &amp;#39;org-babel-change-block-type)   1  (org-babel-insert-header-arg &amp;#34;args&amp;#34; (read &amp;#34;arguments:&amp;#34;))   1 2 3 4 5 6  (defun org-babel-add-src-args () (interactive) (if (org-in-src-block-p) (org-babel-insert-header-arg &amp;#34;args&amp;#34; (read-string &amp;#34;arguments:&amp;#34;)))) (define-key org-mode-map (kbd &amp;#34;M-@&amp;#34;) &amp;#39;org-babel-add-src-args)</description>
    </item>
    
    <item>
      <title>Facebook Enterprise Platform Engineer interview prep</title>
      <link>https://mullikine.github.io/posts/facebook-enterprise-platform-engineer-interview-prep/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/facebook-enterprise-platform-engineer-interview-prep/</guid>
      <description>Read and Watch from  https://engineering.fb.com/category/production-engineering/  TODO SSP Description Create some diagrams.
Behaviour what&amp;rsquo;s your motivation how do i handle conflict review myself and my CV 45 min each
Email Primer $MYGIT/donnemartin/system-design-primer
You’ll be interviewed for 45 minutes on each of 5 focal areas:  Coding  You will be asked technical questions which require code or algorithms, so be prepared to show your work and be as concise and efficient as possible with your answers.</description>
    </item>
    
    <item>
      <title>Separate revert command for org blocks</title>
      <link>https://mullikine.github.io/posts/separate-revert-command-for-org-blocks/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/separate-revert-command-for-org-blocks/</guid>
      <description>Background    kb f     M-l M-e my-revert    my-revert command 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  (defun my-revert (arg) (interactive &amp;#34;P&amp;#34;) (let ((l (line-number-at-pos)) (c (current-column))) ;; Excursion doesn&amp;#39;t work for compressed files ;; Therefore we also use goto-line ;; (save-excursion) ;; I can query this to see if it&amp;#39;s a compressed file ;; jka-compr-really-do-compress ;; I&amp;#39;mquite happy with goto-line and move-to-column instead of save-excursion (if arg (progn (force-revert-buffer) (message &amp;#34;%s&amp;#34; &amp;#34;Reverted from disk&amp;#34;)) (progn (try (progn (if (string-match-p &amp;#34;\\*Org .</description>
    </item>
    
    <item>
      <title>Add stdin to babel src blocks. Pipe one block into the next</title>
      <link>https://mullikine.github.io/posts/add-stdin-to-babel-src-blocks-pipe-one-block-into-the-next/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/add-stdin-to-babel-src-blocks-pipe-one-block-into-the-next/</guid>
      <description>The plan:  Do some research into existing emacs lisp code  Figure out how to get the contents of a named block and use it as the stdin to a babel block.   Extend babel so that I can chain scripts of multiple languages together in babel  Here are some named blocks I&amp;rsquo;ll use for testing 1  (org-babel-goto-named-src-block &amp;#34;mycode&amp;#34;)   1 2  (org-babel-goto-named-result) (org-babel-goto-named-src-block)    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  (defun org-copy-thing-here () (interactive) (if (or (org-in-src-block-p) (org-in-block-p &amp;#39;(&amp;#34;src&amp;#34; &amp;#34;example&amp;#34; &amp;#34;verbatim&amp;#34; &amp;#34;clocktable&amp;#34;))) (org-copy-src-block) (self-insert-command 1))) (defun org-copy-src-block () (interactive) (shut-up (my-copy org-get-src-block-here))) (defun org-get-src-block-here () (interactive) (org-edit-src-code) (mark-whole-buffer) (let ((contents (sh/chomp (selection)))) ;; (easy-kill 1) (org-edit-src-abort) contents))</description>
    </item>
    
    <item>
      <title>Easily create term-mode wrappers for arbitrary TUI programs</title>
      <link>https://mullikine.github.io/posts/easily-create-term-mode-wrappers-for-arbitrary-tui-programs/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/easily-create-term-mode-wrappers-for-arbitrary-tui-programs/</guid>
      <description>First, create some emacs lisp functions  Create the interactive command make-or-run-etui-cmd which will be run from the terminal Create make-etui-cmd which will create an interactive emacs-lisp command for invoking the program Create defcmdmode which will create a minor mode for the command, allowing me to attach key bindings Create emacs-tui-run script which starts emacs and invokes make-or-run-etui-cmd Create make-etui-wrapper script which allows me to interactively create emacs wrapper scripts for TUI programs   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  (defun make-or-run-etui-cmd (cmd &amp;amp;rest args) (interactive (list (read-string &amp;#34;Command name:&amp;#34;))) (let* ((funname (concat &amp;#34;esh-&amp;#34; cmd)) ;; (fnsym (str2sym funname)) (fnsym ;; Force overwrite (make-etui-cmd cmd t) ;; (if (my/function-exists fnsym) ;; fnsym ;; (make-etui-cmd cmd)) )) (defcmdmode cmd) (eval `(,fnsym ,@args)))) (defun make-etui-cmd (cmd closeframe) &amp;#34;This function expects a one term command (binary name only) and it returns a new interactive function.</description>
    </item>
    
    <item>
      <title>hackerrank racket</title>
      <link>https://mullikine.github.io/posts/hackerrank-racket/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/hackerrank-racket/</guid>
      <description>Original code https://github.com/atharvashukla/racket-hackerrank-solutions  I will make an attempt to chain together all of the hackerrank puzzles using racket, bash and babel.
 1 2  10 5  
 1 2 3 4 5 6  (define (sum-of-two-integers a b) (+ a b)) (let ([a (read)] [b (read)]) (printf &amp;#34;~a~%&amp;#34; (sum-of-two-integers a b)))  
15 1 2 3 4 5 6 7  (define (hello-world-n n) (cond [(= 0 n) (display &amp;#34;&amp;#34;)] [else (displayln &amp;#34;Hello World&amp;#34;) (hello-world-n (- n 1))])) (let ([n (read)]) (hello-world-n n))</description>
    </item>
    
    <item>
      <title>Programmatically query term-mode</title>
      <link>https://mullikine.github.io/posts/programmatically-query-term-mode/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/programmatically-query-term-mode/</guid>
      <description>I will create a means of querying the current term buffer.
Then I will use it to add a key binding for my nano mode for taking the current URL from the current line of nano.
Creating a new buffer with the contents of the current buffer 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  (defun term-get-line-at-point () (interactive) (let* ((row (+ (term-current-row) 1)) (col (term-current-column)) (buf (new-buffer-from-string (buffer-contents))) (height term-height) (linecontents (with-current-buffer buf (let ((nbackhistory (- (count-lines (point-min) (point-max)) height))) ;; term-height (goto-line (+ row nbackhistory)) (move-to-column col t) (thing-at-point &amp;#39;line))))) (kill-buffer buf) (my/copy (chomp linecontents) t) linecontents))   Can I do this with the existing term-mode buffer?</description>
    </item>
    
    <item>
      <title>Racket ports</title>
      <link>https://mullikine.github.io/posts/racket-ports/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/racket-ports/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  Ports ewwlinks +/&amp;#34;13.1 Ports&amp;#34; &amp;#34;https://docs.racket-lang.org/reference/ports.html&amp;#34; Ports produce and/or consume bytes. An input port produces bytes, while an output port consumes bytes (and some ports are both input ports and output ports). When an input port is provided to a character-based operation, the bytes are decoded to a character, and character- based output operations similarly encode the character to bytes; see Encodings and Locales.</description>
    </item>
    
    <item>
      <title>State Synchronization Protocol</title>
      <link>https://mullikine.github.io/posts/state-synchronization-protocol/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/state-synchronization-protocol/</guid>
      <description>Original article Mosh - YouTube Paper https://mosh.org/mosh-paper.pdf  SSP protocol State Synchronization Protocol:
A new secure object synchronization protocol on top of UDP to synchronize abstract state objects in the presence of roaming, intermittent connectivity, and marginal networks.</description>
    </item>
    
    <item>
      <title>Summary of &#39;CSC324: Welcome to CSC324!&#39;</title>
      <link>https://mullikine.github.io/posts/summary-of-csc324-welcome-to-csc324/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/summary-of-csc324-welcome-to-csc324/</guid>
      <description>Original article CSC324: Welcome to CSC324! Original notes https://www.cs.toronto.edu/~david/csc324/csc324%5Fnotes.pdf   1 2 3 4 5 6 7 8 9 10 11  model of computation [#computability theory] [#computational complexity theory] A model which describes how an output of a mathematical function is computed given an input. A model describes how units of computations, memories, and communications are organized.   Arithmetic expressions Haskell data structures are able to easily and directly represent BNF-style grammars (Google Books).</description>
    </item>
    
    <item>
      <title>systemd service mode based on chkservice</title>
      <link>https://mullikine.github.io/posts/systemd-service-mode-with-chkservice/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/systemd-service-mode-with-chkservice/</guid>
      <description>Code for creating a chkservice mode and assigning a keybinding to it 1 2 3 4 5 6 7 8 9  (defun make-etui-cmd (cmd) &amp;#34;This function expects a one term command (binary name only) and it returns a new interactive function.&amp;#34; (let ((funname (concat &amp;#34;esh-&amp;#34; cmd))) (eval `(defun ,(str2sym funname) (&amp;amp;rest args) &amp;#34;This function expects a one term command (binary name only).&amp;#34; (interactive) (term-nsfa (mapconcat &amp;#39;q (cons ,cmd args) &amp;#34; &amp;#34;) nil ,cmd))))) (define-key my-mode-map (kbd &amp;#34;M-m a y&amp;#34;) (make-etui-cmd &amp;#34;chkservice&amp;#34;))   Also create an external script chkservice wrapper script for starting chkservice with enough privileges 1 2 3 4 5 6 7 8 9 10 11 12  #!</description>
    </item>
    
    <item>
      <title>k3sup, bootstrap a lightweight k8s</title>
      <link>https://mullikine.github.io/posts/k3sup-bootstrap-a-lightweight-k8s/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/k3sup-bootstrap-a-lightweight-k8s/</guid>
      <description>Source material Rancher Docs: Quick-Start Guide GitHub - alexellis/k3sup: bootstrap Kubernetes with k3s over SSH &amp;lt; 1 min  k3s is great for CI Perhaps it will make its way into Gitlab CI. Surely, a k8s of some implementation will.
Set up k3s &amp;ndash; lightweight kubernetes This is a dependency.
1 2 3  curl -sfL https://get.k3s.io | sh - # Check for Ready node, takes maybe 30 seconds k3s kubectl get node   https://k3s.</description>
    </item>
    
    <item>
      <title>data-structures in haskell</title>
      <link>https://mullikine.github.io/posts/data-structures-in-haskell/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/data-structures-in-haskell/</guid>
      <description>Original article Trees in Haskell | Dimitrios Kalemis  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  tree An undirected graph in which any two vertices are connected by exactly one path, or equivalently a connected acyclic undirected graph. forest An undirected graph in which any two vertices are connected by at most one path, or equivalently an acyclic undirected graph, or equivalently a disjoint union of trees.</description>
    </item>
    
    <item>
      <title>Review of &#39;Overview of python dependency management tools | model.predict&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-overview-of-python-dependency-management-tools-model-predict/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-overview-of-python-dependency-management-tools-model-predict/</guid>
      <description>Original article Overview of python dependency management tools | model.predict       Installing python packages Installing non-python packages Managing python versions Managing virtual environments Environment reproducibility     pip ✓ ✖*         venv       ✓     pyenv     ✓       conda ✓ ✓ ✓* ✓     pipenv (+pyenv) ✓ ✓   ✓ ✓   poetry (+pyenv) ✓ ✓   ✓ ✓   Docker * * * * ✓    Docker There&amp;rsquo;s no need for any virtual environment management since apps are isolated by design.</description>
    </item>
    
    <item>
      <title>Revision of time and space complexity</title>
      <link>https://mullikine.github.io/posts/time-space-complexity/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/time-space-complexity/</guid>
      <description>Original articles How to analyze time complexity: Count your steps YourBasic Big O notation: definition and examples YourBasic O(n) Complexity. This notation can be used for both space and time T(n) Time complexity S(n) Space complexity O(log n) memory space  = W(n) :: Worst-case/slowest/most-inefficient complexity bound
 Θ(n) Upper + lower bound complexity Ω(n) Fastest/most efficient complexity bound  ∊ T(n) ∊ O(f(n)) means that T(n) doesn&amp;rsquo;t grow faster than f(n).</description>
    </item>
    
    <item>
      <title>An exposition of racket languages</title>
      <link>https://mullikine.github.io/posts/an-exposition-of-racket-languages/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/an-exposition-of-racket-languages/</guid>
      <description>Firstly, add to emacs a way of selecting the racket language  Languages to add:  racket rackjure hackett sicp rash    Emacs lisp code 1  (&amp;#34;L&amp;#34; (hot-expand &amp;#34;&amp;lt;s&amp;#34; &amp;#34;racket-sublang&amp;#34;) &amp;#34;racket&amp;#34;)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  (defun hot-expand (str &amp;amp;optional mod header) &amp;#34;Expand org template. STR is a structure template string recognised by org like &amp;lt;s.</description>
    </item>
    
    <item>
      <title>NixOS vs Docker</title>
      <link>https://mullikine.github.io/posts/nixos-vs-docker/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/nixos-vs-docker/</guid>
      <description>Docker &amp;gt; NixOS but it&amp;rsquo;s in its infancy https://hands-on.cloud/why-you-should-never-ever-use-nixos/
I actually agree with this article.
  I need a functional package manager based on docker or other containerisation software.
  I want access to the registry metadata so I can:
 Use NLP parsers on descriptions. Connect requirements directly to the provisioning pipeline.    </description>
    </item>
    
    <item>
      <title>Review of &#39;GPT-3: Language Models are Few-Shot Learners (Paper Explained) - YouTube&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-gpt-3-language-models-are-few-shot-learners-paper-explained-youtube/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-gpt-3-language-models-are-few-shot-learners-paper-explained-youtube/</guid>
      <description>Work in progress
 Original video GPT-3: Language Models are Few-Shot Learners (Paper Explained) - YouTube  Demonstration of me reading this video and taking notes 
GPT-3 GPT 3 has 175 billion parameters which this is absolutely crazy is an order of magnitude higher than anything that ever existed.
GPT-2 parameters by comparison This is what people are talking about when they say parameters.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  Parameters Single Transformer block Conv1d attn/c_attn w 768 2304 1769472 b 2304 2304 attn/c_proj w 768 768 589824 b 768 768 mlp/c_fc w 768 3072 2359296 b 768 768 mlp/c_proj w 3072 3072 2359296 b 768 768 Norm ln_1 g 768 768 b 768 768 ln_2 g 768 768 b 768 768 total 7085568 per block X 12 blocks 85026816 In all blocks Embeddings 50257 768 38597376 Positional Embeddings 2024 768 786432 Grand Total 124410624   What you can do with giant LMs?</description>
    </item>
    
    <item>
      <title>Review of &#39;Tools for better thinking | Untools&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-tools-for-better-thinking-untools/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-tools-for-better-thinking-untools/</guid>
      <description>Original article Tools for better thinking | Untools  Issue trees - Problem solving https://untools.co/issue-trees
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  Issue trees Basically maps of problems. They give you a clear and systematic way of looking at the problem you need to solve. They help you break down a big problem into smaller, more manageable ones, and prioritize certain parts of the problem.</description>
    </item>
    
    <item>
      <title>Review of &#39;ESA - Swarm probes weakening of Earths magnetic field&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-esa-swarm-probes-weakening-of-earths-magnetic-field/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-esa-swarm-probes-weakening-of-earths-magnetic-field/</guid>
      <description>Original article https://www.esa.int/Applications/Observing%5Fthe%5FEarth/Swarm/Swarm%5Fprobes%5Fweakening%5Fof%5FEarth%5Fs%5Fmagnetic%5Ffield  Work in progress</description>
    </item>
    
    <item>
      <title>Review of &#39;Khanlou | Regexes vs Combinatorial Parsing&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-khanlou-regexes-vs-combinatorial-parsing/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-khanlou-regexes-vs-combinatorial-parsing/</guid>
      <description>Original article Khanlou | Regexes vs Combinatorial Parsing  Work in progress
1 2  inscrutable Impossible to understand or interpret.    Regex  inscrutable not composable requires type interpretation    There&amp;rsquo;s actually not a lot in the original blog post.</description>
    </item>
    
    <item>
      <title>Rocket Lab</title>
      <link>https://mullikine.github.io/posts/rocket-lab/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/rocket-lab/</guid>
      <description>Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108  Attitude Determination and Control Subsystem ADCS https://www.</description>
    </item>
    
    <item>
      <title>SpaceX Crew Dragon launch</title>
      <link>https://mullikine.github.io/posts/spacex-crew-dragon-launch/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/spacex-crew-dragon-launch/</guid>
      <description>Reading + SpaceX Crew Dragon launch: what to expect from the companys first human mission to space - The Verge   1  egr spacex launch details      Spacecraft model Mission Purpose Priority     Crew Dragon Demo-2 Lay the groundwork for future manned flights into space. Get Robert Behnken and Douglas Hurley to the ISS    Mission timeline Crew Dragon Mission Timeline - Parabolic Arc</description>
    </item>
    
    <item>
      <title>Test estimation</title>
      <link>https://mullikine.github.io/posts/test-estimation/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/test-estimation/</guid>
      <description>Links Software Test Estimation Techniques: Step By Step Guide  Firstly summarise this article 1 2 3 4 5 6  * Resources: Resources are required to carry out any project tasks. They can be people, equipment, facilities, funding, or anything else capable of definition required for the completion of a project activity. * Times : Time is the most valuable resource in a project. Every project has a deadline to delivery.</description>
    </item>
    
    <item>
      <title>Facebook initial interview prep</title>
      <link>https://mullikine.github.io/posts/facebook-interview-prep/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/facebook-interview-prep/</guid>
      <description>Interviews Coding Design Systems design Product design Behavioural Focus  5 core values   Be bold. Building great things means taking risks. We have a saying: “The riskiest thing is to take no risks.” In a world that’s changing so quickly, you’re guaranteed to fail if you don’t take any risks. We encourage everyone to make bold decisions, even if that means being wrong some of the time.
  Focus on impact.</description>
    </item>
    
    <item>
      <title>hcl2json</title>
      <link>https://mullikine.github.io/posts/hcl2json/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/hcl2json/</guid>
      <description>Install hcltoo 1  docker pull mycujoo/hcltool   hcl2json (wrapper for hcltool) This tool converts hcl files into a json representation
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null # Example # hcltool $HOME/.</description>
    </item>
    
    <item>
      <title>Kubernetes and Helm 2, 3</title>
      <link>https://mullikine.github.io/posts/kubernetes-helm/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/kubernetes-helm/</guid>
      <description>glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14  service mesh A dedicated infrastructure layer for facilitating service-to-service communications between microservices, often using a sidecar proxy. tiller [#helm2] DEPRECATED Tiller is the service that actually communicates with the Kubernetes API to manage our Helm packages.   Migrating from helm 2 to helm 3 Helm 3 Deep Dive - Taylor Thomas, Microsoft Azure &amp;amp; Martin Hickey, IBM - YouTube</description>
    </item>
    
    <item>
      <title>Performance optimisation in PHP</title>
      <link>https://mullikine.github.io/posts/performance-optimisation-in-php/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/performance-optimisation-in-php/</guid>
      <description>Original video https://www.linkedin.com/learning/php-performance-optimization/welcome Related articles Ansible // Bodacious Blog  Xdebug - An extension for PHP to assist with debugging and development Stack traces  Reference https://xdebug.org/docs/stack%5Ftrace  The stack traces that Xdebug shows on error situations (if display_errors is set to On in php.ini) are quite conservative in the amount of information that they show.
/etc/hhvm/php.ini
1 2 3 4 5 6 7  ; php options ; hhvm specific hhvm.</description>
    </item>
    
    <item>
      <title>Review of &#39;Highly available Kubernetes with batteries for small business - CINAQ&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-highly-available-kubernetes-with-batteries-for-small-business-cinaq/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-highly-available-kubernetes-with-batteries-for-small-business-cinaq/</guid>
      <description>Original article Highly available Kubernetes with batteries for small business - CINAQ  Plan  Build this:  Highly available (where possible) Ingress with LetsEncrypt NFS central storage Cluster that scales Monitoring with Prometheus, Grafana and Loki    Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  ingress https://kubernetes.</description>
    </item>
    
    <item>
      <title>Review of &#39;The basics of Helm  BrandonBarnett.io  Talking about the nuances of technology.&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-the-basics-of-helm-brandonbarnett-io-talking-about-the-nuances-of-technology/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-the-basics-of-helm-brandonbarnett-io-talking-about-the-nuances-of-technology/</guid>
      <description>Original article The basics of Helm BrandonBarnett.io Talking about the nuances of technology.  Glossary 1 2 3 4 5 6 7 8 9 10 11 12  Helm chart Helm uses a packaging format called charts. A chart is a collection of files that describe a related set of k8s resources. A single chart might be used to deploy something simple, like a memcached pod, or something complex, like a full web app stack with HTTP servers, databases, caches, and so on.</description>
    </item>
    
    <item>
      <title>Studying</title>
      <link>https://mullikine.github.io/posts/studying/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/studying/</guid>
      <description>A recording of me doing some study and writing some blogs</description>
    </item>
    
    <item>
      <title>Terraform</title>
      <link>https://mullikine.github.io/posts/terraform/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/terraform/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  Execution Plan Terraform has a &amp;#34;planning&amp;#34; step where it generates an execution plan. The execution plan shows what Terraform will do when you call apply.</description>
    </item>
    
    <item>
      <title>Technologies Facebook is using</title>
      <link>https://mullikine.github.io/posts/technologies-facebook-is-using/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/technologies-facebook-is-using/</guid>
      <description>From Facebook https://opensource.facebook.com/
Hydra  Links https://github.com/facebookresearch/hydra https://hydra.cc/  Powered by Omegaconf.
1 2 3 4 5 6  Hydra [framework] Elegantly configure complex applications. https://hydra.cc   Basic example
 Configuration file config.yaml   1 2 3 4  db: driver: mysql user: omry pass: secret    Python file my_app.py   1 2 3 4 5 6 7 8 9  import hydra from omegaconf import DictConfig @hydra.</description>
    </item>
    
    <item>
      <title>Digest of &#39;Self Supervised Representation Learning in NLP&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-self-supervised-representation-learning-in-nlp/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-self-supervised-representation-learning-in-nlp/</guid>
      <description>Original article Self Supervised Representation Learning in NLP   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70  Self-Supervised Learning Autonomous supervised learning.</description>
    </item>
    
    <item>
      <title>OS-agnostic program installation with Ansible</title>
      <link>https://mullikine.github.io/posts/os-agnostic-program-installation-with-ansible/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/os-agnostic-program-installation-with-ansible/</guid>
      <description>Ansible setup https://github.com/ansible/ansible Original guide How to install apps remotely with Ansible - TechRepublic Related articles Ansible // Bodacious Blog   1 2 3 4  sudo apt update sudo apt install software-properties-common sudo apt-add-repository --yes --update ppa:ansible/ansible sudo apt install ansible   Set up ssh Get the IP of the instance 1 2  aws ec2 describe-instances --output json | jq -r &amp;#39;.Reservations[].Instances[].NetworkInterfaces[].Association.PublicIp&amp;#39;   54.206.107.77 Set the Host options 1 2 3 4  Host littlefella Hostname 54.</description>
    </item>
    
    <item>
      <title>Review of &#39;Ansible and Terraform: Better Together&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-ansible-and-terraform-better-together/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-ansible-and-terraform-better-together/</guid>
      <description>Original article Ansible and Terraform: Better Together  Why do you need more than Ansible? Ansible doesn&amp;rsquo;t necessarily have to own and do every single task that it sets out to do; Like an instrument in an orchestra, others may be better positioned for particular tasks.
Ansible Vault vs Terraform Vault I would assume, since Terraform is a Hashicorp product, then the recommended secret solution would their Vault.
1  ewwlinks +/&amp;#34;The Vault provider allows Terraform to read from, write to, and configure Hashicorp Vault.</description>
    </item>
    
    <item>
      <title>Using Facebook&#39;s Duckling parser</title>
      <link>https://mullikine.github.io/posts/using-facebook-s-duckling-parser/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-facebook-s-duckling-parser/</guid>
      <description>Demonstration 
Obtain the docker image 1  docker pull rasa/duckling   Create duckling-parse script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #!/bin/bash export TTY input=&amp;#34;$(urlencode)&amp;#34; set -m ( unbuffer docker \  run \  --name duckling-container \  --rm \  --network=host \  --entrypoint= \  rasa/duckling:latest \  duckling-example-exe -p 8000 --no-access-log --no-error-log ) &amp;amp;&amp;gt;/dev/null &amp;amp; sleep 2 /usr/bin/curl -XPOST http://0.</description>
    </item>
    
    <item>
      <title>Using GitHub&#39;s Semantic parser</title>
      <link>https://mullikine.github.io/posts/using-github-semantic-parser/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-github-semantic-parser/</guid>
      <description>Links https://github.com/github/semantic#usage Related articles Overview of the semantic parser // Bodacious Blog  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  github semantic =semantic= is a Haskell library and command line tool for parsing, analyzing, and comparing source code. - Reads blobs. - Generates parse trees for those blobs with tree-sitter. - Assigns those trees into a generalized representation of syntax.</description>
    </item>
    
    <item>
      <title>Testing CLI and TUI programs</title>
      <link>https://mullikine.github.io/posts/testing-cli-and-tui-programs/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/testing-cli-and-tui-programs/</guid>
      <description>cmdtest https://liw.fi/cmdtest/
Black box tests Unix command line tools. Roughly, it is given a a script, its input files, and its expected output files. cmdtest runs the script, and checks the output is as expected.
1  apt show cmdtest   Package: cmdtest Version: 0.22-1 Priority: optional Section: universe/python Origin: Ubuntu Maintainer: Ubuntu Developers &amp;lt;ubuntu-devel-discuss@lists.ubuntu.com&amp;gt; Original-Maintainer: Lars Wirzenius &amp;lt;liw@liw.fi&amp;gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 78.8 kB Depends: python (&amp;gt;= 2.7), python (&amp;lt;&amp;lt; 2.</description>
    </item>
    
    <item>
      <title>HashiCorp: Terraform, Vault, Vagrant, Packer</title>
      <link>https://mullikine.github.io/posts/hashicorp/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/hashicorp/</guid>
      <description>Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  packer [hashicorp product] https://www.packer.io/ https://github.com/hashicorp/packer A tool for creating identical machine images for multiple platforms from a single source configuration. Automates the creation of any type of machine image. It embraces modern configuration management by encouraging you to use automated scripts to install and configure the software within your Packer-made images.</description>
    </item>
    
    <item>
      <title>Packaging</title>
      <link>https://mullikine.github.io/posts/packaging/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/packaging/</guid>
      <description>The purpose of packaging You can have a few people who have a lot of knowledge and they can share it so many many people who don&amp;rsquo;t have that knowledge can go use something and that&amp;rsquo;s where package managers are really powerful.
 Reference An Introduction to Helm - Matt Farina, Samsung SDS &amp;amp; Josh Dolitsky, Blood Orange - YouTube  Snapcraft (snap) https://snapcraft.io/docs/snapcraft-yaml-reference
Pros of debs over snaps:  Smaller packages (debs don&amp;rsquo;t need to bundle their dependencies).</description>
    </item>
    
    <item>
      <title>Provisioning with IaC</title>
      <link>https://mullikine.github.io/posts/provisioning/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/provisioning/</guid>
      <description>Related articles HashiCorp: Terraform, Vault, Vagrant, Packer // Bodacious Blog  Gut Feeling  Lean towards Hashicorp products.  Infrastructure as Code (IaC)  Terraform Ansible  Terraform 1 2 3 4 5 6 7  Terraform [hashicorp product] Infrastructure as Code. Provision and manage any cloud, infrastructure, or service.    create AMI using hashicorp packer provision using hashicorp terraform  Ansible   Create AMI using hashicorp packer</description>
    </item>
    
    <item>
      <title>Review of &#39;grex - Rust&#39; - generate regex from test cases</title>
      <link>https://mullikine.github.io/posts/review-of-grex-rust/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-grex-rust/</guid>
      <description>Original article grex - Rust Code GitHub - pemistahl/grex: A command-line tool and library for generating regular expressions from user-provided test cases  Demonstration Fully automated 
Semi automated 
1 2 3  Thomas Bergersen - Avalanche (Female Vocals) - YouTube Thomas Bergersen - Our Destiny (Sun) - YouTube Thomas Bergersen - So Small - YouTube   1  ^Thomas Bergersen \- (?:Avalanche \(Female Vocals\)|(?:Our Destiny \(Sun\)|So Small)) \- YouTube$   emacs has a built-in which is far less powerful 1  (regexp-opt &amp;#39;(&amp;#34;alex&amp;#34; &amp;#34;albert&amp;#34; &amp;#34;alois&amp;#34; &amp;#34;bummer&amp;#34;))   &amp;#34;\&amp;#34;\\\\(?</description>
    </item>
    
    <item>
      <title>Deployment with IaC and Octopus</title>
      <link>https://mullikine.github.io/posts/deployment/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/deployment/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  OTA deployment over-the-air deployment Over-the-Air programming OTA Refers to various methods of distributing new software, configuration settings, and even updating encryption keys to devices like mobile phones, set-top boxes or secure voice communication equipment (encrypted 2-way radios). codeship A fast and secure hosted CI service that scales with your needs. It supports GitHub, Bitbucket, and Gitlab projects.</description>
    </item>
    
    <item>
      <title>Review of &#39;Steve Jobs and Bill Gates Face Off - YouTube&#39; - Content delivery, AR</title>
      <link>https://mullikine.github.io/posts/review-of-steve-jobs-and-bill-gates-face-off-youtube/</link>
      <pubDate>Sat, 23 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-steve-jobs-and-bill-gates-face-off-youtube/</guid>
      <description>Original article Steve Jobs and Bill Gates Face Off - YouTube  Content delivery Steve Jobs In some cases you know we have to do more work than others you know in the case of iTunes.
There wasn&amp;rsquo;t a music delivery service that was any good so we had to do one.
But in other cases there&amp;rsquo;s companies doing a way better job because we&amp;rsquo;re not as good at this stuff as other people are and we&amp;rsquo;d love to partner with them and we selectively do that.</description>
    </item>
    
    <item>
      <title>Review of &#39;Running NixOS in a container on a non-NixOS host? : NixOS&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-running-nixos-in-a-container-on-a-non-nixos-host-nixos/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-running-nixos-in-a-container-on-a-non-nixos-host-nixos/</guid>
      <description>Original article Running NixOS in a container on a non-NixOS host? : NixOS  Instructions to create nixos container https://github.com/NixOS/nixpkgs/issues/9735#issuecomment-370744499
  tested nixos with LXD 2.21
  requires existing nixos system
  create rootfs image from any system running nixOS: 1  nix-build -E &amp;#39;(import &amp;lt;nixpkgs/nixos/release.nix&amp;gt; {}).containerTarball.x86_64-linux&amp;#39;   create lxd image metadata: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  templates/hostname.</description>
    </item>
    
    <item>
      <title>Review of &#39;AWS RoboMaker - Amazon Web Services&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-aws-robomaker-amazon-web-services/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-aws-robomaker-amazon-web-services/</guid>
      <description>Original article AWS RoboMaker - Amazon Web Services  Read  https://aws.amazon.com/robomaker/pricing/ https://docs.aws.amazon.com/robomaker/latest/dg/aws-robomaker-dg.pdf   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  AWS Lambda (serverless compute) Lets you run code without provisioning or managing servers.</description>
    </item>
    
    <item>
      <title>Review of &#39;Microsoft: &#34;The future of tech, with Kevin Scott and guests // Microsoft Build&#34;&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-microsoft-the-future-of-tech-with-kevin-scott-and-guests-microsoft-build/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-microsoft-the-future-of-tech-with-kevin-scott-and-guests-microsoft-build/</guid>
      <description>Original video Microsoft: &amp;ldquo;The future of tech, with Kevin Scott and guests // Microsoft Build&amp;rdquo; Original article News OpenAI Model Generates Python Code - YouTube Original video from microsoft https://www.youtube.com/watch?v=fZSFNUT6iY8  Summary At 29 min you can see a demo of code generation from comments.
This is similar to what deep tabnine currently does, though probably uses a more powerful language model.
GitHub CodeSpaces and VSCode will probably have this built-in.</description>
    </item>
    
    <item>
      <title>Review of &#39;GitHub - DataBiosphere/toil: A scalable, efficient, cross-platform (Linux/macOS) and easy-to-use workflow engine in pure Python.&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-github-databiosphere-toil-a-scalable-efficient-cross-platform-linux-macos-and-easy-to-use-workflow-engine-in-pure-python/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-github-databiosphere-toil-a-scalable-efficient-cross-platform-linux-macos-and-easy-to-use-workflow-engine-in-pure-python/</guid>
      <description> Original article https://github.com/DataBiosphere/toil  </description>
    </item>
    
    <item>
      <title>Review of &#39;Runners autoscale configuration | GitLab&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-runners-autoscale-configuration-gitlab/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-runners-autoscale-configuration-gitlab/</guid>
      <description> Original article Runners autoscale configuration | GitLab  </description>
    </item>
    
    <item>
      <title>Review of &#39;mermaid - flowcharts, diagrams, etc.&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-mermaid-markdownish-syntax-for-generating-flowcharts-digrams/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-mermaid-markdownish-syntax-for-generating-flowcharts-digrams/</guid>
      <description>mermaid GitHub repo mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs. Online editor https://mermaid-js.github.io/mermaid-live-editor/ Cheat sheet Mermaid Cheat Sheet @ http://jojozhuang.github.io  Setup docker image I compiled this docker image myself as existing images on dockerhub were outdated.
https://github.com/matthewfeickert/mermaid-CLI
I bumped the mermaid version up from 8.2.6 to 8.4.4 because some of the examples were not working but I&amp;rsquo;m still not able to build some of the diagrams.</description>
    </item>
    
    <item>
      <title>Converting between ttyrec formats</title>
      <link>https://mullikine.github.io/posts/converting-between-ttyrec-formats/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/converting-between-ttyrec-formats/</guid>
      <description>Resources Terminal Recorders: A Comprehensive Guide  Recorders    util notes     asciinema rec May save locally. High fidelity. Json (large size).   ttyrec Preservation of original input. Has provenance.   ttystudio Inhouse json output. Long build duration.    Gif converters    util input notes     seq2gif ttyrec Extremely fast converter.   asciicast2gif asciicast runs in docker, uses phantomjs and imagemagic.</description>
    </item>
    
    <item>
      <title>Translating a chord to the help key in terminfo</title>
      <link>https://mullikine.github.io/posts/translating-a-chord-to-the-help-key-in-terminfo/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/translating-a-chord-to-the-help-key-in-terminfo/</guid>
      <description>Original article man terminfo  tmux tmux is great for translating key bindings. I decided that I&amp;rsquo;d like M-C-] to be translated into the help key.
However, tmux has no notion of the help key. It can&amp;rsquo;t be done in tmux.
emacs Emacs can interpret the chord as the help key.
1  (define-key key-translation-map (kbd &amp;#34;C-M-]&amp;#34;) (kbd &amp;#34;&amp;lt;help&amp;gt;&amp;#34;))   However, this only works in emacs. Other programs respond to the help key.</description>
    </item>
    
    <item>
      <title>docker-mode.el</title>
      <link>https://mullikine.github.io/posts/docker-mode-el/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/docker-mode-el/</guid>
      <description>Source code https://github.com/Silex/docker.el  Docker mode allows you to manage docker images, containers and machines, using emacs.
Given it&amp;rsquo;s emacs, you may customize and extend it to fit your needs. That&amp;rsquo;s what I&amp;rsquo;ll demonstrate.
Example 1: I have extended docker-mode to allow you to get a shell to the docker machine. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  (defun docker-machine-ssh-one (name) &amp;#34;Start an ssh shell on machine.</description>
    </item>
    
    <item>
      <title>Review of &#39;Use Org-Mode Links for Absolutely Anything - Endless Parentheses&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-use-org-mode-links-for-absolutely-anything-endless-parentheses/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-use-org-mode-links-for-absolutely-anything-endless-parentheses/</guid>
      <description>Original article Use Org-Mode Links for Absolutely Anything Endless Parentheses  Demonstration 
This article explains how to add new link types to org mode Here is an example link from the web page 1 2 3 4 5  (org-add-link-type &amp;#34;grep&amp;#34; &amp;#39;endless/follow-grep-link) (defun endless/follow-grep-link (regexp) &amp;#34;Run `rgrep&amp;#39;with REGEXP as argument.&amp;#34; (grep-compute-defaults) (rgrep regexp &amp;#34;*&amp;#34; (expand-file-name &amp;#34;./&amp;#34;)))   I made a few of my own 1 2 3 4  (org-add-link-type &amp;#34;grep-app&amp;#34; &amp;#39;mullikine/follow-grep-app-link) (defun mullikine/follow-grep-app-link (regexp) &amp;#34;Run `grep-app&amp;#39;with REGEXP as argument.</description>
    </item>
    
    <item>
      <title>Review of online marketing software</title>
      <link>https://mullikine.github.io/posts/review-of-online-marketing-software/</link>
      <pubDate>Sat, 14 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-online-marketing-software/</guid>
      <description>Links https://github.com/LisaDziuba/Marketing-for-Engineers   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  Hootsuite [Social Media Management System] Founded: 2008 Helps you keep track and manage your many social network channels. It can enable you to monitor what people are saying about your brand and help you respond instantly.</description>
    </item>
    
    <item>
      <title>Review of &#39;Control system network testing and verification - DNV GL&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-control-system-network-testing-and-verification-dnv-gl/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-control-system-network-testing-and-verification-dnv-gl/</guid>
      <description>Original article https://www.dnvgl.com/services/hil-testing-concept-explanation--83385  Instead of being connected to the actual equipment on the vessel, the control system is connected to a HIL simulator with sophisticated models of the vessel and its equipment.
This enables systematic and comprehensive testing of control system functionality and failure handling without risk to people, equipment or environment.
Accomplished by Facilitate systematic testing of control system:
 design philosophy, functionality, performance, and failure handling capability, both in normal and off-design operating conditions.</description>
    </item>
    
    <item>
      <title>Review of &#39;Testing Autonomous Vehicles | LogiGear Blog&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-testing-autonomous-vehicles-logigear-blog/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-testing-autonomous-vehicles-logigear-blog/</guid>
      <description>Original article Testing Autonomous Vehicles | LogiGear Blog  Sensor feedback Sensors are providing the correct feedback, so the AI can be sure to have the correct information to process.
Input giving bad results The architecture of the NN should also be under scrutiny in the testing process.
If input data is consistently giving bad results, the designed models might need a new direction, and we must be willing to adjust it accordingly.</description>
    </item>
    
    <item>
      <title>Review of &#39;Testing strategy for a real time embedded C application&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-testing-strategy-for-a-real-time-embedded-c-application/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-testing-strategy-for-a-real-time-embedded-c-application/</guid>
      <description>Original article Testing strategy for a real time embedded C application  Need portability testing acceptance test characterization tests Technical assessment of the code  visual inspection, running analysis tools, and interviewing the team members  Example result As a result of the assessment, it was established that the code was well written, the only issue being that inter-process communication was inconsistently implemented.
strategy Instead of writing programs, developers write so-called “tasks”, which run according to various policies.</description>
    </item>
    
    <item>
      <title>Review of &#39;The Practical Test Pyramid&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-the-practical-test-pyramid/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-the-practical-test-pyramid/</guid>
      <description>Original article The Practical Test Pyramid   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  interface Two parties involved: - publisher - subscriber In a REST world a provider builds a REST API with all required endpoints; a consumer makes calls to this REST API to fetch data or trigger changes in the other service.</description>
    </item>
    
    <item>
      <title>Testing Strategy</title>
      <link>https://mullikine.github.io/posts/testing-strategy/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/testing-strategy/</guid>
      <description>Plan Technical assessment of the code  visual inspection, running analysis tools, and interviewing the team members  What tests exist already? How extensive is the bottom of the pyramid?
For each task / team member  Questions to ask  - Where do errors creep in currently? - What are the critical components we need to ensure are working?  Example result As a result of the assessment, it was established that the code was well written, the only issue being that inter-process communication was inconsistently implemented.</description>
    </item>
    
    <item>
      <title>Review of &#39;Polyglot Word Embeddings Discover Language Clusters&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-polyglot-word-embeddings-discover-language-clusters/</link>
      <pubDate>Tue, 04 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-polyglot-word-embeddings-discover-language-clusters/</guid>
      <description>Original article Polyglot Word Embeddings Discover Language Clusters  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  Word2Vec A group of models that tries to represent each word in a large text as a vector in a space of N dimensions (which we will call features) making similar words also be close to each other.</description>
    </item>
    
    <item>
      <title>Future of applied haskell</title>
      <link>https://mullikine.github.io/posts/future-of-applied-haskell/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/future-of-applied-haskell/</guid>
      <description>Reading material http://www.stephendiehl.com/posts/decade.html  Algebraic Effect Systems   Current, old system:
 mtl Monad Transformer Library    Potential replacements systems: \
These effect-system libraries may help to achieve a boilerplate-free nirvana of tracking algebraic effects at much more granular levels.
 fused-effects polysemy eff screaming fast extensible effects for less    https://github.com/hasura/eff</description>
    </item>
    
    <item>
      <title>graph.el</title>
      <link>https://mullikine.github.io/posts/graph-el/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/graph-el/</guid>
      <description>1 2  (graph-draw-tree &amp;#39;(((&amp;#34;parent with data&amp;#34; . datadatadata) (&amp;#34;plain child&amp;#34;) ((&amp;#34;child With data&amp;#34; . somedata)))))   &amp;#34;\&amp;#34; +------------+\\n | parent |\\n | with |\\n | data |\\n +------+-----+\\n |\\n +-------+------+\\n | |\\n+-----+------+ +-----+------+\\n| plain | | child |\\n| child | | With |\\n+------------+ | data |\\n +------------+\\n\&amp;#34;&amp;#34; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  (graph-draw-tree &amp;#39;((&amp;#34;Eubacteria&amp;#34; (&amp;#34;Aquificae&amp;#34;) (&amp;#34;Nitrospira&amp;#34;) (&amp;#34;Proteobacteria&amp;#34;) (&amp;#34;Chlamydiae&amp;#34;) (&amp;#34;Actinobacteria&amp;#34;)) (&amp;#34;Eukaryotes&amp;#34; (&amp;#34;Archaeplastida&amp;#34; (&amp;#34;Green Plants&amp;#34; (&amp;#34;Prasinophytes&amp;#34;) (&amp;#34;Chlorophyceae&amp;#34;) (&amp;#34;Trebouxiophyceae&amp;#34;) (&amp;#34;Ulvophyceae&amp;#34;) (&amp;#34;Streptohyta&amp;#34; (&amp;#34;Zygnematales&amp;#34;) (&amp;#34;Charales&amp;#34;) (&amp;#34;Embryophytes (land plants)&amp;#34;))) (&amp;#34;Rhodophyta&amp;#34;) (&amp;#34;Glaucophytes&amp;#34;)) (&amp;#34;Unikots&amp;#34; (&amp;#34;Opisthokonts&amp;#34; (&amp;#34;Animals&amp;#34; (&amp;#34;Bilateria&amp;#34; (&amp;#34;Ecdysozoa&amp;#34; (&amp;#34;Nematoda&amp;#34;) (&amp;#34;Arthropoda&amp;#34;)) (&amp;#34;Lophotrochozoa&amp;#34;) (&amp;#34;Deuterostoma&amp;#34; (&amp;#34;Echinodermata&amp;#34;) (&amp;#34;Hemichordata&amp;#34;) (&amp;#34;Chordata&amp;#34; (&amp;#34;Urochordata&amp;#34;) (&amp;#34;Cephalochordata&amp;#34;) (&amp;#34;Yonnanozoon&amp;#34;) (&amp;#34;Craniata&amp;#34;)))) (&amp;#34;Cnidaria&amp;#34;) (&amp;#34;Porifera&amp;#34;)) (&amp;#34;Choanoflagellates&amp;#34;) (&amp;#34;Filasterea&amp;#34;) (&amp;#34;Ichthyosporea&amp;#34;) (&amp;#34;Fungi&amp;#34;) (&amp;#34;Nucleariidae&amp;#34;))) (&amp;#34;Chromalveolates&amp;#34; (&amp;#34;Rhizaria&amp;#34; (&amp;#34;Cercozoa&amp;#34;) (&amp;#34;Foraminifera&amp;#34;) (&amp;#34;Radiolaria&amp;#34;)) (&amp;#34;Alveolates&amp;#34;) (&amp;#34;Stramenopiles&amp;#34;) (&amp;#34;Hacrobia&amp;#34;)) (&amp;#34;Excavates&amp;#34; (&amp;#34;Malawimonads&amp;#34;) (&amp;#34;Discicristates&amp;#34; (&amp;#34;Euglenozoa&amp;#34;) (&amp;#34;Heterolobosea&amp;#34;)) (&amp;#34;Fornicata&amp;#34;)))))   &amp;#34;\&amp;#34; +------------+ +------------+\\n | Eubacteria | | Eukaryotes |\\n +-----+------+ +-----+------+\\n | |\\n +-------------+--------------+--------------+--------------+ +---------------------------------+----------------------------+-------------+-------------------------------------------------+\\n | | | | | | | | |\\n+-----+-----+ +-----+------+ +-----+------+ +-----+------+ +-----+------+ +-----+------+ +----+----+ +------+-----+ +-----+-----+\\n| Aquificae | | Nitrospira | | Proteobact | | Chlamydiae | | Actinobact | | Archaeplas | | Unikots | | Chromalveo | | Excavates |\\n+-----------+ +------------+ | eria | +------------+ | eria | | tida | +----+----+ | lates | +-----+-----+\\n +------------+ +------------+ +-----+------+ | +------+-----+ |\\n | + | +--------------+--------------+\\n +--------------+--------------+-------------+ | +-------------+-------+------+-------------+ | | |\\n | | | +------+-----+ | | | | +-----+------+ +-----+------+ +-----+-----+\\n +-----+------+ +-----+------+ +-----+------+ | Opisthokon | +----+-----+ +-----+------+ +-----+------+ +----+-----+ | Malawimona | | Discicrist | | Fornicata |\\n | Green | | Rhodophyta | | Glaucophyt | | ts | | Rhizaria | | Alveolates | | Stramenopi | | Hacrobia | | ds | | ates | +-----------+\\n | Plants | +------------+ | es | +------+-----+ +----+-----+ +------------+ | les | +----------+ +------------+ +-----+------+\\n +-----+------+ +------------+ | | +------------+ |\\n | | | ++-------------+\\n +--------------+--------------+--------------+--------------+ | +--------------------------+-------------+--------------+ | |\\n | | | | | | | | | +-----+------+ +-----+------+\\n+-----+------+ +-----+------+ +-----+------+ +-----+------+ +-----+------+ +------------+--------------+-----+--------+------------+-----------+ +----+-----+ +-----+------+ +-----+------+ | Euglenozoa | | Heterolobo |\\n| Prasinophy | | Chlorophyc | | Trebouxiop | | Ulvophycea | | Streptohyt | | | | | | | | Cercozoa | | Foraminife | | Radiolaria | +------------+ | sea |\\n| tes | | eae | | hyceae | | e | | a | +----+----+ +-----+------+ +-----+------+ +-----+------+ +---+---+ +-----+------+ +----------+ | ra | +------------+ +------------+\\n+------------+ +------------+ +------------+ +------------+ +-----+------+ | Animals | | Choanoflag | | Filasterea | | Ichthyospo | | Fungi | | Nucleariid | +------------+\\n | +----+----+ | ellates | +------------+ | rea | +-------+ | ae |\\n | | +------------+ +------------+ +------------+\\n | |\\n | +--------------+------------+------------+\\n | | | |\\n +-------------+-------------+ +-----+-----+ +----+-----+ +----+-----+\\n | | | | Bilateria | | Cnidaria | | Porifera |\\n +-----+------+ +----+-----+ +-----+------+ +-----+-----+ +----------+ +----------+\\n | Zygnematal | | Charales | | Embryophyt | |\\n | es | +----------+ | es (land | |\\n +------------+ | plants) | |\\n +------------+ |\\n |\\n +--------------+--------------+\\n | | |\\n +-----+-----+ +------+-----+ +------+-----+\\n | Ecdysozoa | | Lophotroch | | Deuterosto |\\n +-----+-----+ | ozoa | | ma |\\n | +------------+ +------+-----+\\n +------+------+ |\\n | | +-------+------+-------------+\\n +-----+----+ +------+-----+ | | |\\n | Nematoda | | Arthropoda | +------+-----+ +------+-----+ +-----+----+\\n +----------+ +------------+ | Echinoderm | | Hemichorda | | Chordata |\\n | ata | | ta | +-----+----+\\n +------------+ +------------+ |\\n |\\n +----------------------+--------------+-------------+\\n | | | |\\n +-----+------+ +------+-----+ +------+-----+ +-----+----+\\n | Urochordat | | Cephalocho | | Yonnanozoo | | Craniata |\\n | a | | rdata | | n | +----------+\\n +------------+ +------------+ +------------+\\n\&amp;#34;&amp;#34; 1 2 3 4 5 6 7 8  (graph-draw-tree &amp;#39;((north-america (usa (miami) (seattle) (idaho (boise)))) (europe (germany) (france (paris) (lyon) (cannes)))))   &amp;#34;\&amp;#34; +------------+ +--------+\\n | north | | europe |\\n | america | +----+---+\\n +------+-----+ |\\n | +---------+---------+\\n + | |\\n | +----+----+ +---+----+\\n +--+--+ | germany | | france |\\n | usa | +---------+ +---+----+\\n +--+--+ |\\n | +--------+---------+\\n +----------+----------+ | | |\\n | | | +---+---+ +--+---+ +---+----+\\n+---+---+ +----+----+ +---+---+ | paris | | lyon | | cannes |\\n| miami | | seattle | | idaho | +-------+ +------+ +--------+\\n+-------+ +---------+ +---+---+\\n |\\n +\\n |\\n +---+---+\\n | boise |\\n +-------+\\n\&amp;#34;&amp;#34; 1  (graph-draw-binary-tree &amp;#39;(1 (2 (3) (4)) (5)))   &amp;#34;\&amp;#34; +---+\\n | 1 |\\n +---+\\n / \\\\ \\n / \\\\ \\n +---+ +---+\\n | 2 | | 5 |\\n +---+ +---+\\n / \\\\ \\n / \\\\ \\n+---+ +---+\\n| 3 | | 4 |\\n+---+ +---+\\n\&amp;#34;&amp;#34; 1 2 3 4 5 6 7 8 9 10 11 12 13  (graph-draw-binary-tree &amp;#39;(organisms (prokaryotes (e-coli)) (eukaryotes (plants (seed-plants (carrot) (oak-tree)) (ferns)) (animalia (invertebrates (sponge) (worm)) (mammals (mouse) (apes (chimpanzee) (human)))))))   &amp;#34;\&amp;#34; +-----------+\\n | organisms |\\n +-----------+\\n / \\\\_________________________________________ \\n / \\\\ \\n +-------------+ +------------+\\n | prokaryotes | | eukaryotes |\\n +-------------+ +------------+\\n / / \\\\_______________________________ \\n / / \\\\ \\n+--------+ +--------+ +----------+\\n| e coli | | plants | | animalia |\\n+--------+ +--------+ +----------+\\n / \\\\_ / \\\\___________ \\n / \\\\ / \\\\ \\n +-------------+ +-------+ +---------------+ +---------+\\n | seed plants | | ferns | | invertebrates | | mammals |\\n +-------------+ +-------+ +---------------+ +---------+\\n / \\\\ / \\\\ / \\\\________________ \\n / \\\\ / \\\\ / \\\\ \\n +--------+ +----------+ +--------+ +------+ +-------+ +------+\\n | carrot | | oak tree | | sponge | | worm | | mouse | | apes |\\n +--------+ +----------+ +--------+ +------+ +-------+ +------+\\n / \\\\ \\n / \\\\ \\n +------------+ +-------+\\n | chimpanzee | | human |\\n +------------+ +-------+\\n\&amp;#34;&amp;#34; </description>
    </item>
    
    <item>
      <title>★ Automating rat, a powerful productivity tool ★</title>
      <link>https://mullikine.github.io/posts/rat/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/rat/</guid>
      <description>Source https://github.com/ericfreese/rat Tweaks https://github.com/mullikine/rat/commits/shane See also Creating a rat mode for docker // Splunky Splog Coincidence The moment I finished writing this up, the fireworks for Chinese New Year began. It&amp;rsquo;s the year of the rat! I love it! I had no idea!  I remember seeing this a few years ago but at the time I was too much of a noob.
Just recently I was playing around with docker commands when I realised it would be perfectly suited for rapidly putting together a TUI.</description>
    </item>
    
    <item>
      <title>Induction workaround</title>
      <link>https://mullikine.github.io/posts/fortescue-induction-workaround/</link>
      <pubDate>Fri, 24 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/fortescue-induction-workaround/</guid>
      <description>Firstly, you need to be browsing the website with the chrome dev tools visible. For me, I press Control-Shift-C to bring up the dev tools.
If you are on a mac the keybinding may be different. Perhaps it uses Command instead of Control, I&amp;rsquo;m unsure.
Once you have the dev-tools up, reload the page with Control-R or whatever You need to select a folder to be your overrides directory   Click on the &amp;ldquo;sources&amp;rdquo; tab and navigate to main.</description>
    </item>
    
    <item>
      <title>Dockerfile syntax</title>
      <link>https://mullikine.github.io/posts/dockerfile-syntax/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dockerfile-syntax/</guid>
      <description>Original article https://devhints.io/dockerfile  Inheritance 1  FROMruby:2.2.2   Variables 1 2 3 4  ENV APP_HOME /myappRUN mkdir $APP_HOMEARG APP_HOME=&amp;#34;&amp;#34;RUN mkdir $APP_HOME   Initialization 1 2 3 4 5 6  RUN bundle installWORKDIR/myappVOLUME [&amp;#34;/data&amp;#34;]# Specification for mount pointADD file.xyz /file.xyzCOPY --chown=user:group host_file.xyz /path/container_file.xyz   Onbuild 1 2  ONBUILD RUN bundle install# when used with another file   Commands 1 2  EXPOSE5900CMD [&amp;#34;bundle&amp;#34;, &amp;#34;exec&amp;#34;, &amp;#34;rails&amp;#34;, &amp;#34;server&amp;#34;]   Entrypoint Configure a container that will run as an executable.</description>
    </item>
    
    <item>
      <title>Docker FZF</title>
      <link>https://mullikine.github.io/posts/sp-docker-fzf/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/sp-docker-fzf/</guid>
      <description>Make docker-select-image 1 2 3 4  #!/bin/bash export TTY docker image ls --format=&amp;#34;{{json .}}&amp;#34; | jq -r &amp;#34;.Repository&amp;#34; | fzf -0   Make docker-run-command 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  #!/bin/bash export TTY image=&amp;#34;$1&amp;#34; command=&amp;#34;$2&amp;#34; if test -z &amp;#34;$image&amp;#34;; then image=&amp;#34;$(docker-select-image)&amp;#34; fi if test -z &amp;#34;$image&amp;#34;; then exit 1 fi if test -z &amp;#34;$command&amp;#34;; then # command=&amp;#34;$(docker image inspect &amp;#34;$image&amp;#34; | jq -r &amp;#34;.</description>
    </item>
    
    <item>
      <title>Parsr</title>
      <link>https://mullikine.github.io/posts/parsr/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/parsr/</guid>
      <description>Playing around with lazydocker, Parsr and jq 
Running the parser 1  cd &amp;#34;$MYGIT/axa-group/Parsr/docs&amp;#34;; npm run run:debug -- --input-file samples/bitcoin.pdf --output-folder dist/ --document-name example --config server/defaultConfig.json --pretty-logs   1  vs $MYGIT/axa-group/Parsr/dist/example.txt   1  cat $MYGIT/axa-group/Parsr/dist/example.json | jiq   Parsr is kinda cool It parses documents, provides you with a gui to find what you want and then a json parse tree.
  1  cat $MYGIT/axa-group/Parsr/dist/example.</description>
    </item>
    
    <item>
      <title>Review of &#39;A Practical Guide to Feature Engineering in Python - Heartbeat&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-a-practical-guide-to-feature-engineering-in-python-heartbeat/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-a-practical-guide-to-feature-engineering-in-python-heartbeat/</guid>
      <description>Original article https://heartbeat.fritz.ai/a-practical-guide-to-feature-engineering-in-python-8326e40747c8  Coming up with features is difficult, time- consuming, requires expert knowledge.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  missing values [#feature engineering] Values that are not recorded during data collection. They are mostly not provided, left out due to errors, or too difficult to measure.</description>
    </item>
    
    <item>
      <title>Review of &#39;Grammars for programming languages - Mikhail Barash - Medium&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-grammars-for-programming-languages-mikhail-barash-medium/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-grammars-for-programming-languages-mikhail-barash-medium/</guid>
      <description>Original article https://medium.com/@mikhail.barash.mikbar/grammars-for-programming-languages-fae3a72a22c6 See also https://mullikine.github.io/posts/rosie-pattern-matching-language/  CFG (context-free grammars) When syntax of programming languages is communicated CGFs are a lingua franca.
They define structure of syntax, but cannot express static semantics.
Limitations Soon after context-free grammars had been introduced, it became apparent that their expressive power is limited.
In 1962, Floyd has shown that Algol is not a context-free language and thus cannot be defined by a context-free grammar.</description>
    </item>
    
    <item>
      <title>Review of &#39;Google AI Blog: Reformer: The Efficient Transformer&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-google-ai-blog-reformer-the-efficient-transformer/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-google-ai-blog-reformer-the-efficient-transformer/</guid>
      <description>Original article Google AI Blog: Reformer: The Efficient Transformer  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  Reformer [Transformer model] Designed to handle context windows of up to 1 million words, all on a single accelerator and using only 16GB of memory. It combines two crucial techniques to solve the problems of attention and memory allocation that limit Transformer’s application to long context windows.</description>
    </item>
    
    <item>
      <title>ludo – login sudo</title>
      <link>https://mullikine.github.io/posts/ludo/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/ludo/</guid>
      <description>Designing ludo. Using it for lazydocker 
Using ludo to pull a container 1  ludo docker pull axarev/parsr   </description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>https://mullikine.github.io/posts/ansible/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/ansible/</guid>
      <description>Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  task role Tower Red Hat Ansible Tower Extend Ansible Automation.</description>
    </item>
    
    <item>
      <title>Hydra - CI and release management for NixOS</title>
      <link>https://mullikine.github.io/posts/nix-hydra-ci/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/nix-hydra-ci/</guid>
      <description>Original article https://nixos.org/hydra/manual/  1 2 3 4  big bang integration The phenomenon where components are only tested together near the end of the development process.   Background Continuous Integration An automated system continuously or periodically:
 check out the source code of a project, build it, run tests, and produce reports for the developers.  CI Tools enable Lenthy tests Many projects have very large test sets (e.</description>
    </item>
    
    <item>
      <title>Writing a gazebo plugin</title>
      <link>https://mullikine.github.io/posts/writing-a-gazebo-plugin/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/writing-a-gazebo-plugin/</guid>
      <description> Reference material Gazebo : Tutorials  </description>
    </item>
    
    <item>
      <title>CodeQL by GitHub and Semmle</title>
      <link>https://mullikine.github.io/posts/codeql-by-github-and-semmle/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/codeql-by-github-and-semmle/</guid>
      <description>Reference material Getting started with the CodeQL CLI - CodeQL QL packs - CodeQL Related articles CodeLingo vs Linters: TLDR // Bodacious Blog  Glossary 1 2 3  QL pack Contains important metadata that tells the CodeQL CLI how to process the query files.   Install the CLI Releases github/codeql-cli-binaries GitHub
Obtain a local copy of the CodeQL queries Using my xsh script, which is like bash but works over interactive subshells.</description>
    </item>
    
    <item>
      <title>★ Application to Fortescue Metals Group ★</title>
      <link>https://mullikine.github.io/posts/application-to-fortescue-metals-group/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/application-to-fortescue-metals-group/</guid>
      <description>Other formats Word application-to-fortescue-metals-group.doc PDF application-to-fortescue-metals-group.pdf  To Fortescue Metals Group,
Please consider me for the position of Senior Software Tester.
In the specific area of HIL Testing I have 2 years of solid experience from working at Crown Robotics Technology Center ( RTC ) in Penrose, Auckland. I also have a year of building and testing a C++ application for TracMap (details below). I have also accrued a significant amount of testing experience over the last 8 years working as a Software Engineer on embedded software, software as a service (SASS) and continuous integration (CI) as a service.</description>
    </item>
    
    <item>
      <title>Browsing GNU less without killing tail: tail, using unbuffer and trap</title>
      <link>https://mullikine.github.io/posts/tail-unbuffer-and-trap/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/tail-unbuffer-and-trap/</guid>
      <description>tail, unbuffer and trap are 3 things which are useful together.
tail usually stops reading if it receives SIGINT, which is created by pressing C-c.
C-c is useful to be pressed inside less to prevent it from reading so you can navigate what has entered so far.
unbuffer -p disables output buffering for grep.
You can also use sed -u instead of grep but then you have to consider escaping.</description>
    </item>
    
    <item>
      <title>Getting the interpreter for babel</title>
      <link>https://mullikine.github.io/posts/emacs-get-interpreter-for-babel/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-get-interpreter-for-babel/</guid>
      <description>Create the snippet 1 2 3 4 5  # -*- mode: snippet -*- # name: # # key: # # -- ${1:$$(get-interpreter-for-buffer)}   Create the function that the snippet calls 1 2 3 4 5 6 7  (defun get-interpreter-for-buffer () (let ((tf (or (if (and (not (eq major-mode &amp;#39;org-mode)) (string-match-p &amp;#34;\.org$&amp;#34; (get-path))) (concat &amp;#34;x\.&amp;#34; (get-ext-for-mode))) (get-path)))) (concat &amp;#34;#!&amp;#34; (e/chomp (bp xargs get-interpreter-for-file.sh tf)))))   Along with a function for getting the extension given the mode Do this by checking auto-mode-alist.</description>
    </item>
    
    <item>
      <title>Autoscaling GitLab Runner on AWS</title>
      <link>https://mullikine.github.io/posts/autoscaling-gitlab-runner-on-aws/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/autoscaling-gitlab-runner-on-aws/</guid>
      <description>Premise Create a GitLab Runner which scales using EC2 Spot instances
Creating this article and enabling AWS glossary 
Create a GitLab CICD glossarygitlab-ci-multi-Runner Exactly same application that runs The tests on The GitLab CI instance.</description>
    </item>
    
    <item>
      <title>Creating an LSP mode for racket</title>
      <link>https://mullikine.github.io/posts/creating-a-lsp-mode-for-racket/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/creating-a-lsp-mode-for-racket/</guid>
      <description>It turns out to be very easy to connect a language server to emacs where a plugin is not available.
 Emacs plugin https://github.com/mullikine/lsp-racket-el  Firstly, install the language server 1  raco pkg install racket-langserver   Then make the plugin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  ;;; lsp-racket.</description>
    </item>
    
    <item>
      <title>Review of &#39;Beautiful Racket: Make a language in one hour: stacker&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-beautiful-racket-make-a-language-in-one-hour-stacker/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-beautiful-racket-make-a-language-in-one-hour-stacker/</guid>
      <description>Original article Beautiful Racket: Make a language in one hour: stacker GitHub - mbutterick/beautiful-racket: Resources for the Beautiful Racket book  Files  $MYGIT/mbutterick/beautiful-racket/beautiful-racket-demo/stacker-demo/info.rkt $MYGIT/mbutterick/beautiful-racket/beautiful-racket-demo/stacker-demo/stacker-test.rkt $MYGIT/mbutterick/beautiful-racket/beautiful-racket-demo/stacker-demo/stacker.rkt $MYGIT/mbutterick/beautiful-racket/beautiful-racket-demo/stacker-demo/test-sources.rkt  This is about making a linewise reverse polish calculator By convention, the top of our stack will correspond to the left side of a Racket list.
   enter a line push to list apply operation, compact list      (list)    4 (list 4)    8 (list 8 4)    + (list + 8 4) (list 12)   3 (list 3 12)    * (list * 3 12) (list 36)    Final results 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #lang br/quicklang (define (read-syntax path port) (define src-lines (port-&amp;gt;lines port)) (define src-datums (format-datums &amp;#39;(handle ~a) src-lines)) (define module-datum `(module stacker-mod stacker-demo/stacker ,@src-datums)) (datum-&amp;gt;syntax #f module-datlum)) (provide read-syntax) (define-macro (stacker-module-begin HANDLE-EXPR .</description>
    </item>
    
    <item>
      <title>Review of &#39;Counting inversions via rank queries | blog :: Brent -&gt; [String]&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-counting-inversions-via-rank-queries-blog-brent-string/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-counting-inversions-via-rank-queries-blog-brent-string/</guid>
      <description>Original article Counting inversions via rank queries | blog :: Brent -&amp;gt; String   Count the number of inversions of a sequence in \(O(n \lg n)\)  inversion Given a sequence \(a_1, a_2, \dots, a_n\) , an inversion is a pair of positions \(i, j\) such that \(a_i\) and \(a_j\) are in the “wrong order”, that is, \(i &amp;lt; j\) but \(a_i &amp;gt; a_j\) .  There can be up to \(n(n-1)/2\) inversions in the worst case, so we cannot hope to count them in faster than quadratic time by simply incrementing a counter.</description>
    </item>
    
    <item>
      <title>Review of emacs distributions</title>
      <link>https://mullikine.github.io/posts/emacs-distributions/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-distributions/</guid>
      <description>All the distributions I use are overlaid with my own customisations to make them very similar to each other by making my own key bindings and hydras layer. They still retain their own peculiarities, but I have taken a decent portion of code from each distribution to form a common functionality layer.
I have over 1300 emacs plugins which all distributions share.
Spacemacs  Very good default keybindings. Great support for LSP.</description>
    </item>
    
    <item>
      <title>Plan9 Mk vs UNIX/BSD Make vs GNU Make</title>
      <link>https://mullikine.github.io/posts/plan9-mk-vs-make/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/plan9-mk-vs-make/</guid>
      <description>source material Maintaining Files on Plan 9 with Mk Mk: A Successor to Make gnu make - The difference between .mk file and Makefile - Stack Overflow build - What is the difference between gmake and make? - Stack Overflow  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  Mkfile The makefile of Plan9 Mk. rule A rule appears in the makefile and says when and how to remake certain files, called the rule’s targets (most often only one per rule).</description>
    </item>
    
    <item>
      <title>Efficiently getting emacs keyboard macros from string literals using expect/tmux</title>
      <link>https://mullikine.github.io/posts/emacs-macros-from-string-literals-using-invisible-emacs/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-macros-from-string-literals-using-invisible-emacs/</guid>
      <description>{´◕ ◡ ◕｀} This requires both expect and tmux to be installed. They are only used in the background. You can use this function with GUI emacs fine. No other dependencies are required for this elisp function to work. The bash/tcl/expect script is embedded in elisp. Update The builtin edmacro-format-keys gives me the functionality I want without the rigmarole.  make-kbd-from-string is a function that takes a string literal and gives you a keyboard macro.</description>
    </item>
    
    <item>
      <title>Creating an emacs mode for asciinema.org</title>
      <link>https://mullikine.github.io/posts/an-emacs-mode-for-asciinema-playback/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/an-emacs-mode-for-asciinema-playback/</guid>
      <description>Related articles Hacker News mode and minor modes for websites // Bodacious Blog  This blog is about creating a minor mode for browsing asciinema.org and extending eww-mode to handle the video links.
I use tmux from emacs to spawn a new window that starts the playback when a link is clicked.
Demonstration Here, I use the asciinema mode for browsing and opening asciinema recordings from my blog.</description>
    </item>
    
    <item>
      <title>Pipifying interactive programs</title>
      <link>https://mullikine.github.io/posts/pipifying-programs/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/pipifying-programs/</guid>
      <description>Related articles semi-automated interactive stream editing: piping through expect and emacs // Bodacious Blog Complex Dwarf Fortress macros with tcl/expect, emacs and tmux // Bodacious Blog  Glossary of made-up words 1 2 3 4 5 6 7 8 9 10 11  pipable pipability The ability of a CLI program to accept stdin and emit stdout. pipifying pipification Adding pipability to a CLI program; particularly, ones which by having a TUI are seemingly precluded from being pipable.</description>
    </item>
    
    <item>
      <title>★ semi-automated interactive stream editing: piping through expect and emacs ★</title>
      <link>https://mullikine.github.io/posts/semi-automated-stream-editing-piping-through-expect-and-emacs/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/semi-automated-stream-editing-piping-through-expect-and-emacs/</guid>
      <description>Here, the eipe2 script wraps around emacsclient to enable myself to intercept the traffic of a bash pipeline and edit it mid-command. It&amp;rsquo;s modelled after vipe.
But that is only half the trick. I then do the same for tcl/expect. On its own, expect can&amp;rsquo;t edit the stream, but by placing an eipe2 within the expect script I can complete the pipeline, automating emacs with expect.
But that is not the most awesome part.</description>
    </item>
    
    <item>
      <title>Currying in emacs lisp</title>
      <link>https://mullikine.github.io/posts/currying-in-emacs-lisp/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/currying-in-emacs-lisp/</guid>
      <description>This is what I want to be able to do:
1 2 3 4  (defun add-3-things (a b c) (+ a b c)) (mapcar (add-3-things 5 10) &amp;#39;(1 2 3 4))   The reason why it&amp;rsquo;s not possible is because of variadic functions.
https://paqmind.com/en/blog/currying-in-lisp
In other words, the following wouldn&amp;rsquo;t work because variadic functions clash with currying.
1 2 3 4 5 6 7 8 9 10 11 12  (defun add-at-least-one-thing (a &amp;amp;rest args) (eval `(+ a ,@args))) (add-at-least-one-thing 1 2 3) ;; 6 ;; This doesn&amp;#39;t make sense because since =add-at-least-one-thing= is ;; satisfied it returns 15 rather than a partially applied function and ;; 15 isn&amp;#39;t a function (mapcar (add-at-least-one-thing 5 10) &amp;#39;(1 2 3 4)) ;; Debugger entered--Lisp error: (invalid-function 15) ;; 15(1)   But surely it&amp;rsquo;s possible to hack what I want with a macro.</description>
    </item>
    
    <item>
      <title>Upgrading the packages in GOPATH to go modules</title>
      <link>https://mullikine.github.io/posts/golang/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/golang/</guid>
      <description>Reading material https://github.com/golang/go/wiki/Modules#modules Introduction to Go Modules in Go v1.11, Goodbye GOPATH! https://blog.golang.org/migrating-to-go-modules  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  package Nothing but a directory with some code files, which exposes different variables (features) from a single point of reference. This is a package: ${GOPATH%%:*}/src/github.com/mullikine/google-spreadsheet-cli module A collection of related Go packages that are versioned together as a single unit.</description>
    </item>
    
    <item>
      <title>emacs vipe with language detection</title>
      <link>https://mullikine.github.io/posts/emacs-vipe-with-language-detection/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-vipe-with-language-detection/</guid>
      <description>Add the logic for buffers and frames 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  (defun on-kill-buffer-write-and-close-frame (path) (write-to-file-on-buffer-exit path) (close-frame-on-buffer-exit)) (defun write-buffer-termfile () ;; (interactive) (if (and (variable-p &amp;#39;termfile-local) termfile-local) (write-string-to-file (buffer-string) termfile-local))) (defun write-to-file-on-buffer-exit (path) (interactive) (defset-local termfile-local path) (add-hook &amp;#39;kill-buffer-hook &amp;#39;write-buffer-termfile)) (defun close-local-termframe () ;; (interactive) (if (and (variable-p &amp;#39;termframe-local) termframe-local) (delete-frame termframe-local t))) (defun close-frame-on-buffer-exit () (interactive) (defset-local termframe-local termframe) (add-hook &amp;#39;kill-buffer-hook &amp;#39;close-local-termframe t)) (provide &amp;#39;my-frame)   Add the options and functionality to the emacsclient wrapper killing the frame upon killing the buffer 1 2 3 4 5  +wbdf) { CLOSE_AND_WRITE_BUTTER_TO_STDOUT=y shift } ;;   1 2 3 4  if test &amp;#34;$CLOSE_AND_WRITE_BUTTER_TO_STDOUT&amp;#34; = &amp;#34;y&amp;#34;; then tf_buffer_path=&amp;#34;$(odn ux tf path || echo /dev/null)&amp;#34; elisp+=&amp;#34;(on-kill-buffer-write-and-close-frame $(aqf &amp;#34;$tf_buffer_path&amp;#34;))&amp;#34; fi   1 2 3 4 5 6 7 8  exec 3&amp;gt;&amp;amp;1 exec 1&amp;gt;&amp;#34;$TTY&amp;#34; eval &amp;#34;e c $new_arg_string&amp;#34; exec 1&amp;gt;&amp;amp;3 if test -f &amp;#34;$tf_buffer_path&amp;#34;; then cat &amp;#34;$tf_buffer_path&amp;#34; fi   file type detect 1 2 3 4 5  -aft) { FT_DETECT=y shift } ;;   1 2 3  if test &amp;#34;$FT_DETECT&amp;#34; = &amp;#34;y&amp;#34;; then elisp+=&amp;#34;(detect-language-set-mode)&amp;#34; fi   Demonstration</description>
    </item>
    
    <item>
      <title>Hacker News mode and minor modes for websites</title>
      <link>https://mullikine.github.io/posts/hacker-news-mode-and-minor-modes-for-websites/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/hacker-news-mode-and-minor-modes-for-websites/</guid>
      <description>The idea of this is that when you visit a website it should enable a minor mode for that website which may contain convenience keybindings for such things as navigation.
Create some eww-mode hooks 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  (defvar eww-browse-url-after-hook &amp;#39;()) (defun eww-browse-url-after-advice (&amp;amp;rest args) &amp;#34;Give the buffer a unique name and recenter to the top&amp;#34; ;; We may know the URL before it&amp;#39;s loaded (rename-eww-buffer-unique (car args)) (recenter-top) (run-hooks &amp;#39;eww-browse-url-after-hook)) (advice-add &amp;#39;eww-browse-url :after &amp;#39;eww-browse-url-after-advice) (defvar eww-follow-link-after-hook &amp;#39;()) (defun eww-follow-link-after-advice (&amp;amp;rest args) &amp;#34;Recenter to the top&amp;#34; (recenter-top) (run-hooks &amp;#39;eww-follow-link-after-hook)) (advice-add &amp;#39;eww-follow-link :after &amp;#39;eww-follow-link-after-advice) (defvar eww-reload-after-hook &amp;#39;()) (defun eww-reload-after-advice (&amp;amp;rest args) (run-hooks &amp;#39;eww-reload-after-hook)) (advice-add &amp;#39;eww-reload :after &amp;#39;eww-reload-after-advice) (add-hook &amp;#39;eww-reload-after-hook (lm (rename-eww-buffer-unique)) t) (defvar eww-restore-history-after-hook &amp;#39;()) (defun eww-restore-history-after-advice (&amp;amp;rest args) (run-hooks &amp;#39;eww-restore-history-after-hook)) (advice-add &amp;#39;eww-restore-history :after &amp;#39;eww-restore-history-after-advice) (add-hook &amp;#39;eww-restore-history-after-hook (lm (rename-eww-buffer-unique)) t)   Create the my-eww-modes.</description>
    </item>
    
    <item>
      <title>Generate yasnippet from vimsnippet</title>
      <link>https://mullikine.github.io/posts/generate-yasnippets-from-vimshippets/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/generate-yasnippets-from-vimshippets/</guid>
      <description>write the script vimsnippet2yasnippet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null while [ $# -gt 0 ]; do opt=&amp;#34;$1&amp;#34;; case &amp;#34;$opt&amp;#34; in &amp;#34;&amp;#34;) { shift; }; ;; -d) { dir=&amp;#34;$2&amp;#34; shift shift } ;; *) break; esac; done stdin_exists() { !</description>
    </item>
    
    <item>
      <title>Permalinks for substrings in various documents</title>
      <link>https://mullikine.github.io/posts/getting-permalinks-for-substrings-in-man-pages-urls-and-other-files/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/getting-permalinks-for-substrings-in-man-pages-urls-and-other-files/</guid>
      <description>The idea is I select some text and press g y and emacs or vim will provide me with a command to go to that section of that file.
example usage of results 1  emacshelp +/&amp;#34;Major modes specialize Emacs for editing or interacting with particular&amp;#34; &amp;#34;(elisp) Major Modes&amp;#34;   1  ewwlinks +/&amp;#34;\* When ~~ is pressed, the Expect interpreter runs interactively.\&amp;#34;&amp;#34; &amp;#34;https://wiki.tcl-lang.org/page/interact&amp;#34;   1  man +/&amp;#34;For example, here are some things Expect can do:&amp;#34; &amp;#34;expect(1)&amp;#34;   emacs functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  (defun get-path (&amp;amp;optional soft) (interactive) ;; (xc-m (s/rp (buffer-file-name))) (or (and (eq major-mode &amp;#39;Info-mode) (if soft (concat &amp;#34;(&amp;#34; (basename Info-current-file) &amp;#34;) &amp;#34; Info-current-node) (concat Info-current-file &amp;#34;.</description>
    </item>
    
    <item>
      <title>Reading 23.12.19</title>
      <link>https://mullikine.github.io/posts/reading-23.12.19/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-23.12.19/</guid>
      <description>AI NLP  Language Engineering; Harnessing the Power of Language Google AI Blog: ALBERT: A Lite BERT for Self-Supervised Learning of Language Representations  Computer Vision  ObjectNet  Automated testing  Cucumber | Tools &amp;amp; techniques that elevate teams to greatness Writing Features - Gherkin Language - Behat 2.5.3 documentation  Information Retrieval  Why databases use ordered indexes but programming uses hash tables (evanjones.ca)  Programming languages haskell parsers  An introduction to parsing text in Haskell with Parsec - Nick.</description>
    </item>
    
    <item>
      <title>Learning PureScript</title>
      <link>https://mullikine.github.io/posts/learning-purescript/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/learning-purescript/</guid>
      <description>Source material Read PureScript by Example | Leanpub \
GitHub - paf31/purescript-book: Sources for the PureScript book \
Hack for backward compatibility | OCaml vs Haskell  1  ewwlinks +/&amp;#34;1.1 Functional JavaScript&amp;#34; &amp;#34;https://leanpub.com/purescript/read#leanpub-auto-functional-javascript&amp;#34;   Type inference is supposed to be used as a tool.
Functional programming is great at:
 data analysis, parsing, compiler implementation, generic programming, parallelism  PureScript provides the ability to import existing JavaScript code, by providing types for its values and functions, and then to use those functions in regular PureScript code.</description>
    </item>
    
    <item>
      <title>Languages and build systems supported by my environment</title>
      <link>https://mullikine.github.io/posts/emacs-languages-supported/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-languages-supported/</guid>
      <description>Related reading Setting up LSP with emacs (Go, Java, Python, Rust, C++, Haskell) // Bodacious Blog Build Systems support // Bodacious Blog  State of programming language support in my own environment Support I&amp;rsquo;m experienced at creating language server clients for emacs.
https://github.com/mullikine/lsp-racket-el
   Language LSP Working Fallback working Current user experience REPL / Playground DAP (debug) Working Static analysis Code Generation     Go ✓ ✓ Amazing ✓  ✓    Python ✓ ✓ Amazing ✓ ✓ ✓ ✓   Racket ✓ ✓ racket-mode Amazing ✓ ✓ ✓ ✓   Java ✓ ✓ eclim Good ✓ (default) ✓ ✓    Rust ✓ ✓ Good ✓  ✓    C++ ✓ ✓ clang Great ✓  ✓    Haskell ✓ ✓ intero Good ✓  ✓    PureScript  ✓ spago Good ✓      JavaScript ✓  Amazing ✓      TypeScript ✓  Amazing ✓      Ruby ✓  Good ✓  ✓    Lua ✗ ✓ Great ✓  ✓    Scala ✓  Good ✓      Bash   Great ✓  ✓    Erlang   Good ✓      Nix   Good ✓      awk   Good ✓      PHP   Good ✓      Racket ✓  Good ✓      zsh   Good ✓      tcl   Good ✓      Mathematica   Wanting ✓      LFE   Good ✓      Perl 5   Good ✓      hy   Good ✓   ✓   Common Lisp   Good ✓      Clojure   Good ✓      Hackett   Good ✓      OCaml   Good ✓      SmallTalk   Good ✓       Strengths Table 1: legend     key      OOP object-oriented   FP functional programming   Exp.</description>
    </item>
    
    <item>
      <title>Automating build systems for many languages</title>
      <link>https://mullikine.github.io/posts/build-systems/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/build-systems/</guid>
      <description>Related reading (more information) Languages supported by my development environment // Bodacious Blog  I have automated my interaction with these build tools.
This list does not include my emacs environment; it&amp;rsquo;s not even close to being exhaustive.
   name language example     aribtrary dotfiles (many) * .compton.conf. Kill and restart compton   make * list and fuzzy select targets then run them   pip, setup.</description>
    </item>
    
    <item>
      <title>Automating TOR and TPB</title>
      <link>https://mullikine.github.io/posts/automating-tor-and-the-pirate-bay/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-tor-and-the-pirate-bay/</guid>
      <description>Here&amp;rsquo;s a controversial post.
Disclaimer: I do not use The Pirate Bay for piracy and this is here for educational purposes only.
Patch w3m I patched w3m to send the magnet url under the cursor to the clipboard.
I&amp;rsquo;ll put it up here when I find it.
Create the tpb script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  #!</description>
    </item>
    
    <item>
      <title>Setting up PureScript</title>
      <link>https://mullikine.github.io/posts/setting-up-purescript/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-purescript/</guid>
      <description>Reading Make the Leap from JavaScript to PureScript - By  Thoughts Because PureScript is cleaned up it might be a lot better, even if it&amp;rsquo;s less powerful.
Haskell&amp;rsquo;s tooling must improve.
Learn PureScript  https://learnxinyminutes.com/docs/purescript/ https://github.com/adambard/learnxinyminutes-docs  Set up tooling https://github.com/purescript/documentation
  pulp (build system for PureScript) https://github.com/purescript-contrib/pulp https://www.npmjs.com/package/pulp
  psc-package (Package manager for PureScript) Based on the concept of package sets. https://github.com/purescript/psc-package
  gulp-purescript https://github.</description>
    </item>
    
    <item>
      <title>TensorFlow Debugger (tfdb) and emacs</title>
      <link>https://mullikine.github.io/posts/tensorflow-debugger-tfdb-and-emacs/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/tensorflow-debugger-tfdb-and-emacs/</guid>
      <description>Relevant source material TensorFlow Debugger Screencast - YouTube DebugTFBasics  I plan on building a mode for emacs that includes syntax highlighting and keyboard macros, but I&amp;rsquo;ll have to wait until tfdb is released for TF2.0.
Wrapping TensorFlow Sessions With tfdbg Add the following lines of code to use tfdbg and then contain the Session object using a debugger wrapper.
1  from tensorflow.python import debug as tf_debug    CLI should be called before and after Session.</description>
    </item>
    
    <item>
      <title>★ Complex Dwarf Fortress macros with tcl/expect, emacs and tmux ★</title>
      <link>https://mullikine.github.io/posts/dwarf-fortress-macros-with-emacs-and-tmux/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dwarf-fortress-macros-with-emacs-and-tmux/</guid>
      <description>Related articles minor mode wrappers for shell commands // Bodacious Blog  Here I make an emacs mode for Dwarf Fortress and create some keybindings in emacs which runs a generated tcl/expect script over Dwarf Fortress using tmux to attach itself to the tty inside term- mode.
Write the emacs lisp This macro creates minor modes from a list of shell command names.
These shell commands may be arbitrary terminal programs.</description>
    </item>
    
    <item>
      <title>minor mode wrappers for shell commands</title>
      <link>https://mullikine.github.io/posts/minor-mode-wrappers-for-shell-commands/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/minor-mode-wrappers-for-shell-commands/</guid>
      <description>Related article Taming term-mode // Bodacious Blog  Summary Basically, I am creating a program-agnostic method of rebinding keys.
Given an arbitrary shell command, such as mc (midnight commander), I can create my own keybindings and macros for this program as if I was customising an emacs mode.
It&amp;rsquo;s all part of trying to control everything from emacs.
More specifically, this article is about creating buffer-local minor modes which are enabled only for specific commands started through term-mode.</description>
    </item>
    
    <item>
      <title>Nix language</title>
      <link>https://mullikine.github.io/posts/nix-language/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/nix-language/</guid>
      <description>Original article Nix Pills - basics-of-language Nix Expression Language - NixOS Wiki  1 2 3 4 5 6 7 8 9 10 11 12 13 14  Nix language Nix expression language A pure, lazy, functional language. Not a full-featured, general purpose language. Functions are “normal” values that can be passed around and manipulated in interesting ways. Its main job is to describe packages, compositions of packages, and the variability within packages.</description>
    </item>
    
    <item>
      <title>Review of &#39;Language Engineering; Harnessing the Power of Language (2004)&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-language-engineering-harnessing-the-power-of-language/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-language-engineering-harnessing-the-power-of-language/</guid>
      <description>This article is from 2004 or earlier.
It&amp;rsquo;s still an interesting insight into perspectives on Language Engineering from the early 2000s.
 Original article Language Engineering; Harnessing the Power of Language  The use of language is currently restricted.
Even between humans, understanding is usually limited to those groups who share a common language. †
 † &amp;hellip;let alone the language barrier with computers.  Language can be seen as much a barrier to communication as an aid.</description>
    </item>
    
    <item>
      <title>Review of &#39;Deep Learning breakthrough made by Rice University scientists | Ars Technica&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-deep-learning-breakthrough-made-by-rice-university-scientists-ars-technica/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-deep-learning-breakthrough-made-by-rice-university-scientists-ars-technica/</guid>
      <description>Original article Deep Learning breakthrough made by Rice University scientists | Ars Technica  Cloudy with a chance of neurons: The tools that make NNs work In an earlier DL article, we talked about how inference workloads—
the use of already-trained NNs to analyze data—can run on fairly cheap hardware, but running the training workload that the NN &amp;ldquo;learns&amp;rdquo; on is orders of magnitude more expensive.
In particular, the more potential inputs you have to an algorithm, the more out of control your scaling problem gets when analyzing its problem space.</description>
    </item>
    
    <item>
      <title>explainshell in zsh</title>
      <link>https://mullikine.github.io/posts/explainshell/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/explainshell/</guid>
      <description>Create the script 1 2 3 4 5 6 7 8 9 10 11 12 13  #!/bin/bash export TTY IFS= read -rd &amp;#39;&amp;#39; input &amp;lt; &amp;lt;(cat /dev/stdin) query=&amp;#34;$(p &amp;#34;$input&amp;#34; | urlencode)&amp;#34; url=&amp;#34;https://explainshell.com/explain?cmd=$query&amp;#34; # echo &amp;#34;$url&amp;#34; exec &amp;lt;&amp;amp;1 eww &amp;#34;$url&amp;#34;   Create the function 1 2 3 4 5 6 7 8 9  function zshexplainshell { tf_zle=&amp;#34;$(mktemp ${TMPDIR}/tf_zleXXXXXX || echo /dev/null)&amp;#34; print -R - &amp;#34;$PREBUFFER$BUFFER&amp;#34; &amp;gt; $tf_zle exec &amp;lt;&amp;amp;1 print -R - &amp;#34;$PREBUFFER$BUFFER&amp;#34; | explainshell print -Rz - &amp;#34;$(&amp;lt;$tf_zle)&amp;#34; zle send-break	# Force reload from the buffer stack }   Create the binding 1 2 3 4  # M-E autoload -z zshexplainshell zle -N zshexplainshell bindkey &amp;#34;\eE&amp;#34; zshexplainshell   Demonstration 1  x -sh &amp;#34;zcd .</description>
    </item>
    
    <item>
      <title>Review of &#39;BPF: A New Type of Software&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-bpf-a-new-type-of-software/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-bpf-a-new-type-of-software/</guid>
      <description>Original article BPF: A New Type of Software  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  KProbes A debugging mechanism for the Linux kernel which can also be used for monitoring events inside a production system.</description>
    </item>
    
    <item>
      <title>Creating FUSE filesystems in Python</title>
      <link>https://mullikine.github.io/posts/fuse-filesystem-in-python/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/fuse-filesystem-in-python/</guid>
      <description>Options Python2 Python 2 is obsolete, so no.
https://gist.github.com/wettenhj/7019100
python-fuse $MYGIT/libfuse/python-fuse
fusepy Python3+ pyfilesystem2 + fusefs pyfilesystem2 does NOT create a virtual filesystem on its own.
You need fusefs to mount a pyfilesystem2 extension.
  https://pypi.org/project/fusefs/
  https://github.com/mirekys/fusefs
  https://pypi.org/project/fs/2.4.11/
  https://github.com/PyFilesystem/pyfilesystem2
  pyfuse https://github.com/nrclark/pyfuse
Install pyfilesystem2 and fusefs 1 2  py i fs py i fusefs   Using fusefs 1  fusefs &amp;lt;url&amp;gt; &amp;lt;mountpoint&amp;gt;   url is the pyFilesystem2 resource to be mounted, and may contain placeholders for such values as username, host, password, etc.</description>
    </item>
    
    <item>
      <title>Show immediate directory in mode line</title>
      <link>https://mullikine.github.io/posts/emacs-show-immediate-directory-in-mode-line/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-show-immediate-directory-in-mode-line/</guid>
      <description>Finding the value to change in mode-line-format 1  (telephone-line-raw mode-line-buffer-identification t)   Changes 1 2 3 4 5 6 7 8 9 10  ;; This is the original value (setq mode-line-buffer-identification (propertized-buffer-identification &amp;#34;%12b&amp;#34;)) ;; This is the modification made (defun mode-line-buffer-file-parent-directory () (when buffer-file-name (concat &amp;#34;[&amp;#34; (file-name-nondirectory (directory-file-name (file-name-directory buffer-file-name))) &amp;#34;]&amp;#34;))) (setq-default mode-line-buffer-identification (cons (car mode-line-buffer-identification) &amp;#39;((:eval (mode-line-buffer-file-parent-directory)))))   spacemacs Spacemacs already had a mechanism for this so it is displayed twice on some files.</description>
    </item>
    
    <item>
      <title>Access logging for systemd service file command</title>
      <link>https://mullikine.github.io/posts/log-service-command/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/log-service-command/</guid>
      <description>Find a service file 1  le service | v   1  v /etc/systemd/system/multi-user.target.wants/ssh.service   It&amp;rsquo;s aliased to:
1  v /etc/systemd/system/sshd.service   nvi 1  v /etc/systemd/system/multi-user.target.wants/nvi.service   1  journalctl -u nvi   -- Logs begin at Thu 2019-12-12 21:51:53 NZDT, end at Fri 2019-12-13 18:25:01 NZDT. -- Dec 12 21:51:54 morgan systemd[1]: Starting Recover nvi edit sessions.... Dec 12 21:51:54 morgan recover[1085]: Recovering nvi editor sessions.</description>
    </item>
    
    <item>
      <title>NixOS</title>
      <link>https://mullikine.github.io/posts/nixos/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/nixos/</guid>
      <description>Original article https://nixos.org/nixos/about.html  Nix package manager 1  which nix   /home/shane/.nix-profile/bin/nix Basic package management https://nixos.org/nix/manual/#ch-basic-package-mgmt
1  ci nix-env -qa | nnf &amp;#34;nix-env -qa&amp;#34; | xa -l head -n 10   /home/shane/notes/vars/nix-env-qa 0x0-2018-06-24 1password-0.5.6-003 2048-in-terminal-2017-11-29 20kly-1.4 2bwm-0.2 2fa-1.1.0 389-ds-base-1.3.9.1 3dpong-0.5 4store-1.1.6 8086tiny-1.25 1  ncf nix-env -qas | xa -l head -n 10   /home/shane/notes/vars/nix-env --S 0x0-2018-06-24 --S 2048-in-terminal-2017-11-29 --S 20kly-1.4 --S 2bwm-0.2 --S 2fa-1.</description>
    </item>
    
    <item>
      <title>Using comint for persistent history of shell commands</title>
      <link>https://mullikine.github.io/posts/using-comint-for-persistent-history-of-shell-commands/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-comint-for-persistent-history-of-shell-commands/</guid>
      <description>Relevent article https://emacs.stackexchange.com/questions/9925/persistent-shell-command-history  Write the elisp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  (defun comint-quick (cmd) (interactive) (let* ((slug (slugify cmd)) (buf (make-comint slug (nsfa cmd)))) (with-current-buffer buf (switch-to-buffer buf) (turn-on-comint-history (concat &amp;#34;/home/shane/notes/programs/comint/history/&amp;#34; slug))))) (require &amp;#39;exec-path-from-shell) ;; comint persistent history ;; https://emacs.</description>
    </item>
    
    <item>
      <title>Keyboard macros in GNU Ranger</title>
      <link>https://mullikine.github.io/posts/macros-in-gnu-ranger/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/macros-in-gnu-ranger/</guid>
      <description>Ranger does not have a build-in keyboard macro mechanism, but you can use tmux for this.
Create the tm-send-slow command 1 2 3 4 5 6 7 8  #!/bin/bash export TTY string=&amp;#34;$1&amp;#34; grep -o . &amp;lt;&amp;lt;&amp;lt; &amp;#34;$string&amp;#34; | while IFS=$&amp;#39;\n&amp;#39; read -r char; do tmux send -l &amp;#34;$char&amp;#34; done   Create the mapping 1  map F. shell -f tm-send-slow FFf   Demonstration</description>
    </item>
    
    <item>
      <title>Browsing sqlite3 databases with edbi for emacs</title>
      <link>https://mullikine.github.io/posts/browsing-databases-with-emacs-edbi/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/browsing-databases-with-emacs-edbi/</guid>
      <description>Set up edbi 1 2  # for emacs edbi cpan install DBD::SQLite   Create the scripts select-database 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } is_tty istty=$?</description>
    </item>
    
    <item>
      <title>Parsing with parsec</title>
      <link>https://mullikine.github.io/posts/parsing-with-parsec/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/parsing-with-parsec/</guid>
      <description> Source material Parsing using Parsec: a practical example [ CODE ] An introduction to parsing text in Haskell with Parsec - Nick.Chung - - [ CODE ] parsec: Monadic parser combinators Parsec - HaskellWiki  </description>
    </item>
    
    <item>
      <title>Review of &#39;Indexing Billions of Text Vectors&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-indexing-billions-of-text-vectors/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-indexing-billions-of-text-vectors/</guid>
      <description>A New Search Engine  Original article A New Search Engine  Building a search engine from scratch  Original article Building a search engine from scratch  Indexing Billions of Text Vectors  Original article Indexing Billions of Text Vectors  A frequently occurring IR problem Finding similar pieces of text.
A query in this context can either be a user- generated one, (i.e. the piece of text that a user enters into a search engine), or a synthetic one generated by us.</description>
    </item>
    
    <item>
      <title>Browsing git repos</title>
      <link>https://mullikine.github.io/posts/browsing-git-repos/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/browsing-git-repos/</guid>
      <description>1  browse-git-repos</description>
    </item>
    
    <item>
      <title>DAP mode for emacs</title>
      <link>https://mullikine.github.io/posts/dap-mode/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dap-mode/</guid>
      <description>Related reading Setting up LSP with emacs (Go, Java, Python, Rust, C++, Haskell) // Bodacious Blog Official page for Debug Adapter Protocol Python environment // Bodacious Blog  DAP mode is like LSP for debugging.
bindings 1 2 3  (define-key my-mode-map (kbd &amp;#34;M-m a b&amp;#34;) #&amp;#39;dap-hydra/body) (define-key my-mode-map (kbd &amp;#34;M-m a a&amp;#34;) #&amp;#39;dap-ui-breakpoints) (define-key prog-mode-map (kbd &amp;#34;M-\&amp;#34;&amp;#34;) &amp;#39;handle-debug)   State of languages with DAP in my own environment    Language DAP Working LSP Working Fallback working Current user experience     Python ✓ ✓ ✓ pdb Good   Java ✓ ✓ ✓ eclim Good    Java Here is an example of me creating a breakpoint with a condition and running the debugger.</description>
    </item>
    
    <item>
      <title>Review of &#39;Haskell for all: Use Haskell for shell scripting&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-haskell-for-all-use-haskell-for-shell-scripting-/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-haskell-for-all-use-haskell-for-shell-scripting-/</guid>
      <description>Original article Haskell for all: Use Haskell for shell scripting   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #!/usr/bin/env runhaskell {-# LANGUAGE OverloadedStrings #-} import Turtle main = do cd &amp;#34;/tmp&amp;#34; mkdir &amp;#34;test&amp;#34; output &amp;#34;test/foo&amp;#34; &amp;#34;Hello, world!&amp;#34; -- Write &amp;#34;Hello, world!&amp;#34; to &amp;#34;test/foo&amp;#34; stdout (input &amp;#34;test/foo&amp;#34;) -- Stream &amp;#34;test/foo&amp;#34; to stdout rm &amp;#34;test/foo&amp;#34; rmdir &amp;#34;test&amp;#34; sleep 1 die &amp;#34;Urk!&amp;#34;   Hello, world!</description>
    </item>
    
    <item>
      <title>Controlled Text Generation</title>
      <link>https://mullikine.github.io/posts/controlled-text-generation/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/controlled-text-generation/</guid>
      <description>Original article https://eng.uber.com/pplm/ https://github.com/uber-research/PPLM https://github.com/huggingface/transformers/blob/master/examples/pplm/README.md Uber AI Plug and Play Language Model  Controlling Text Generation with Plug and Play Language Model (PPLM) PPLM builds on top of other large transformer- based generative models (like GPT-2), where it enables finer-grained control of attributes of the generated language (e.g. gradually switching topic 🐱 or sentiment 😃).
This controlled LG method consists of plugging in simple bag-of-words or one-layer classifiers as attribute controllers, and making updates in the activation space, without changing any model parameters.</description>
    </item>
    
    <item>
      <title>Creating Infinitely Generated Text Adventures with DL LMs</title>
      <link>https://mullikine.github.io/posts/infinitely-generated-text-adventures/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/infinitely-generated-text-adventures/</guid>
      <description>Original article AI Dungeon 2: Creating Infinitely Generated Text Adventures with Deep Learning Language Models - Perception, Control, Cognition  For each action you type the model is fed the context sentence as well as the past N action- result pairs in its memory to generate the result.
We found N=8 to be a good amount of memory to feed the model.
Other times the model has difficulty keeping track of who is who, especially in dialogue.</description>
    </item>
    
    <item>
      <title>Setting up LSP with emacs (Go, Java, Python, Rust, C&#43;&#43;, Haskell, JS, TS, Ruby…)</title>
      <link>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description>Guides used https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/ https://github.com/emacs-lsp/lsp-java  1 2 3 4 5  Debug Adaptor Protocol DAP The LSP of debugging. https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website    State of languages with LSP in my own environment    Language LSP Working Fallback working Current user experience TabNine enabled REPL / Playground DAP (debug) Working Static analysis Complaints Custom LSP improvements     Go ✓ ✓ Amazing ✓ ✓  ✓ Go toolchain changes too quickly    Python ✓ ✓ Amazing ✓ ✓ ✓ ✓     Racket ✓ ✓ racket-mode Amazing  ✓  ✓     Java ✓ ✓ eclim Good ✓ ✓ (default) ✓ ✓ A little slow.</description>
    </item>
    
    <item>
      <title>Chatbot with Rasa</title>
      <link>https://mullikine.github.io/posts/chatbot-with-rasa/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/chatbot-with-rasa/</guid>
      <description>Original article A Chatbot from Future: Building an end-to-end Conversational Assistant with Rasa  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  intent vs goal Some chatbot tools use the word intent to refer to the user goal. This is confusing because only some messages tell you what a user’s goal is. dialogue elements - highest level: user goals - middle level: dialogue elements - lowest level: intents, entities, actions, slots, and templates.</description>
    </item>
    
    <item>
      <title>Make interactive functions with history</title>
      <link>https://mullikine.github.io/posts/emacs-make-interactive-function-with-history-from-shell-script/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-make-interactive-function-with-history-from-shell-script/</guid>
      <description>Make a macro for creating interactive functions from shell commands Interactively read a string which is the parameter.
Use the macro as a snippet.
1 2 3 4 5 6 7 8 9 10  (defmacro defshellinteractive (&amp;amp;rest body) (let ((sf (str2sym (concat &amp;#34;sh/t/&amp;#34; (slugify (list2string body) t)))) (sfhist (str2sym (concat &amp;#34;sh/t/&amp;#34; (slugify (list2string body) t) &amp;#34;-history&amp;#34;))) (cmd (mapconcat &amp;#39;str body &amp;#34; &amp;#34;))) `(defun ,sf (args) (interactive (list (read-string &amp;#34;args:&amp;#34; &amp;#34;&amp;#34; &amp;#39;,sfhist))) ;; (eval `(term-nsfa (concat ,,cmd &amp;#34; &amp;#34; ,args))) (eval `(sph (concat ,,cmd &amp;#34; &amp;#34; ,args)))))) (defshellinteractive gist-search)   Demonstration</description>
    </item>
    
    <item>
      <title>Named Entity Recognition</title>
      <link>https://mullikine.github.io/posts/named-entity-recognition/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/named-entity-recognition/</guid>
      <description>Original article Named Entity Recognition with NLTK and SpaCy - Towards Data Science Code https://github.com/susanli2016/NLP-with-Python/blob/master/NER%5FNLTK%5FSpacy.ipynb My fork https://github.com/mullikine/NLP-with-Python/blob/master/NER%5FNLTK%5FSpacy.py Related articles Part of Speech Labels // Bodacious Blog  1  sp $MYGIT/susanli2016/NLP-with-Python/NER_NLTK_Spacy.py   Missing libraries 1 2 3 4 5  Resource averaged_perceptron_tagger not found. Please use the NLTK Downloader to obtain the resource: &amp;gt;&amp;gt;&amp;gt; import nltk &amp;gt;&amp;gt;&amp;gt; nltk.download(&amp;#39;averaged_perceptron_tagger&amp;#39;)   1 2 3  import nltk nltk.download(&amp;#39;averaged_perceptron_tagger&amp;#39;) # and then type &amp;#39;d&amp;#39; for download and install &amp;#39;punkt&amp;#39;   I had to do it again for this 1 2  import nltk nltk.</description>
    </item>
    
    <item>
      <title>Part of Speech Labels</title>
      <link>https://mullikine.github.io/posts/part-of-speech-labels/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/part-of-speech-labels/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  conjunction CONJ CNJ A part of speech that connects words, phrases, or clauses that are called the conjuncts of the conjunctions. subordinating conjunction Preposition IN A conjunction that introduces a subordinating clause, e.g. although, because. Coordinating conjunction CC A conjunction placed between words, phrases, clauses, or sentences of equal rank, e.</description>
    </item>
    
    <item>
      <title>Searching for gists</title>
      <link>https://mullikine.github.io/posts/searching-for-gists/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/searching-for-gists/</guid>
      <description>Create a gist-search script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } gr gist &amp;#34;$@&amp;#34; | grep //gist.github.com/ | urldecode | scrape &amp;#34;.*gist.github.com/[^?/]+&amp;#34; | sort | uniq | scrape &amp;#34;[^/]+$&amp;#34; | { if is_tty; then fzf | xa gist-list else cat fi }   Demonstration</description>
    </item>
    
    <item>
      <title>spaCy</title>
      <link>https://mullikine.github.io/posts/spacy/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/spacy/</guid>
      <description>Original gist https://gist.github.com/aparrish/697b7f56ac28f4e59af77a66ac573b8f  After loading into spacy Right off the bat, the spaCy library gives us access to a number of interesting units of text:
   code description     doc.sents sentences   doc words   doc.ents named entitites   doc.noun_chunks nouns in the text plus surrounding matter like adjectives and articles    1 2 3 4  sentences = list(doc.</description>
    </item>
    
    <item>
      <title>BERT</title>
      <link>https://mullikine.github.io/posts/bert/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/bert/</guid>
      <description> Original article BERT Explained: A Complete Guide with Theory and Tutorial - Towards Machine Learning  </description>
    </item>
    
    <item>
      <title>Extending gist-list to copy the URL, browse and download gists</title>
      <link>https://mullikine.github.io/posts/extending-gist-list/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-gist-list/</guid>
      <description>Using gist-list 1  x -sh &amp;#34;gist-list erantapaa&amp;#34; -e &amp;#34;Id&amp;#34; -c s -s non-blocking -c m -a   1  + ebbcd56... 10/20/15 20:57 public non-blocking I/O examples in Haskell   
Sometimes it doesn&amp;rsquo;t open  error After 0 kbd macro iterations: run-hooks: Cannot open load file: No such file or directory, drupal-mode  Extracting tabulated-list-id and forming a URL is the solution.
 solution tabulated-list-id &amp;quot;16b1a208e2725e7d9487dbb648c65034&amp;quot; This is a text property.</description>
    </item>
    
    <item>
      <title>Finding similar haskell functions from emacs and downloading their packages: Hoogle, intero, fzf</title>
      <link>https://mullikine.github.io/posts/hoogle-fuzzy-type-search-from-intero-emacs/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/hoogle-fuzzy-type-search-from-intero-emacs/</guid>
      <description>Demonstration 
Make these functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  (defun my-intero-get-type () (interactive) (my-enable-intero) (let ((out (sh-notty &amp;#34;sed -z -e \&amp;#34;s/\\n/ /g\&amp;#34; -e \&amp;#34;s/ \\+/ /g\&amp;#34;&amp;#34; (sed &amp;#34;s/^[^:]\\+ :: //&amp;#34; (intero-get-type-at (beginning-of-thing &amp;#39;sexp) (end-of-thing &amp;#39;sexp)))))) (if (called-interactively-p &amp;#39;any) (my/copy out) out))) (defun hs-download-packages-with-function-type (type) (interactive (list (my-intero-get-type))) ;; (term-nsfa &amp;#34;hsqf pg&amp;#34;) ;; (e/sph-zsh &amp;#34;t new \&amp;#34;rtcmd hs-type-declarative-search-fzf String\&amp;#34;&amp;#34;) (sph (concat &amp;#34;t new &amp;#34; (q &amp;#34;hs-download-packages-with-function-type &amp;#34; (q type))))) (defun hs-tds-fzf (type) (interactive (list (my-intero-get-type))) ;; (term-nsfa &amp;#34;hsqf pg&amp;#34;) ;; (e/sph-zsh &amp;#34;t new \&amp;#34;rtcmd hs-type-declarative-search-fzf String\&amp;#34;&amp;#34;) (sph (concat &amp;#34;t new &amp;#34; (q &amp;#34;rtcmd hs-type-declarative-search-fzf &amp;#34; (q type))))) (defun my/type-search-thing-at-point (&amp;amp;optional immediate winfunc) &amp;#34;Show doc for thing under pointl.</description>
    </item>
    
    <item>
      <title>Exploring Hoogle</title>
      <link>https://mullikine.github.io/posts/exploring-hoogle/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/exploring-hoogle/</guid>
      <description>Prereading Real-time interactive documentation lookup for haskell type-declarative search // Bodacious Blog GHCi and Haskell code intermixed in babel // Bodacious Blog  Finding package from the module name / an import statement Demonstration 
I created these two functions 1 2 3 4 5 6 7 8 9  hsImportToPackage :: String -&amp;gt; IO String hsImportToPackage modulename = do (_, Just hout, _, _) &amp;lt;- createProcess (proc &amp;#34;hs-import-to-package&amp;#34; [modulename]){ std_out = CreatePipe } hGetContents hout printIOString :: IO String -&amp;gt; IO () printIOString a = do str &amp;lt;- a putStrLn str   1  ghciol &amp;#34;:i fmap&amp;#34;   class Functor (f :: * -&amp;gt; *) where fmap :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b .</description>
    </item>
    
    <item>
      <title>introhaskell</title>
      <link>https://mullikine.github.io/posts/introhaskell/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/introhaskell/</guid>
      <description>Original article introhaskell  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  type variable Example: Given the type: a -&amp;gt; a -&amp;gt; a &amp;#39;a&amp;#39; is a type variable. ewwlinks +/&amp;#34;Type Variables&amp;#34; &amp;#34;https://cs.lmu.edu/~ray/notes/introhaskell/&amp;#34; We know [Char] and [Float] are two different types. So how do we speak about, or write functions that work on, lists of ANY type? Or tuples of any size, or any component type?</description>
    </item>
    
    <item>
      <title>click, a CLI library for python &#43; extending babel a bit more</title>
      <link>https://mullikine.github.io/posts/python-click/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-click/</guid>
      <description>Do I really need to learn yet another CLI library?
There are plenty of them.
https://codeburst.io/building-beautiful-command-line-interfaces-with-python-26c7e1bb54df
Click is actually very simple and straight forward.
It uses decorations to get things done.
Summary https://click.palletsprojects.com/en/7.x/
Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary.
It’s the “Command Line Interface Creation Kit”.
It’s highly configurable but comes with sensible defaults out of the box.</description>
    </item>
    
    <item>
      <title>More haskell syntax and babel improvements. Notes 29.11.19</title>
      <link>https://mullikine.github.io/posts/haskell-notes-29.11.19/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-notes-29.11.19/</guid>
      <description>stdin in babel. I can now do literate programming with pipeline scripts 1 2  #+BEGIN_SRC haskell-n :stdin &amp;#34;echo &amp;#39;h/*sup*/i&amp;#39;&amp;#34; :interpreter runhaskell :async :results verbatim code #+END_SRC   Changes made to babel. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  diff --git a/config/my-babel.</description>
    </item>
    
    <item>
      <title>Overview of Flask, Jinja2, templating engine</title>
      <link>https://mullikine.github.io/posts/jinja2/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/jinja2/</guid>
      <description>Original reading Jinja2 Explained in 5 Minutes! - codeburst  Demonstration working with a simple flask app 
Flask Example apps  https://github.com/greyli/flask-examples (4 months old) https://github.com/miguelgrinberg/flask-examples (6 years old)  greyli/flask-examples Hello world
$MYGIT/greyli/flask-examples/hello/app.py
https://github.com/greyli/flask-examples/blob/master/hello/app.py
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  # -*- coding: utf-8 -*- &amp;#34;&amp;#34;&amp;#34; :author: Grey Li (李辉) :url: http://greyli.</description>
    </item>
    
    <item>
      <title>A makeshift template processor in bash</title>
      <link>https://mullikine.github.io/posts/makeshift-template-processor/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/makeshift-template-processor/</guid>
      <description>1  echo -n &amp;#34;Hi &amp;lt;name&amp;gt;. How are you?&amp;#34; | tl -name Shane   This is similar to python f-strings 1 2 3  name = &amp;#34;Eric&amp;#34; age = 74 print(f&amp;#34;Hello, {name}. You are {age}.&amp;#34;)   Hello, Eric. You are 74. In fact, I should make an f-strings-based utility.
Build the replace-substring script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!</description>
    </item>
    
    <item>
      <title>Monad transformers</title>
      <link>https://mullikine.github.io/posts/monad-transformers/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/monad-transformers/</guid>
      <description>Original resource https://wiki.haskell.org/Meta-tutorial  grok haskell monad transformers  Original article http://blog.sigfpe.com/2006/05/grok-haskell-monad-transformers.html  State monad 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import Control.Monad.Identity import Control.Monad.State test1 = do a &amp;lt;- get modify (+1) b &amp;lt;- get return (a,b) test2 = do a &amp;lt;- get modify (++&amp;#34;1&amp;#34;) b &amp;lt;- get return (a,b) go1 = evalState test1 0 go2 = evalState test2 &amp;#34;0&amp;#34; :t go1 go1 :t go2 go2 &amp;#34;**************&amp;#34; :t get :i get &amp;#34;**************&amp;#34; :t modify :i modify &amp;#34;**************&amp;#34; :t evalState :i evalState   go1 :: (Integer, Integer) (0,1) go2 :: ([Char], [Char]) (&amp;#34;0&amp;#34;,&amp;#34;01&amp;#34;) &amp;#34;**************&amp;#34; get :: MonadState s m =&amp;gt; m s class Monad m =&amp;gt; MonadState s (m :: * -&amp;gt; *) | m -&amp;gt; s where get :: m s .</description>
    </item>
    
    <item>
      <title>Real-time interactive documentation lookup for haskell type-declarative search</title>
      <link>https://mullikine.github.io/posts/doc-lookup-for-haskell-type-declarative-search/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/doc-lookup-for-haskell-type-declarative-search/</guid>
      <description>I make a tool for real-time fuzzy documentation lookup for haskell type- declarative search.
Demonstration; the final result 
Create the script hs-type-declarative-search This uses stack.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  #!</description>
    </item>
    
    <item>
      <title>Refactoring tools for emacs</title>
      <link>https://mullikine.github.io/posts/refactoring-tools-emacs/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/refactoring-tools-emacs/</guid>
      <description>Attrap: Emacs mode to fix the flycheck error at point https://github.com/jyp/attrap
1 2 3  (use-package attrap :ensure t :bind ((&amp;#34;C-x /&amp;#34; . attrap-attrap))) ;; use any binding of your choice   A bit too early for use I tried on a missing a main function type definition.
It did not have the necessary fixers.
1  progn: No fixers for flycheck-checker haskell-stack-ghc</description>
    </item>
    
    <item>
      <title>AI-assisted coding tools for emacs</title>
      <link>https://mullikine.github.io/posts/ai-assisted-coding-tools-emacs/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/ai-assisted-coding-tools-emacs/</guid>
      <description>language-detection Emacs Lisp library that automatically detects the programming language in a buffer or string. Implemented as a random forest classifier, trained in scikit-learn and deployed to Emacs Lisp.
https://github.com/andreasjansson/language-detection.el
Example of usage 1 2 3 4 5 6 7 8 9  (defun new-buffer-from-selection-detect-language () &amp;#34;Creates a new buffer from the selection and tries to set the mode&amp;#34; (interactive) (if (selected-p) (let* ((b (new-buffer-from-string (selection)))) (with-current-buffer b (switch-to-buffer b) (guess-major-mode))))) (defalias &amp;#39;detect-language-set-mode &amp;#39;guess-major-mode)   1 2  ;; This works great (my/truly-selective-binding &amp;#34;Y&amp;#34; #&amp;#39;new-buffer-from-selection-detect-language)   expanded the macro</description>
    </item>
    
    <item>
      <title>Generating combinations with zsh and common lisp</title>
      <link>https://mullikine.github.io/posts/combinations-in-common-lisp/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/combinations-in-common-lisp/</guid>
      <description>I will create a script named co that can be used to generate shell commands from lists, conveniently.
Demonstration 
Build the script combinations.cldescription>
    </item>
    
    <item>
      <title>Generating help for bash scripts</title>
      <link>https://mullikine.github.io/posts/help-for-bash-scripts/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/help-for-bash-scripts/</guid>
      <description>The point of creating the help command in this way is that you may enter you command, add a -h, and help will be displayed for the parameters entered.
When ready to run the command properly, you simply re-run without the -h.
Help function, scrapes the script for help arguments and presents them 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  help() { # Run help for argument # For each argument, gen the full argument line while [ $# -gt 0 ]; do opt=&amp;#34;$1&amp;#34;; case &amp;#34;$opt&amp;#34; in &amp;#34;&amp;#34;) { shift; }; ;; -*) { cat &amp;#34;$0&amp;#34; | sed -n &amp;#34;/^\(\s\+$opt\b\|.</description>
    </item>
    
    <item>
      <title>ClassyPrelude – Alternative prelude for Haskell</title>
      <link>https://mullikine.github.io/posts/haskell-classy-prelude/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-classy-prelude/</guid>
      <description>Sources https://hackage.haskell.org/package/classy-prelude  New stuff  Text  Lots of things use Text instead of String. Note that show returns a String. To get back Text, use tshow.   other functionality  exceptions package system-filepath convenience functions whenM, unlessM hashNub and ordNub (efficient nub implementations).    Automate ClassyPrelude ghci repl extend the ghci-alternative-prelude script. Symlink as classy-prelude 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #!</description>
    </item>
    
    <item>
      <title>Future of emacs</title>
      <link>https://mullikine.github.io/posts/future-of-emacs/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/future-of-emacs/</guid>
      <description>This doesn&amp;rsquo;t actually represent my own view on the future of emacs.
I do agree about the current extension language being a major shortcoming and I see emacs lisp as not being a declarative programming language as being the main existential threat.
 References Emacs: The Editor for the Next Forty Years - Perry E. Metzger - EmacsConf 2019  Shortcomings of emacs  Extension language still mediocre. Implementation language is terrible.</description>
    </item>
    
    <item>
      <title>Haskell functions</title>
      <link>https://mullikine.github.io/posts/haskell-functions/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-functions/</guid>
      <description>name a lambda expression (if you wanted to for some reason) 1  addOne = \x -&amp;gt; x + 1   LYAH modules http://learnyouahaskell.com/modules
intersperse Takes an element and a list and then puts that element in between each pair of elements in the list.
1 2 3  :m Data.List intersperse &amp;#39;.&amp;#39; &amp;#34;MONKEY&amp;#34; intersperse 0 [1,2,3,4,5,6]   &amp;#34;M.O.N.K.E.Y&amp;#34; [1,0,2,0,3,0,4,0,5,0,6] intercalate Takes a list of lists and a list.</description>
    </item>
    
    <item>
      <title>GHCi and Haskell code intermixed in babel</title>
      <link>https://mullikine.github.io/posts/babel-ghci-and-haskell/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/babel-ghci-and-haskell/</guid>
      <description>Demonstration Running ghcih inside neovim inside emacs 
Create the ghcih script 1 2 3 4 5 6  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null xs ghci -H &amp;#34;$@&amp;#34;   Create the ghci case in xs When -H is provided, it will split the input code by assuming that the initial part is a haskell module and anything from the first ghci : command and onwards is ghci code.</description>
    </item>
    
    <item>
      <title>Relude – Alternative prelude for Haskell</title>
      <link>https://mullikine.github.io/posts/haskell-relude/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-relude/</guid>
      <description>Sources https://hackage.haskell.org/package/relude  Difference from Prelude Main differences from Prelude can be grouped into the following categories:
 Changed behavior of common functions  head, tail, last, init work with NonEmpty a instead of [a]. lines, unlines, words, unwords work with Text instead of String. show is polymorphic over return type. Functions sum and product are strict now, which makes them more efficient. You can&amp;rsquo;t call elem and notElem functions over Set and HashSet.</description>
    </item>
    
    <item>
      <title>Deconstructing IPTables-Metalanguage</title>
      <link>https://mullikine.github.io/posts/deconstructing-iptables-metalanguage/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/deconstructing-iptables-metalanguage/</guid>
      <description>Main.hs 1 2 3 4 5 6 7  ./Main.hs:4:import Test.Framework (defaultMain, testGroup) ./Main.hs:6:import Test.Framework.Providers.QuickCheck2 (testProperty) ./Main.hs:11:import Text.ParserCombinators.Parsec ./Main.hs:13:import Text.IptablesMetalanguage.Types ./Main.hs:14:import Text.IptablesMetalanguage.Parser ./Main.hs:15:import Text.IptablesMetalanguage.Print ./Main.hs:17:import GHC.Word   Test.Framework http://hackage.haskell.org/package/HTF
Tutorial http://hackage.haskell.org/package/HTF-0.14.0.0/docs/Test-Framework-Tutorial.html
defaultMain testGroup Parser.hs 1 2 3 4 5 6 7 8  ./src/Text/IptablesMetalanguage/Parser.hs:4:import Text.IptablesMetalanguage.Types ./src/Text/IptablesMetalanguage/Parser.hs:5:import Control.Applicative ((&amp;lt;$&amp;gt;)) ./src/Text/IptablesMetalanguage/Parser.hs:6:import Control.Monad.Error ./src/Text/IptablesMetalanguage/Parser.hs:7:import Data.Bits ./src/Text/IptablesMetalanguage/Parser.hs:8:import Data.Set (fromList) ./src/Text/IptablesMetalanguage/Parser.hs:9:import Data.Word ./src/Text/IptablesMetalanguage/Parser.hs:10:import Safe ./src/Text/IptablesMetalanguage/Parser.hs:11:import Text.ParserCombinators.Parsec   Types.hs 1 2  ./src/Text/IptablesMetalanguage/Types.hs:4:import Data.Set .</description>
    </item>
    
    <item>
      <title>Notes on JSON Parser From Scratch in Haskell</title>
      <link>https://mullikine.github.io/posts/json-parser-haskell/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/json-parser-haskell/</guid>
      <description>Original video JSON Parser From Scratch in Haskell  Concepts taught    Concept     hole   newtype   Traversable   Functor   Applicative   Alternative   Record syntax    Glossary 1 2 3 4 5 6 7 8 9 10 11  type vs data vs newtype The &amp;#39;data&amp;#39; keyword allows you to introduce a new algebraic data type, while &amp;#39;type&amp;#39; just makes a type synonym.</description>
    </item>
    
    <item>
      <title>Reading 25.11.19</title>
      <link>https://mullikine.github.io/posts/reading-25.11.19/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-25.11.19/</guid>
      <description>Language Models as Knowledge Bases?  Original article https://arxiv.org/abs/1909.01066 Code https://github.com/facebookresearch/LAMA  1 2 3 4 5 6 7 8 9 10 11  Cloze statements An excellent method to encourage speech production in children. A cloze statement involves saying a familiar phrase and leaving out a word, then waiting for your child to fill in the blank. Familiar nursery rhymes, songs, and poems are perfect for this activity.   Recent progress in pretraining LMs on large textual corpora led to a surge of improvements for downstream NLP tasks.</description>
    </item>
    
    <item>
      <title>latex, math and emacs</title>
      <link>https://mullikine.github.io/posts/latex-math/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/latex-math/</guid>
      <description>n choose k \({n \choose k} = _{n}^{k}\textrm{C}= \frac{n!}{k!(n-k)!}\)
https://byjus.com/n-choose-k-formula/
\((x+y)^n = \sum_{k=0}^n %{n \choose k} x^{n - k} y^k\)
\begin{equation} \label{eq:1} C = W\log_{2} (1+\mathrm{SNR}) \end{equation}
binomial theorem In elementary algebra, the binomial theorem describes the algebraic expansion of powers of a binomial.
\((a+b)^n=\sum_{k=0}^n{n\choose k}a^{n-k}b^k\)</description>
    </item>
    
    <item>
      <title>Shortcomings of classical search engines</title>
      <link>https://mullikine.github.io/posts/shortcomings-of-search-engines/</link>
      <pubDate>Fri, 22 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/shortcomings-of-search-engines/</guid>
      <description>https://arxiv.org/pdf/1710.05649.pdf
Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  relevance feedback Feature of some IR systems. Take the results that are initially returned from a given query, to gather user feedback, and to use information about whether or not those results are relevant to perform a new query. Three types of feedback: - explicit feedback, - implicit feedback, and - blind feedback.</description>
    </item>
    
    <item>
      <title>List IPs with SSH port on the current network</title>
      <link>https://mullikine.github.io/posts/list-ips-for-current-network/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/list-ips-for-current-network/</guid>
      <description>While demonstrating for the DCBC School of CS, somebody often asks me what their IP address is for their Raspberry Pi.
I will run a script to scan for IP addresses with an SSH port and then log into the RBP one by one with the default password until I find one that has their files.
Recap: CIDR Glossary 1 2 3 4 5 6 7 8 9  Classless inter-domain routing CIDR A set of Internet protocol (IP) standards that is used to create unique identifiers for networks and individual devices.</description>
    </item>
    
    <item>
      <title>Generate emacs functions from CLI commands</title>
      <link>https://mullikine.github.io/posts/generate-emacs-functions-from-cli-commands/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/generate-emacs-functions-from-cli-commands/</guid>
      <description>Prerequisite reading Didactic emacs-lisp macro example (ie. a tutorial) // Bodacious Blog  Define the commands 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  (defmacro defshellfilter (&amp;amp;rest body) &amp;#34;Define a new string filter function based on a shell command&amp;#34; (let* (;; (s (str2sym (concat &amp;#34;sh/&amp;#34; (sym2str (first body))))) (base (slugify (list2string body) t)) (sm (str2sym (concat &amp;#34;sh/m/&amp;#34; base))) (sf (str2sym (concat &amp;#34;sh/&amp;#34; base))) (sfptw (str2sym (concat &amp;#34;sh/ptw/&amp;#34; base)))) `(progn (defmacro ,sm (&amp;amp;rest body) `(bp ,@&amp;#39;,body ,@body)) (defun ,sf (&amp;amp;rest body) (eval `(bp ,@&amp;#39;,body ,@body))) ;; This last one is the thing the function returns.</description>
    </item>
    
    <item>
      <title>Overview of my glossary</title>
      <link>https://mullikine.github.io/posts/glossary/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/glossary/</guid>
      <description>Click here to see my glossary
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113  &amp;#34;pathology&amp;#34; -&amp;gt; &amp;#34;oncology&amp;#34; &amp;#34;formal-languages&amp;#34; -&amp;gt; &amp;#34;programming-languages&amp;#34; &amp;#34;formal-languages&amp;#34; -&amp;gt; &amp;#34;functional-programming-fp&amp;#34; &amp;#34;formal-languages&amp;#34; -&amp;gt; &amp;#34;markup-languages&amp;#34; &amp;#34;functional-programming-fp&amp;#34; -&amp;gt; &amp;#34;lambda-calculus&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;compilers&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;haskell&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;golang&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;javascript&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;problog&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;racket&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;rust&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;tcl&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;programming-idioms&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;prolog&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;purescript&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;python&amp;#34; &amp;#34;python&amp;#34; -&amp;gt; &amp;#34;numpy&amp;#34; &amp;#34;python&amp;#34; -&amp;gt; &amp;#34;celery&amp;#34; &amp;#34;python&amp;#34; -&amp;gt; &amp;#34;spacy&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;r-lang&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;perl&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;lisp&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;lisp-based-languages&amp;#34; &amp;#34;lisp-based-languages&amp;#34; -&amp;gt; &amp;#34;lisp&amp;#34; &amp;#34;lisp-based-languages&amp;#34; -&amp;gt; &amp;#34;racket&amp;#34; &amp;#34;lisp-based-languages&amp;#34; -&amp;gt; &amp;#34;emacs-lisp&amp;#34; &amp;#34;functional-programming-fp&amp;#34; -&amp;gt; &amp;#34;haskell&amp;#34; &amp;#34;compilers&amp;#34; -&amp;gt; &amp;#34;parsers&amp;#34; &amp;#34;parsers&amp;#34; -&amp;gt; &amp;#34;github-semantic&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;oncology&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;psychology&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;ontology&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;math&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;computer-science&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;electricity&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;information-theory&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;data-science&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;architecture&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;data-mining&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;sciences&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;philosophy&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;genetics&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;neuroscience&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;pathology&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;physics&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;phylogenetics&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;astrophysics&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;biochemistry&amp;#34; &amp;#34;data-science&amp;#34; -&amp;gt; &amp;#34;information-theory&amp;#34; &amp;#34;data-science&amp;#34; -&amp;gt; &amp;#34;data-mining&amp;#34; &amp;#34;data-science&amp;#34; -&amp;gt; &amp;#34;numpy&amp;#34; &amp;#34;cryptography&amp;#34; -&amp;gt; &amp;#34;information-theory&amp;#34; &amp;#34;computer-science&amp;#34; -&amp;gt; &amp;#34;random-number-generation&amp;#34; &amp;#34;computer-science&amp;#34; -&amp;gt; &amp;#34;data-science&amp;#34; &amp;#34;computer-science&amp;#34; -&amp;gt; &amp;#34;information-retrieval&amp;#34; &amp;#34;computer-science&amp;#34; -&amp;gt; hardware &amp;#34;computer-science&amp;#34; -&amp;gt; &amp;#34;cryptography&amp;#34; hardware -&amp;gt; &amp;#34;brain-computer-interface-bci&amp;#34; &amp;#34;neuroscience&amp;#34; -&amp;gt; &amp;#34;brain-computer-interface-bci&amp;#34; &amp;#34;information-retrieval&amp;#34; -&amp;gt; &amp;#34;preprocessing&amp;#34; &amp;#34;information-retrieval&amp;#34; -&amp;gt; &amp;#34;information-theory&amp;#34; &amp;#34;information-retrieval&amp;#34; -&amp;gt; &amp;#34;spark&amp;#34; &amp;#34;information-retrieval&amp;#34; -&amp;gt; &amp;#34;neural-ir&amp;#34; &amp;#34;computer-science&amp;#34; -&amp;gt; &amp;#34;artificial-intelligence-ai&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;machine-learning&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;decision-tree-learning&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;slam&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;general-ai-agi&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;deep-learning&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;logic&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;reinforcement-learning&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;keras&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;tensorflow&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;statistics&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;preprocessing&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;neural-ir&amp;#34; &amp;#34;information-retrieval&amp;#34; -&amp;gt; &amp;#34;elk-elastic-search&amp;#34; &amp;#34;data-structures-algorithms&amp;#34; -&amp;gt; &amp;#34;algorithms&amp;#34; &amp;#34;algorithms&amp;#34; -&amp;gt; &amp;#34;algorithm-analysis&amp;#34; &amp;#34;algorithms&amp;#34; -&amp;gt; &amp;#34;genetic-algorithms&amp;#34; &amp;#34;algorithms&amp;#34; -&amp;gt; &amp;#34;quantum-algorithms&amp;#34; &amp;#34;research&amp;#34; -&amp;gt; &amp;#34;arxiv&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;telecommunications&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;testing&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;databases&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;continuous-integration&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;licenses&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;preprocessing&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;software-engineering&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;system-administration&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;google-cloud&amp;#34; &amp;#34;system-administration&amp;#34; -&amp;gt; &amp;#34;kubernetes&amp;#34; &amp;#34;software-engineering&amp;#34; -&amp;gt; &amp;#34;gdb&amp;#34; &amp;#34;databases&amp;#34; -&amp;gt; &amp;#34;big-query&amp;#34; &amp;#34;databases&amp;#34; -&amp;gt; &amp;#34;elk-elastic-search&amp;#34; &amp;#34;databases&amp;#34; -&amp;gt; &amp;#34;web-development&amp;#34; &amp;#34;jobs&amp;#34; -&amp;gt; &amp;#34;pacific-edge&amp;#34; &amp;#34;jobs&amp;#34; -&amp;gt; &amp;#34;decentralised-workforce-human-cloud&amp;#34; &amp;#34;pacific-edge&amp;#34; -&amp;gt; &amp;#34;oncology&amp;#34; &amp;#34;linguistics&amp;#34; -&amp;gt; &amp;#34;english-punctuation&amp;#34; &amp;#34;linguistics&amp;#34; -&amp;gt; &amp;#34;epigraphy&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;mathematical-algorithms&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;linear-algebra&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;number-theory&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;geometry&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;probability&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;statistics&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;abstract-algebra&amp;#34; &amp;#34;nlp-natural-language-processing&amp;#34; -&amp;gt; &amp;#34;conversational-ai&amp;#34; &amp;#34;spacy&amp;#34; -&amp;gt; &amp;#34;nlp-natural-language-processing&amp;#34; &amp;#34;spacy&amp;#34; -&amp;gt; &amp;#34;preprocessing&amp;#34; &amp;#34;world&amp;#34;     </description>
    </item>
    
    <item>
      <title>SSH config</title>
      <link>https://mullikine.github.io/posts/ssh-config/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/ssh-config/</guid>
      <description>Here&amp;rsquo;s some insight into my ssh config.
Proxy commands This is how to use proxytunnel, corkscrew and netcat to do ssh proxying.
If you wanted to ssh to home via vyatta via architect, you would do so as follows:
1  ssh home_vyatta_architect   config section for ProxyCommand 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95  Host *_connect-polipo ProxyCommand nc -X connect -x localhost:8123 %h %p Host *_tunneluni ProxyCommand proxytunnel -p proxy.</description>
    </item>
    
    <item>
      <title>Using vim as a stream editor</title>
      <link>https://mullikine.github.io/posts/vim-as-a-stream-editor/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/vim-as-a-stream-editor/</guid>
      <description>vim is considered to be more of a language than an editor.
Why not use all those vim bindings as macros for a stream editor? Then you can play out the motions in your head, which is more natural than formulating an awk script.
For example 1 2  ci -t 86400 elinks-dump &amp;#34;https://next-episode.net/supernatural&amp;#34; | edm -m &amp;#34;/Countdown:\&amp;lt;CR&amp;gt;jj\&amp;#34;ayyGdgg\&amp;#34;aP&amp;#34; | s efs   1 day 19 hours Demonstration 
The edm script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83  #!</description>
    </item>
    
    <item>
      <title>Overview of the semantic parser</title>
      <link>https://mullikine.github.io/posts/adding-new-languages-to-semantic/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/adding-new-languages-to-semantic/</guid>
      <description>Glossary 1 2 3 4 5 6 7  expression problem The goal is to define a datatype by cases, where one can add new cases to the datatype and new functions over the datatype, without recompiling existing code, and while retaining static type safety (e.g., no casts).   Adding new languages to Semantic  Original article https://github.com/github/semantic/blob/master/docs/adding-new-languages.md  Adding new languages and syntax requires no changes to existing code.</description>
    </item>
    
    <item>
      <title>Rosie Pattern Matching Language (RPL)</title>
      <link>https://mullikine.github.io/posts/rosie-pattern-matching-language/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/rosie-pattern-matching-language/</guid>
      <description>Simple associativity and precedence rules All RPL operators are right-associative  expressions etc.  Binary operators have equal precedence in RPL bracket expressions Brackets behave very much like parentheses and braces.
It means that the expressions e1 … en can be any RPL expressions.
It means that extra layers of brackets around an expression do not change its meaning.
1 2 3 4 5 6 7 8  -- a sequence of expressions (the pliers ie.</description>
    </item>
    
    <item>
      <title>Interactively loading GHCi commands</title>
      <link>https://mullikine.github.io/posts/interactively-loading-ghci-commands/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/interactively-loading-ghci-commands/</guid>
      <description>I&amp;rsquo;d like to be able to load commands into ghci and have the commands verbosely printed.
Likely you have a lot of .ghci files 1  locate .ghci   Case in point This file is actually a .ghci file as it contains commands such as :t (&amp;gt;)
https://github.com/bishboria/learnyouahaskell/blob/master/02/2%5Ftypes.hs
I created an expect script for this purpose using my expect-generation script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  hs|ghci) { cmd=&amp;#34;$1&amp;#34; shift if stdin_exists; then tfin=&amp;#34;$(cat | tf txt)&amp;#34; inpara=&amp;#34;-sf $(aqf &amp;#34;$tfin&amp;#34;)&amp;#34; else : ${cmd:=&amp;#34;foldl (/) 64 [4,2,4]&amp;#34;} fi # x -cd &amp;#34;$(pwd)&amp;#34; -sh &amp;#34;ghci&amp;#34; -r &amp;#34;^.</description>
    </item>
    
    <item>
      <title>Notes on BERT</title>
      <link>https://mullikine.github.io/posts/google-bert/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/google-bert/</guid>
      <description>https://ai.googleblog.com/2018/11/open-sourcing-bert-state-of-art-pre.html
Pre-trained representations can either be context-free or contextual, and contextual representations can further be unidirectional or bidirectional.
1 2 3 4 5  node [style=filled,fillcolor=lightgrey,shape=box]; &amp;#34;Pre-trained representation&amp;#34; -&amp;gt; &amp;#34;context-free&amp;#34; &amp;#34;Pre-trained representation&amp;#34; -&amp;gt; contextual contextual -&amp;gt; unidirectional contextual -&amp;gt; bidirectional        LM supervision contextual Pre-trained Training data bi-directional     BERT unsupervised ✓ ✓ Plain text ✓   word2vec semi/self-supervised ✗      GloVe semi-supervised ✗       Supervision is a bit grey  Supervised If you consider that the network has to learn from it’s errors through back prop.</description>
    </item>
    
    <item>
      <title>Python environment</title>
      <link>https://mullikine.github.io/posts/python-environment/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-environment/</guid>
      <description>https://pipxproject.github.io/pipx/comparisons/
pyenv Makes it easy to install, manage, and switch between multiple Pythons.
1 2 3 4 5 6 7 8 9  # install a bunch of pythons pyenv install 3.8.0 pyenv install 3.7.4 pyenv install 3.6.9 pyenv install 2.7.16 pyenv install pypy3.6-7.1.1 # set the default python pyenv global 3.8.0   using pyenv Check which version is set and which are available 1  pyenv versions   * system (set by /home/shane/.</description>
    </item>
    
    <item>
      <title>Coding faster with Deep TabNine</title>
      <link>https://mullikine.github.io/posts/using-deep-tabnine/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-deep-tabnine/</guid>
      <description>Example of using Deep TabNine to write with example code</description>
    </item>
    
    <item>
      <title>Simulating mouse clicks in emacs</title>
      <link>https://mullikine.github.io/posts/simulating-mouse-clicks-in-emacs/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/simulating-mouse-clicks-in-emacs/</guid>
      <description>Using tmux, emacs and vim, I create some bindings to allow you to send mouse clicks to the terminal programmatically.
I had attempted to do this with emacs lisp but it was overly complicated and had I succeeded only emacs would be able to understand the mouse codes.
Click at the cursor location Make the tmux bindings 1 2  bind -n C-M-x run -b &amp;#34;tm mousedown&amp;#34; bind -n C-M-z run -b &amp;#34;tm mouseup&amp;#34;   Make the tm script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  mousedown|mouseup) { while [ $# -gt 0 ]; do opt=&amp;#34;$1&amp;#34;; case &amp;#34;$opt&amp;#34; in -t) { TMUX_PANE=&amp;#34;$2&amp;#34; shift shift } ;; *) break; esac; done [ -n &amp;#34;$1&amp;#34; ] &amp;amp;&amp;amp; x=&amp;#34;$1&amp;#34; &amp;amp;&amp;amp; shift [ -n &amp;#34;$1&amp;#34; ] &amp;amp;&amp;amp; y=&amp;#34;$1&amp;#34; &amp;amp;&amp;amp; shift : ${TMUX_PANE:=&amp;#34;$CALLER_PANE&amp;#34;} # tm cursor if test -z &amp;#34;$x&amp;#34;; then x=&amp;#34;$(tmux display -t &amp;#34;$TMUX_PANE&amp;#34; -p &amp;#34;#{cursor_x}&amp;#34;)&amp;#34; fi if test -z &amp;#34;$y&amp;#34;; then y=&amp;#34;$(tmux display -t &amp;#34;$TMUX_PANE&amp;#34; -p &amp;#34;#{cursor_y}&amp;#34;)&amp;#34; fi # ns &amp;#34;$f $TMUX_PANE $x $y&amp;#34; &amp;amp;&amp;gt;/dev/null if [ -n &amp;#34;$TMUX_PANE&amp;#34; ] &amp;amp;&amp;amp; [ -n &amp;#34;$x&amp;#34; ] &amp;amp;&amp;amp; [ -n &amp;#34;$y&amp;#34; ]; then case &amp;#34;$f&amp;#34; in mousedown) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -d $x $y)&amp;#34; } ;; mouseup) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -u $x $y)&amp;#34; } ;; click) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -d $x $y)&amp;#34; sleep 0.</description>
    </item>
    
    <item>
      <title>Python library wordcloud, emacs library wordcloud</title>
      <link>https://mullikine.github.io/posts/python-library-wordcloud/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-library-wordcloud/</guid>
      <description>python wordcloud 
  emacs wordcloud   1375 emacs packages &amp;lt;emacs-packages.txt&amp;gt;</description>
    </item>
    
    <item>
      <title>Org-mode</title>
      <link>https://mullikine.github.io/posts/org-mode/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/org-mode/</guid>
      <description>I had been searching for a way to put newlines inside table cells This is the way to do it.
1 2 3  # This works for table cells #+MACRO: NL @@html:&amp;lt;br/&amp;gt;@@ #+MACRO: NLL @@html:&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;@@   1 2 3 4 5  | header / source | capacity | used by | instances | || | bst.h | *∞* | hash_table.h | one per hash table | | hash_table.</description>
    </item>
    
    <item>
      <title>Review of &#39;What Is Hardware-in-the-Loop? - National Instruments&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-what-is-hardware-in-the-loop-national-instruments/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-what-is-hardware-in-the-loop-national-instruments/</guid>
      <description>Original article What Is Hardware-in-the-Loop? - National Instruments  Why HIL &amp;ndash; The problem to be solved Consider testing the electronic components of a new car.
To remain relevant in today’s market, modern vehicles need to include ADAS, cameras, radar, and more.
Testing these subsystems on the assembled product in desired use cases ensures that testing is performed in the ideal context, but it also incurs significant test overhead and the challenge of testing every scenario.</description>
    </item>
    
    <item>
      <title>Deconstructing the Cocomel search engine</title>
      <link>https://mullikine.github.io/posts/deconstructing-cocomel/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/deconstructing-cocomel/</guid>
      <description>This is my attempt to understand Vaughan Kitchen&amp;rsquo;s search engine.
 Source code https://github.com/vkitchen/cocomel Related articles Entropy, Cross-Entropy and KL-Divergence // Bodacious Blog \
An example information retrieval problem  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  red-black tree RBT [self-balancing binary search tree] Each node of the binary tree has an extra bit, and that bit is often interpreted as the color of the node.</description>
    </item>
    
    <item>
      <title>Generic paths for toolchains</title>
      <link>https://mullikine.github.io/posts/generic-path-for-blockchains/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/generic-path-for-blockchains/</guid>
      <description>I downloaded the latest version of the clang compiler today and I didn&amp;rsquo;t know where to put it.
I didn&amp;rsquo;t want to set up paths for a single toolchain and have to do it again in the future.
This was my hack. It works. Use this 1 2 3 4 5 6 7 8  for d in /usr/local/toolchains/*; do export PATH=$d/bin:${PATH} export LIBRARY_PATH=$d/lib:${LIBRARY_PATH} export LD_LIBRARY_PATH=$d/lib:${LD_LIBRARY_PATH} export C_INCLUDE_PATH=$d/include:${C_INCLUDE_PATH} export CPLUS_INCLUDE_PATH=$d/include:${CPLUS_INCLUDE_PATH} export MANPATH=&amp;#34;$d/share/man:$MANPATH&amp;#34; done   I extracted clang+llvm-9.</description>
    </item>
    
    <item>
      <title>Editing grep results with emacs</title>
      <link>https://mullikine.github.io/posts/editing-grep-results-with-emacs/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/editing-grep-results-with-emacs/</guid>
      <description>Either require ivy or steal it&amp;rsquo;s function 1 2 3 4 5 6  (defun ivy-wgrep-change-to-wgrep-mode () &amp;#34;Forward to `wgrep-change-to-wgrep-mode&amp;#39;.&amp;#34; (interactive) (if (require &amp;#39;wgrep nil &amp;#39;noerror) (wgrep-change-to-wgrep-mode) (error &amp;#34;Package wgrep isn&amp;#39;t installed&amp;#34;)))   When grep-mode is started, wgrep-setup must run to prepare wgrep 1 2 3 4 5 6 7 8 9 10 11 12  (defun grep-mode-hook-run () ;; This saves the keymap so it can be restored (wgrep-setup) (define-key compilation-button-map (kbd &amp;#34;C-m&amp;#34;) &amp;#39;compile-goto-error) (define-key grep-mode-map (kbd &amp;#34;C-m&amp;#34;) &amp;#39;compile-goto-error) ;; (define-key grep-mode-map (kbd &amp;#34;C-c C-p&amp;#34;) #&amp;#39;wgrep-change-to-wgrep-mode) ) (add-hook &amp;#39;grep-mode-hook &amp;#39;grep-mode-hook-run t) ;; If =C-x C-q= is not available we can use this binding instead (define-key grep-mode-map (kbd &amp;#34;C-c C-p&amp;#34;) #&amp;#39;ivy-wgrep-change-to-wgrep-mode)   Set up grep-mode 1 2 3 4 5 6  ;; Unmap some keys so we can type in grep-mode (define-key grep-mode-map (kbd &amp;#34;h&amp;#34;) nil) (define-key grep-mode-map (kbd &amp;#34;g&amp;#34;) nil) ;; This connects grep-mode to wgrep (define-key grep-mode-map (kbd &amp;#34;C-x C-q&amp;#34;) #&amp;#39;ivy-wgrep-change-to-wgrep-mode)   Set up wgrep-mode 1 2  (setq wgrep-auto-save-buffer t) (define-key wgrep-mode-map (kbd &amp;#34;C-m&amp;#34;) #&amp;#39;compile-goto-error)   wgrep-auto-save-buffer is needed so that when grep results are edited, they save automatically.</description>
    </item>
    
    <item>
      <title>Latex and Machine Learning</title>
      <link>https://mullikine.github.io/posts/machine-learning/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/machine-learning/</guid>
      <description>Information Gain  Original article Information Gain and Mutual Information for Machine Learning  \begin{equation} \mathbf{IG}(\mathbf{S}, a) = \mathbf{H}(\mathbf{S}) – \mathbf{H}(\mathbf{S} | a) \end{equation}
Mutual information  References Information Gain and Mutual Information for Machine Learning \
An introduction to mutual information - YouTube  Concerns the outcome of two random variables.
If we know the value of one of the random variables in a system there is a corresponding reduction in uncertainty for predicting the other one and mutual information measures that reduction in uncertainty.</description>
    </item>
    
    <item>
      <title>Entropy, Cross-Entropy and KL-Divergence</title>
      <link>https://mullikine.github.io/posts/entropy-cross-entropy-and-kl-divergence/</link>
      <pubDate>Sat, 02 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/entropy-cross-entropy-and-kl-divergence/</guid>
      <description>Original video A Short Introduction to Entropy, Cross-Entropy and KL-Divergence - YouTube Related reading https://blog.floydhub.com/knowledge-distillation/  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13  marginalized Treated as insignificant or peripheral. marginal likelihood function integrated likelihood model evidence evidence [#statistics] [#bayesian statistics] A likelihood function in which some parameter variables have been marginalized.   Predicted distribution vs true distribution Predicted distribution When designing a code to represent weather predictions, you try to assign fewer bits for outcomes which are probably going to be more common.</description>
    </item>
    
    <item>
      <title>Automating tcl/expect</title>
      <link>https://mullikine.github.io/posts/automating-expect/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-expect/</guid>
      <description>Using tmux, expect and bash I made a script which you can use to automate practically anything on the command line in an easy way.
 Related articles semi-automated interactive stream editing: piping through expect and emacs // Bodacious Blog Complex Dwarf Fortress macros with tcl/expect, emacs and tmux // Bodacious Blog Automating TOR and TPB // Bodacious Blog  Build the x scriptdescription>
    </item>
    
    <item>
      <title>CSE 341 Autumn 2012 - Racket Macros</title>
      <link>https://mullikine.github.io/posts/racket-macros/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/racket-macros/</guid>
      <description>To oversimplify, a macro is just a rule for rewriting programs as a prepass to evaluation.
So it’s very syntactic.
The “level” at which macros are defined affects their usefulness.
No macro system is sublexical  Sublexical Replace car with hd would turn cart into hdt.  A macro-expander must know how to break programs into tokens.
• “Pre-parsing” e.g.: Replace add(x,y) with x + y (where x and y stand for expressions) would turn add(x,y) * z into x + y * z.</description>
    </item>
    
    <item>
      <title>Lispifying indent-based code</title>
      <link>https://mullikine.github.io/posts/lispify-indents/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/lispify-indents/</guid>
      <description>I would like to be able to take indent-based code and turn it into parenthesis-based code.
 Target languages:  YAML Python C++    Prototype in racket 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91  #lang racket ;; (require racket) ; or match individually.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; template metaprogramming with Racket</title>
      <link>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #lang fulmar (require fulmar/meta) (definitions (define/meta zero) (define/meta succ (n)) (define/meta (add m n) [((succ n-minus-one) m) (add n-minus-one (succ m))] [((zero) m) m]) (define/meta (m-equal a b) [(v v) v])) #&amp;lt;&amp;lt;tests-section-end int main(int argc, const char *argv[]) { Add&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero &amp;gt; &amp;gt;, Succ&amp;lt;Zero&amp;gt; &amp;gt;::result typedef result; MEqual&amp;lt;result, Succ&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero&amp;gt; &amp;gt; &amp;gt; &amp;gt;::result typedef assert; return 0; } tests-section-end   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  /* This file was generated by fulmar version 0.</description>
    </item>
    
    <item>
      <title>Golang slices vs Python slices</title>
      <link>https://mullikine.github.io/posts/golang-slices-vs-python-slices/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/golang-slices-vs-python-slices/</guid>
      <description>Golang slices are very limited.
Apart from its syntactic limitations, golang slice syntax also lacks in generics due to only being able to operate on golang slices.
Python, with its duck-typing is able to use slices on anything that&amp;rsquo;s a collection.
Demonstrate golang slices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import &amp;#34;fmt&amp;#34; func main() { intSlice := []int{1, 2, 3, 4, 5} fmt.</description>
    </item>
    
    <item>
      <title>Variational Inference</title>
      <link>https://mullikine.github.io/posts/variational-inference/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/variational-inference/</guid>
      <description>Original article https://fabiandablander.com/r/Variational-Inference.html  Prereading https://mullikine.github.io/posts/entropy-cross-entropy-and-kl-divergence/
Bayes&amp;rsquo; Theorm 1 2 3 4 5 6 7 8 9 10 11  \begin{equation} \underbrace{p(\mathbf{z} \mid \mathbf{x})}_{\text{Posterior}} = \underbrace{p(\mathbf{z})}_{\text{Prior}} \times \frac{\overbrace{p(\mathbf{x} \mid \mat hbf{z})}^{\text{Likelihood}}}{\underbrace{\int p(\mathbf{x} \mid \mathbf{z}) \, p(\mathbf{z}) \, \mathrm{d}\mathbf{z}}_{\text{Marginal Likelihood}}} \enspace , \end{equation} where $\mathbf{z}$ denotes latent parameters we want to infer and $\mathbf{x}$ denotes data.   \begin{equation} \underbrace{p(\mathbf{z} \mid \mathbf{x})}_{\text{Posterior}} = \underbrace{p(\mathbf{z})}_{\text{Prior}} \times \frac{\overbrace{p(\mathbf{x} \mid \mathbf{z})}^{\text{Likelihood}}}{\underbrace{\int p(\mathbf{x} \mid \mathbf{z}) , p(\mathbf{z}) , \mathrm{d}\mathbf{z}}_{\text{Marginal Likelihood}}} \enspace , \end{equation}</description>
    </item>
    
    <item>
      <title>Graphviz and Hugo</title>
      <link>https://mullikine.github.io/posts/graphviz/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/graphviz/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph-ascii :async :results verbatim code  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ s1 ┃ ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ v ∘━━━━∘ #================================# ∘━━━━∘ ┃ s5 ┃ &amp;lt;━┄┄H low-priority H &amp;lt;━┄┄┃ s2 ┃ ∘━━━━∘ #================================# ∘━━━━∘ ^ ┃ ┃ ^ ┃ ┃ wait-time exceeded ┃ ┃ ┃ v ┃ ┃ ┃ #=====================# ┃ ∘━━━━∘ ∘━━━━━━┄┄H high-priority H ┃ ┃ s3 ┃ #=====================# ┃ ∘━━━━∘ ┃ ┃ ┃ ┃ v ┃ ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ s4 ┃ &amp;lt;∘ ∘━━━━━━━━━━━━━━━━━━━━━∘   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph priority :async :results raw drawer  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph-ascii-lr :async :results verbatim code  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ∘━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ ┃ ∘━━━━∘ #==============# wait-time exceeded #===============# ∘━━━━∘ ┃ ┃ s1 ┃ ━━&amp;gt; H H ━━━━━━━━━━━━━━━━━━━━&amp;gt; H high-priority H ━━&amp;gt; ┃ s4 ┃ ┃ ∘━━━━∘ H H #===============# ∘━━━━∘ ┃ H H ^ ┃ H low-priority H ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━∘ ┃ H H ┃ ∘━━━━∘ H H ∘━━━━━━━━━━━━━━━∘ ┃ ┃ s2 ┃ ━━&amp;gt; H H &amp;lt;━━━━━━━━━━━━━━━━━━━┄┄┃ s3 ┃ ┃ ∘━━━━∘ #==============# ∘━━━━━━━━━━━━━━━∘ ┃ ┃ ┃ ┃ ┃ v ┃ ∘━━━━━━━━━━━━━━∘ ∘━━━━━━━━━━-&amp;gt; ┃ s5 ┃ ∘━━━━━━━━━━━━━━∘   1 2 3 4 5 6 7 8 9  &amp;#34;Back&amp;#34; [shape=&amp;#34;egg&amp;#34; color=&amp;#34;green&amp;#34; style=&amp;#34;filled&amp;#34; fillcolor=&amp;#34;yellow&amp;#34;]; &amp;#34;Forth&amp;#34; [shape=&amp;#34;house&amp;#34; color=&amp;#34;red&amp;#34;]; &amp;#34;Other&amp;#34; [shape=&amp;#34;invtriangle&amp;#34; color=&amp;#34;blue&amp;#34;]; &amp;#34;Back&amp;#34; -&amp;gt; &amp;#34;Forth&amp;#34; [color=&amp;#34;orange&amp;#34; label=&amp;#34;weee&amp;#34;]; &amp;#34;Forth&amp;#34; -&amp;gt; &amp;#34;Back&amp;#34; [color=&amp;#34;purple&amp;#34; label=&amp;#34;eeew&amp;#34;]; &amp;#34;Other&amp;#34; -&amp;gt; &amp;#34;Forth&amp;#34; &amp;#34;Other&amp;#34; -&amp;gt; &amp;#34;Back&amp;#34;     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  subgraph clusterEncoders { style = filled fillcolor = lightgrey node [style=filled,fillcolor=lightgrey,shape=circle]; label = &amp;#34;Set of encoders&amp;#34; subgraph clusterEncoder1 { fillcolor = white label = &amp;#34;Encoder 1&amp;#34;; f1[label=&amp;#34;FFNN&amp;#34;] a1[label=&amp;#34;Self-Attention layer&amp;#34;] a1 -&amp;gt; f1 } subgraph clusterEncoder2 { fillcolor = white label = &amp;#34;Encoder 2&amp;#34;; f2[label=&amp;#34;FFNN&amp;#34;] a2[label=&amp;#34;Self-Attention layer&amp;#34;] a2 -&amp;gt; f2 } subgraph clusterEncoderN { fillcolor = white label = &amp;#34;Encoder N&amp;#34;; etc [label=&amp;#34;.</description>
    </item>
    
    <item>
      <title>TensorFlow BERT</title>
      <link>https://mullikine.github.io/posts/tensorflow-bert-keras/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/tensorflow-bert-keras/</guid>
      <description>Original article Hugging Face: State-of-the-Art Natural Language Processing in ten lines of TensorFlow 2.0  A list of transformer architectures    architecture     BERT   RoBERTa   GPT-2   DistilBERT    pip&#39;s transformers library Builds on 3 main classes:  configuration class tokenizer class model class  configuration class Hosts relevant information concerning the model we will be using, such as:</description>
    </item>
    
    <item>
      <title>Lists in emacs lisp</title>
      <link>https://mullikine.github.io/posts/lists-in-emacs-lisp/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/lists-in-emacs-lisp/</guid>
      <description>What is a list? A list in emacs is a list of cons cells. A cons cell has a car and a cdr. The car is a value. The cdr is a pointer.
e.g. This allows you to set the nth item of a list 1  (setcar (nthcdr 2 list) &amp;#39;epsilon)   Useful pages https://www.emacswiki.org/emacs/ListModification#toc7
functions  mod orig destructive to original variable     f/m mod orig macro dedup (slow) d     delete ✓   removes all matching elements from list   remove    same as &amp;lsquo;delete&amp;rsquo;   add-to-list ✓  ✓ push element to front   push ?</description>
    </item>
    
    <item>
      <title>Deep TabNine and emacs</title>
      <link>https://mullikine.github.io/posts/emacs-deep-tab-nine/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-deep-tab-nine/</guid>
      <description>Deep TabNine can supplement your autocompletion needs by providing you with example code.
 plugin https://github.com/TommyX12/company-tabnine/  Objective Have two bindings; one for regular company complete and one for tabnine.
   kb f     M-` company-complete   M-Tab company-tabnine    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  (require &amp;#39;company-tabnine) ;; TODO Fix ;; While browsing the completions list, if I press &amp;lt;space&amp;gt; then company aborts.</description>
    </item>
    
    <item>
      <title>elisp advice</title>
      <link>https://mullikine.github.io/posts/emacs-lisp-advice/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-lisp-advice/</guid>
      <description>The only snippet you need # -*- mode: snippet -*- # name: around-advice # group: advice # key: ada # -- ;; nadvice - proc is the original function, passed in. do not modify (defun ${1:advised-function-name}-around-advice (proc &amp;amp;rest args) (message &amp;#34;$1 called with args %S&amp;#34; args) (let ((res (apply proc args))) (message &amp;#34;$1 returned %S&amp;#34; res) res)) (advice-add &amp;#39;$1 :around #&amp;#39;$1-around-advice) old advice This is the way it used to be done.</description>
    </item>
    
    <item>
      <title>Generating C with racket</title>
      <link>https://mullikine.github.io/posts/generating-c-with-racket/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/generating-c-with-racket/</guid>
      <description>related reading Practical macros in Racket // Bodacious Blog   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  #!/usr/local/racket/bin/racket #lang racket (require syntax/parse/define (for-syntax racket)) (define-syntax-parser Cstat ([_ ((~datum +) x ...)] #:with x* (string-join (map (lambda (x) (writeln x) (if (symbol?</description>
    </item>
    
    <item>
      <title>Haskell modes for emacs</title>
      <link>https://mullikine.github.io/posts/haskell-modes-for-emacs/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-modes-for-emacs/</guid>
      <description>This post is to help me keep track of all the garbage emacs modes floating around for Haskell.
Tooling is a huge deficiency with haskell, not just for emacs.
   mode pros cons     lsp-mode looks pretty keeps asking for project root. does not remember   flymake  leaves garbage files lying around in project directory   intero reliable, pretty type inference slow   haskell-mode reliable very basic; lacking    </description>
    </item>
    
    <item>
      <title>Haskell troubleshooting</title>
      <link>https://mullikine.github.io/posts/haskell-troubleshooting/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-troubleshooting/</guid>
      <description>Can&amp;rsquo;t find module which exists and is in the same directory  source code https://github.com/ThomasZumsteg/exercism-haskell/blob/master/say/say%5Ftest.hs  Asked on #haskell 1 2 3 4 5 6  16:19 &amp;lt; libertyprime&amp;gt; having trouble getting this to run https://asciinema.org/a/Z7G0B7ZmNtwjcnSSylEAWpUaI https://github.com/ThomasZumsteg/exercism-haskell/blob/master/say/say_test.hs 16:19 &amp;lt; libertyprime&amp;gt; not sure why 16:19 &amp;lt; libertyprime&amp;gt; the module is defined in say.hs in the same directory as say_test.hs 16:20 &amp;lt; Axman6&amp;gt; you probably want Say.hs 16:20 ::: Join to #haskell was synced in 378 secs 16:23 &amp;lt; libertyprime&amp;gt; thanks axman.</description>
    </item>
    
    <item>
      <title>LaTeX in emacs</title>
      <link>https://mullikine.github.io/posts/latex-in-emacs/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/latex-in-emacs/</guid>
      <description>Prereading Compounding Confoundment: arbitrary interpreters for Babel // Bodacious Blog
Setup Create the texalg2png script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #!/bin/bash export TTY read -r -d &amp;#39;&amp;#39; texcode &amp;lt;&amp;lt;HEREDOC \documentclass{standalone} \usepackage{varwidth} \usepackage{algorithm} %ctan.org\pkg\algorithms \usepackage{algpseudocode} \begin{document} \begin{varwidth}{\linewidth} \par\noindent \begin{algorithmic}[1] $(cat) \end{algorithmic} \end{varwidth} \end{document} HEREDOC printf -- &amp;#34;%s&amp;#34; &amp;#34;$texcode&amp;#34; | tex2png &amp;#34;$@&amp;#34;   Create the tex2png script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  #!</description>
    </item>
    
    <item>
      <title>Monitoring tools</title>
      <link>https://mullikine.github.io/posts/monitoring-tools/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/monitoring-tools/</guid>
      <description>This is an exposé of a few monitoring tools I commonly use.
htop    kb f     e show environment   l show open files (lsof)    
what 1  cargo install what   what shows you what applications are taking up your bandwidth.

Is stack running? Yes it&amp;rsquo;s downloading 
iotop - simple top-like I/O monitor    kb f      and  change the sorting   r reverse the sorting order   o toggle the &amp;ndash;only option   p toggle the &amp;ndash;processes option   a toggle the &amp;ndash;accumulated option   q quit   i change the priority of a thread or a process&amp;rsquo; thread(s)</description>
    </item>
    
    <item>
      <title>Filtering text streams</title>
      <link>https://mullikine.github.io/posts/filter-regex-in-perlre/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/filter-regex-in-perlre/</guid>
      <description>The script awk-apply-to-record awk awk-apply-to-record.awk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  { # print NR if (r == &amp;#34;&amp;#34; || NR == r) { if (NR == 1) { printf &amp;#34;%s&amp;#34;, $0 |&amp;amp; cmd; } else { if (irs == &amp;#34;y&amp;#34;) { printf &amp;#34;%s&amp;#34;, RS printf &amp;#34;%s&amp;#34;, $0 |&amp;amp; cmd; } else { printf &amp;#34;%s%s&amp;#34;, RS, $0 |&amp;amp; cmd; } } close(cmd, &amp;#34;to&amp;#34;); # This is needed because getline will not overwrite if nothing is read $0 = &amp;#34;&amp;#34;; cmd |&amp;amp; getline $0; fflush(cmd); close(cmd); } else { if (NR &amp;gt; 1) { print RS } } print; system(&amp;#34;&amp;#34;); }   awk-apply-to-record 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  #!</description>
    </item>
    
    <item>
      <title>emacs for beginners - Editing MACroS</title>
      <link>https://mullikine.github.io/posts/emacs-keyboard-macros/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-keyboard-macros/</guid>
      <description>emacs becomes more powerful when you use it in the way it was designed to be used.
You should be using keyboard macros.
 keyboard macros vs lisp macros Keyboard macros and lisp macros are entirely different things. The article you are reading is about using keyboard macros.
If you want to read about lisp macros then read my other article.
https://mullikine.github.io/posts/macro-tutorial/
  Using keyboard macros to speed up processes An example: Using magit-diff; before and after Before    kb f     q exit diff.</description>
    </item>
    
    <item>
      <title>(WIP) Probabilistic programming with problog</title>
      <link>https://mullikine.github.io/posts/probabilistic-programming-with-problog/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/probabilistic-programming-with-problog/</guid>
      <description>Syntactic sugar Clauses can be constructed by virtue of overloading of Python operators:
   Prolog Python English etymology     :- &amp;laquo; clause infers   , &amp;amp; and    ; | or    \+ ~ not      A small Tangent Some mathematical symbols    symbol tex how it reads      &amp;lt;: {\displaystyle &amp;lt;:} is a subtype of    ⊧ \vDash entails    ⊢ \vdash infers    → → is mapped to maps sets to sets   ↦ \mapsto is mapped to maps elements to elements    Some jq.</description>
    </item>
    
    <item>
      <title>Scripting Mathematica</title>
      <link>https://mullikine.github.io/posts/scripting-mathematica/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/scripting-mathematica/</guid>
      <description>Mathematica keyboard shortcuts https://reference.wolfram.com/language/tutorial/KeyboardShortcutListing.html
shell commands mmadoc Getting documentation with Mathematica code 1 2  ?Integrate ?WolframAlpha   1 2 3 4 5 6  #!/bin/bash export TTY funcname=&amp;#34;$1&amp;#34; mma &amp;#34;?$funcname&amp;#34;   mma 1 2 3 4 5 6 7 8 9 10 11 12 13  #!/bin/bash export TTY # Mathematica tf_script=&amp;#34;$(ux tf script wls || echo /dev/null)&amp;#34; trap &amp;#34;rm \&amp;#34;$tf_script\&amp;#34; 2&amp;gt;/dev/null&amp;#34; 0 cat &amp;gt; &amp;#34;$tf_script&amp;#34; &amp;lt;&amp;lt;HEREDOC Print[$@] HEREDOC wolframscript -file &amp;#34;$tf_script&amp;#34; &amp;#34;$@&amp;#34;   Example 1 2 3 4 5 6  mmadoc Integrate mmadoc WolframAlpha mma &amp;#34;WolframAlpha[\&amp;#34;size of the moon\&amp;#34;]&amp;#34; WolframAlpha[&amp;#34;size of the moon&amp;#34;] wa size of the moon mma &amp;#34;Integrate[5x,x]&amp;#34;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  Integrate[f, x] gives the indefinite integral ∫ f dx.</description>
    </item>
    
    <item>
      <title>Searching awesome lists for curated web browsing</title>
      <link>https://mullikine.github.io/posts/curated-surfing/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/curated-surfing/</guid>
      <description>Here I demonstrate searching through and reading lists of things from the command line.
I ran into some issues with the googlesearch pip module It seems to have been taken down from pip.
I changed my script to use emacs&amp;rsquo; eww browser to scrape the results instead eww is pretty reliable.
Demonstration Please be patient as I bypass the problem above.

Some search results from the demonstration above 1 2 3 4 5 6 7 8  http://linear.</description>
    </item>
    
    <item>
      <title>(WIP) Database clustering tools and techniques</title>
      <link>https://mullikine.github.io/posts/database-clustering-methods/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/database-clustering-methods/</guid>
      <description> Original article https://www.datanovia.com/en/blog/types-of-clustering-methods-overview-and-quick-start-r-code/  Contents  Types of clustering methods  Partitioning methods Hierarchical clustering Fuzzy clustering Density-based clustering Model-based clustering    Cluster analysis in R install.packages(&amp;#34;factoextra&amp;#34;) install.packages(&amp;#34;cluster&amp;#34;) install.packages(&amp;#34;magrittr&amp;#34;) Partitioning methods </description>
    </item>
    
    <item>
      <title>emacs for scraping Google search results</title>
      <link>https://mullikine.github.io/posts/use-emacs-to-scrape-google-search-results/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/use-emacs-to-scrape-google-search-results/</guid>
      <description>I have had issues with using python libraries for scraping Google search results.
It appears that pip libraries keep going out of order.
Therefore, I switched to scraping with emacs.
I have developed a faith in the eww browser due to its reliability.
Create the elisp function which uses xurls to scrape URLs from text 1 2 3 4 5  (defun google-scrape-after-loaded () ;; (new-buffer-from-string (sh/ptw/uniqnosort (sh/ptw/xurls (format &amp;#34;%S&amp;#34; (buffer-string)))) &amp;#34;*google-results*&amp;#34;) (let ((results (sh/ptw/uniqnosort (sh/ptw/xurls (format &amp;#34;%S&amp;#34; (buffer-string)))))) (write-string-to-file results &amp;#34;/tmp/eww-scrape-output.</description>
    </item>
    
    <item>
      <title>Just a fun bit of math in my day</title>
      <link>https://mullikine.github.io/posts/fun-math/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/fun-math/</guid>
      <description>Useful mathematical symbols    symbol tex digraph how it reads      &amp;lt;:   is a subtype of    ⊧ \vDash &amp;lt;bar&amp;gt; = entails    ⊢ \vdash &amp;lt;bar&amp;gt; - infers    → \to -&amp;gt; is mapped to maps sets to sets   ↦ \mapsto &amp;lt;bar&amp;gt; &amp;gt; is mapped to maps elements to elements    Euler&amp;rsquo;s Characteristic The second most beautiful equation and its surprising applications - YouTube</description>
    </item>
    
    <item>
      <title>Playing with Kaggle, R and ESS</title>
      <link>https://mullikine.github.io/posts/kaggle-r-ess/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/kaggle-r-ess/</guid>
      <description>Build the script kag This is used for
 Downloading datasets to an organised directory structure Viewing CSV results in visidata by default Keeping track of history Caching results   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } slug=&amp;#34;$(echo &amp;#34;$3&amp;#34; | slugify)&amp;#34; dsname=&amp;#34;$(echo &amp;#34;$3&amp;#34; | sed &amp;#39;s=.</description>
    </item>
    
    <item>
      <title>(WIP) Notes on &#34;The Illustrated GPT-2&#34;</title>
      <link>https://mullikine.github.io/posts/notes-on-illustrated-gpt2/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/notes-on-illustrated-gpt2/</guid>
      <description>Original article The Illustrated GPT-2 (Visualizing Transformer Language Models) Jay Alammar Visualizing machine learning one concept at a time  Prereading Overview of The Illustrated Transformer // Bodacious Blog
Parameters When an article talks about the number of parameters, this is what it&amp;rsquo;s referring to.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  Parameters Single Transformer block Conv1d attn/c_attn w 768 2304 1769472 b 2304 2304 attn/c_proj w 768 768 589824 b 768 768 mlp/c_fc w 768 3072 2359296 b 768 768 mlp/c_proj w 3072 3072 2359296 b 768 768 Norm ln_1 g 768 768 b 768 768 ln_2 g 768 768 b 768 768 total 7085568 per block X 12 blocks 85026816 In all blocks Embeddings 50257 768 38597376 Positional Embeddings 2024 768 786432 Grand Total 124410624   Goal Supplement The Illustrated Transformer with more visuals explaining the inner-workings of transformers, and how they’ve evolved since the original paper.</description>
    </item>
    
    <item>
      <title>Notes on &#34;Generating Beatles’ Lyrics with Machine Learning&#34;</title>
      <link>https://mullikine.github.io/posts/notes-on-generating-beatles-lyrics-with-machine-learning/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/notes-on-generating-beatles-lyrics-with-machine-learning/</guid>
      <description>Original article Generating Beatles Lyrics with Machine Learning - Towards Data Science  Apparatus     URL      code https://github.com/EugenHotaj/beatles    dataset http://toti.eu.com/beatles/index.asp github.com/EugenHotaj/beatles/blob/master/scraper.py   embeddings     algorithm      Hypothesis Aim Questions  How might might generate sentences from a language model?  Method Factoids Unigram model Ignores any conditioning and simply chooses the next word randomly from the training data.</description>
    </item>
    
    <item>
      <title>Custom Org Links</title>
      <link>https://mullikine.github.io/posts/custom-org-links/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/custom-org-links/</guid>
      <description>org links are useful for making your org-mode documents more terse.
1 2 3 4  $EMACSD/config/org/org-google.el $EMACSD/config/org/org-man.el $EMACSD/config/org/org-rifle.el $EMACSD/config/org/org-youtube.el   org-google.el, for instance will allow you to write google searches into your org mode.
org-google Example You can then type C-c C-o on the link to run the google search.
1  [[google:emacs plugins]]   This is how it appears in org-mode.
[google:emacs plugins](emacs plugins)
org-google.el source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  ;;; org-man.</description>
    </item>
    
    <item>
      <title>Extending Babel</title>
      <link>https://mullikine.github.io/posts/extending-babel/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-babel/</guid>
      <description>previous article Compounding Confoundment: arbitrary interpreters for Babel // Bodacious Blog  Automate the process of changing the babel block wrapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  (defun org-babel-raise () &amp;#34;Move the interior of a babel to the outside: remove the babel block chrome and keep only the source code.</description>
    </item>
    
    <item>
      <title>Notes on &#34;Identifying the right meaning of the words using BERT&#34;</title>
      <link>https://mullikine.github.io/posts/notes-on-identifying-the-right-meaning-of-the-words-using-bert/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/notes-on-identifying-the-right-meaning-of-the-words-using-bert/</guid>
      <description>Original article Identifying the right meaning of the words using BERT  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  Uncased [model] The text has been lowercased before WordPiece tokenization, e.g., John Smith becomes john smith. The Uncased model also strips out any accent markers. Cased [model] The true case and accent markers are preserved.</description>
    </item>
    
    <item>
      <title>Notes on &#34;Math4IQB Hopfield Networks&#34;</title>
      <link>https://mullikine.github.io/posts/notes-on-math4iqb-hopfield-networks/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/notes-on-math4iqb-hopfield-networks/</guid>
      <description>Original video https://www.youtube.com/watch?v=gfPUWwBkXZY  Glossary information gain [data mining] The amount of information that&amp;#39;s gained by knowing the value of the attribute, which is the entropy of the distribution before the split minus the entropy of the distribution after it. The largest information gain is equivalent to the smallest entropy. vim +/&amp;#34;mutual information&amp;#34; &amp;#34;$NOTES/ws/glossaries/information-theory.txt&amp;#34; information gain ratio [#decision tree learning] Ratio of information gain to the intrinsic information. It was proposed by Ross Quinlan, to reduce a bias towards multi-valued attributes by taking the number and size of branches into account when choosing an attribute.</description>
    </item>
    
    <item>
      <title>Random emacs tips</title>
      <link>https://mullikine.github.io/posts/emacs-tips/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-tips/</guid>
      <description>Just a glimpse into the kinds of things I am recording in my notes.
Help key &amp;ndash; interpretted by emacs, not tmux This is because you would have to modify both terminfo and tmux c source to get the help key this way.
It was simply easier to intercept the raw ansi in emacs and translate it.
(define-key key-translation-map (kbd &amp;#34;C-M-]&amp;#34;) (kbd &amp;#34;&amp;lt;help&amp;gt;&amp;#34;))    kb tr     &amp;lt;C-M-]&amp;gt; &amp;lt;help&amp;gt;    Multiple actions as single undo entry https://www.</description>
    </item>
    
    <item>
      <title>(WIP) Notes on &#34;Natural Language Processing by Jacob Eisenstein&#34;</title>
      <link>https://mullikine.github.io/posts/notes-on-eisenstein-nlp/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/notes-on-eisenstein-nlp/</guid>
      <description>Reading vs +/&amp;#34;Kneser-Ney&amp;#34; $NOTES/ws/nlp-natural-language-processing/reading/eisenstein-nlp-notes.txt Kneser-Ney smoothing Based on absolute discounting, but it redistributes the resulting probability mass in a different way from Katz backoff.
Empirical evidence points to Kneser-Ney smoothing as the state-of-art for n-gram LMing.</description>
    </item>
    
    <item>
      <title>Meta &amp; Inception</title>
      <link>https://mullikine.github.io/posts/meta-inception/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/meta-inception/</guid>
      <description>This is a blog article about writing a blog article about recording myself recording myself playing tetris inside emacs inside tmux inside neovim inside spacemacs, inside the 5 nested tmux sessions seen at the bottom of the screen.
DONE tetris inside of emacs 1  etetris-vt100   DONE tetris inside of neovim terminal inside of tmux 1  nvt etetris-vt100   DONE tetris inside of neovim terminal inside of tmux inside of spacemacs 1  sp -sh nvt etetris-vt100   DONE asciinema recording of an asciinema recording of tetris inside of neovim terminal inside of tmux inside of spacemacs Meta inception</description>
    </item>
    
    <item>
      <title>The Rise of the Machines - Brandan McCane</title>
      <link>https://mullikine.github.io/posts/brendan-mccain-ipl/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/brendan-mccain-ipl/</guid>
      <description>Inaugural Professorial Lecture - Professor Brendan McCane https://www.otago.ac.nz/news/events/otago719400.html
Brendan achieved the rank of professor.
Glossary IPL Inaugural Professorial Lecture Summary Brendan&amp;rsquo;s research is on the boundary between ML and computer vision.
That is, how to get a computer to learn what is in an image based on example images.
Some of his early work in this area included face detection and face recognition algorithms – similar to the algorithms that now run on all smart phones and social media platforms.</description>
    </item>
    
    <item>
      <title>Muddled Monoliths: consolidating key bindings with handle.el</title>
      <link>https://mullikine.github.io/posts/setting-up-handle-mode/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-handle-mode/</guid>
      <description>The problem I have a few makeshift, monolithic functions for consolidating documentation and code navigation commands under a single function.
They have become unwieldly as they grow to accommodate more languages and modes.
Example of an unwieldly function (defun my/doc-thing-at-point (arg &amp;amp;optional immediate winfunc) &amp;#34;Show doc for thing under pointl. winfunc = &amp;#39;spv or &amp;#39;sph elisp function&amp;#34; (interactive &amp;#34;P&amp;#34;) (if (not winfunc) (setq winfunc &amp;#39;sph)) (cond ((string-equal (preceding-sexp-or-element) &amp;#34;#lang&amp;#34;) (progn ;; (racket--repl-command &amp;#34;doc %s&amp;#34; (concat &amp;#34;H:&amp;#34; (str (sexp-at-point)))) (str (racket--cmd/async `(doc ,(concat &amp;#34;H:&amp;#34; (str (sexp-at-point)))))) (sleep 1) (let ((url (cl/xc nil :notify t))) (if immediate (if (string-match-p &amp;#34;racket/search/index.</description>
    </item>
    
    <item>
      <title>Setting up Rust</title>
      <link>https://mullikine.github.io/posts/overview-of-rust/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/overview-of-rust/</guid>
      <description>Glossary racer Rust Code Completion utility http://siciarz.net/24-days-of-rust-racer/ flamegraph The proportion of a program’s runtime that occurs in a routine is proportional to the width of the bar for that routine. https://ngoldbaum.github.io/posts/python-vs-rust-nn/ Language references Syntax https://cheats.rs/
Rosetta: rust vs swift vs scala http://hyperpolyglot.org/rust
Installation curl https://sh.rustup.rs -sSf | sh Reading Rust by example Introduction - Rust By Example
A little bit of functional programming https://hoverbear.org/2015/05/02/a-journey-into-iterators/
std::mem::drop https://blog.jabid.in/2019/10/11/drop.html
An simple example project Why I Ripped The Same CD 300 Times</description>
    </item>
    
    <item>
      <title>Scalable Python and bottlenecks</title>
      <link>https://mullikine.github.io/posts/scalable-python-and-bottlenecks/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/scalable-python-and-bottlenecks/</guid>
      <description>Original article https://instagram-engineering.com/python-at-scale-strict-modules-c0bb9245c834     term description see     import-time when imports are executed     Sources of slowness import re from mywebframework import db, route VALID_NAME_RE = re.compile(&amp;#34;^[a-zA-Z0-9]+$&amp;#34;) @route(&amp;#39;/&amp;#39;) def home(): return &amp;#34;Hello World!&amp;#34; class Person(db.Model): name: str  top level scope defines &amp;ndash; regex compilation decorator with unknown behaviour class definition: runs code contained within base class may have a meta-class or __init_subclass__ method.</description>
    </item>
    
    <item>
      <title>Compounding Confoundment: arbitrary interpreters for Babel</title>
      <link>https://mullikine.github.io/posts/arbitrary-interpreters-for-babel/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/arbitrary-interpreters-for-babel/</guid>
      <description>Genesis 11:7 “&amp;hellip;Come, let us go down and confuse their language so they will not understand each other.” If supporting many languages in Babel was not confounding enough, lets support arbitrary interpreters too!  The need to specify a custom interpreter arose when I needed to provide my own interpreter for generating an ASCII graph from a dot script.
Objective Specify an :interpreter and/or :filter command to override the execute behaviour.</description>
    </item>
    
    <item>
      <title>Haskell development 20.10.19</title>
      <link>https://mullikine.github.io/posts/haskell-development/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-development/</guid>
      <description>structured-haskell-mode https://github.com/projectional-haskell/structured-haskell-mode
It&amp;rsquo;s the lispy of haskell.
   Feature Key For Explanation     newline-indent C-j Indenting shm/newline-indent C-j takes the current node and its type into consideration giving very predictable and useful behaviour.   goto-parent M-a Going to parent shm/goto-parent M-a jumps to the start of the parent.   goto-parent-end ) Going to parent end shm/goto-parent-end ) jumps to the end of the parent.</description>
    </item>
    
    <item>
      <title>Using sqlite with postgres table browsing pager in emacs</title>
      <link>https://mullikine.github.io/posts/sqlite-output-in-postgres-viewer-in-emacs/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/sqlite-output-in-postgres-viewer-in-emacs/</guid>
      <description>Create the edbi script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #!/bin/bash export TTY path=&amp;#34;$1&amp;#34; case &amp;#34;$path&amp;#34; in *.sqlite|*.db) { sp -e &amp;#34;(edbi-sqlite $(aqf &amp;#34;$path&amp;#34;))&amp;#34; } ;; *) { orspe -ci &amp;#34;edbi:open-db-viewer&amp;#34; } ;; esac   add the rules for ranger 1 2  ext sqlite = o-db &amp;#34;$@&amp;#34; ext db = o-db &amp;#34;$@&amp;#34;</description>
    </item>
    
    <item>
      <title>The Illustrated Transformer</title>
      <link>https://mullikine.github.io/posts/review-of-the-illustrated-transformer/</link>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-the-illustrated-transformer/</guid>
      <description>Original article https://jalammar.github.io/illustrated-transformer/ Source https://github.com/tensorflow/tensor2tensor  Prereading https://jalammar.github.io/illustrated-word2vec/
Helpful glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  Multilayer perceptron Feed-Forward Neural Network FFNN Basically, these are multi-level logistic regression classifiers.</description>
    </item>
    
    <item>
      <title>Decentralised workforce; the human cloud</title>
      <link>https://mullikine.github.io/posts/decentralised-workforce-human-cloud/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/decentralised-workforce-human-cloud/</guid>
      <description>Articles https://snir.dev/blog/remote-async-communication/  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  asynchronous communication https://doist.com/blog/asynchronous-communication/ When you send a message without expecting an immediate response. For example, you send an email. I open and respond to the email several hours later. synchronous communication https://doist.com/blog/asynchronous-communication/ When you send a message and the recipient processes the information and responds immediately.</description>
    </item>
    
    <item>
      <title>gwern.net GPT-2</title>
      <link>https://mullikine.github.io/posts/review-of-gewn-gpt2/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-gewn-gpt2/</guid>
      <description>original article https://www.gwern.net/GPT-2  Read using eww The website when viewed with a GUI browser, although impressive, is distracting.
The website was built with hackyll, a static site generator employing haskell.
1  eww &amp;#34;https://www.gwern.net/GPT-2&amp;#34;   Ease of reading Straight-forward once you understand ML jargon.</description>
    </item>
    
    <item>
      <title>Rewrite of gwern.net GPT-2 Neural Network Poetry</title>
      <link>https://mullikine.github.io/posts/rewrite-of-gwern-gpt2-poetry/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/rewrite-of-gwern-gpt2-poetry/</guid>
      <description>original article https://www.gwern.net/GPT-2  Read using eww The website when viewed with a GUI browser, although impressive, is distracting.
The website was built with hackyll, a static site generator employing haskell.
1  eww &amp;#34;https://www.gwern.net/GPT-2&amp;#34;   Ease of reading Straight-forward once you understand ML jargon.</description>
    </item>
    
    <item>
      <title>Alternative preludes for Haskell</title>
      <link>https://mullikine.github.io/posts/alternative-preludes-for-haskell/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/alternative-preludes-for-haskell/</guid>
      <description>Related reading https://guide.aelve.com/haskell/alternative-preludes-zr69k1hc  Glossary Lazy IO haskell
Foundation Provide a better and more efficient prelude than base&amp;rsquo;s prelude.
https://hackage.haskell.org/package/foundation
be self-sufficient: no external dependencies apart from base.
provide better data-types: packed unicode string by default, arrays.
Better numerical classes that better represent mathematical thing (No more all-in-one Num).
Better I/O system with less Lazy IO
Usual partial functions distinguished through type system
Lazy IO https://stackoverflow.com/questions/5892653/whats-so-bad-about-lazy-i-o
Lazy IO has the problem that releasing whatever resource you have acquired is somewhat unpredictable, as it depends on how your program consumes the data &amp;ndash; its &amp;ldquo;demand pattern&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Keyword extraction to analyse articles</title>
      <link>https://mullikine.github.io/posts/keyword-extraction/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/keyword-extraction/</guid>
      <description>sparsity [#text mining] Huge matrices are created based on word frequencies with many cells having zero values. This problem is called sparsity and is minimized using various techniques. Articles keyword extraction: nltk, sklearn Automated Keyword Extraction from Articles using NLP
kag datasets download benhamner/nips-papers textrank: numpy, spacy towardsdatascience.com/textrank-for-keyword-extraction-by-python-c0bae21bcec0
ngram, modified skip-gram, spacy Keywords Extraction with Ngram and Modified Skip-gram based on spaCy
TODO Turn the math4IQB lectures into keywords readsubs &amp;#34;https://www.</description>
    </item>
    
    <item>
      <title>Music playlists in emacs lisp</title>
      <link>https://mullikine.github.io/posts/music-playlists-in-emacs-lisp/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/music-playlists-in-emacs-lisp/</guid>
      <description>Build the emacs-script command emacs-script is a script to treat emacs lisp as a normal scripting language for the command line.
It loads some basic functionality so we can use emacs lisp for scripting.
Yes, it downloads from youtube and caches the videos.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83  #!</description>
    </item>
    
    <item>
      <title>The Semantic Web and Ontology</title>
      <link>https://mullikine.github.io/posts/semantic-web-and-ontology/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/semantic-web-and-ontology/</guid>
      <description>Glossary semantic web A proposed development of the World Wide Web in which data in web pages is structured and tagged in such a way that it can be read directly by computers. &amp;#34;the Semantic Web could usher in a golden age of information access&amp;#34; ontology [#metaphysics] [noun] A set of concepts and categories in a subject area or domain that shows their properties and the relations between them. &amp;#34;what&amp;#39;s new about our ontology is that it is created automatically from large datasets&amp;#34; [#metaphysics] [field of study] The study of things, how they relate to other things, and what those things are called.</description>
    </item>
    
    <item>
      <title>(WIP) Review of NLP tools</title>
      <link>https://mullikine.github.io/posts/review-of-nlp-tools/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-nlp-tools/</guid>
      <description>lm-explorer Interactive explorer for language models (currently only OpenAI GPT-2).</description>
    </item>
    
    <item>
      <title>writeup.ai</title>
      <link>https://mullikine.github.io/posts/review-of-writeup-ai/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-writeup-ai/</guid>
      <description>Original article https://senrigan.io/blog/how-writeupai-runs-behind-the-scenes/#h%5F6068056784021570782144062  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  cross entropy loss (between two probability distributions) (and over the same underlying set of events) Higher loss is bad. Measures the performance of a classification model whose output is a probability value between 0 and 1. Measures the average number of bits needed to identify an event from the set.</description>
    </item>
    
    <item>
      <title>Overview of modern Continuous Integration tools</title>
      <link>https://mullikine.github.io/posts/review-of-continuous-integration-tools/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-continuous-integration-tools/</guid>
      <description>Circle CI Trust your CI/CD pipeline. Push code with confidence.
Automate your development process quickly, safely, and at scale.
Codeship Check in your code. Let us handle the rest. We provide a simple, turn-key SaaS CI/CD platform that is fast and flexible so that you can hit the ground running and build stuff that matters.
Runs the tests and deploys.
It replaces Circle CI.
Travis Easily sync your GitHub projects with Travis CI and you’ll be testing your code in minutes!</description>
    </item>
    
    <item>
      <title>Setting up .NET for XUnit</title>
      <link>https://mullikine.github.io/posts/dot-net/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dot-net/</guid>
      <description>I recently have been applying for jobs and so I decided to set up a modern .NET environment on Ubuntu with emacs and look into a unit testing suite called XUnit.
Setup Emacs omnisharp package installation 1  (package-install &amp;#39;omnisharp)   c# configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  (progn ;; c sharp ;; (add-hook &amp;#39;csharp-mode-hook &amp;#39;omnisharp-mode) ;; (add-hook &amp;#39;csharp-mode-hook #&amp;#39;company-mode) ;; (add-hook &amp;#39;csharp-mode-hook #&amp;#39;flycheck-mode) (eval-after-load &amp;#39;company &amp;#39;(add-to-list &amp;#39;company-backends &amp;#39;company-omnisharp)) (defun my-csharp-mode-setup () (omnisharp-mode) (company-mode) (flycheck-mode) (setq indent-tabs-mode nil) (setq c-syntactic-indentation t) (c-set-style &amp;#34;ellemtel&amp;#34;) (setq c-basic-offset 4) (setq truncate-lines t) (setq tab-width 4) (setq evil-shift-width 4) ;csharp-mode README.</description>
    </item>
    
    <item>
      <title>Software Design Principles – Scalability</title>
      <link>https://mullikine.github.io/posts/software-design-principles/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/software-design-principles/</guid>
      <description>Types of scalability https://elastisys.com/2015/09/10/scalability-design-principles/
Performance Parallelism and asynchronism is good.
Amdahl’s Law Performance does not scale perfectly linearly.
Some problems are simply better suited for tackling with a parallel approach.
Speedup of a program using multiple processors in parallel computing is limited by the sequential fraction of the program.
A limit to how much benefit we can get from increasing capacity.
Intended for parallel computing, not distributed systems.
Conclusion Try use components designed with parallelism and asynchronism in mind.</description>
    </item>
    
    <item>
      <title>Blogs and Vlogs</title>
      <link>https://mullikine.github.io/posts/blogs-and-vlogs/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/blogs-and-vlogs/</guid>
      <description>Blogs and vlogs These people have been influential to me.
2019    source type url Topics     Math4IQB vlog Math4IQB - YouTube Information Theory   Gwern Bransen blog GPT-2 Neural Network Poetry Gwern.net Haskell, NLP, R   Fabian Dablander blog Fabian Dablander - PhD Student Methods Statistics Math, statistics, latex   John Kitchen blog The Kitchin Research Group Emacs   John D.</description>
    </item>
    
    <item>
      <title>Coherence in Natural Language (2006)</title>
      <link>https://mullikine.github.io/posts/review-coherence-in-natural-language/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-coherence-in-natural-language/</guid>
      <description>Terminological mess The term cohesion does not figure in the index of the book.
Coherence vs cohesion &amp;ldquo;cohesion&amp;rdquo; for microstructures and &amp;ldquo;coherence&amp;rdquo; for macrostructures.
cohesion when talking about text and coherence when talking about discourse i.e. &amp;ldquo;semantics vs. pragmatics&amp;rdquo;
Issues covered in the book in the realm of coherence structures:
 cognitive science natural language engineering information extraction  Definitions Coherence structures ommitted: a chrestomathy of coherent vs incoherent text Reviews Coherence in natural language.</description>
    </item>
    
    <item>
      <title>Haskell operators and operator-like syntax</title>
      <link>https://mullikine.github.io/posts/haskell-operators/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-operators/</guid>
      <description>Haskell left arrow list comprehension I think &amp;lt;- is syntactic sugar in this situation, as opposed to an operator.
c &amp;lt;- s is a generator expression.
https://imada.sdu.dk/~rolf/Edu/DM22/F05/haskell-operatorer.pdf
1 2 3  import Data.Char (toUpper) [toUpper c | c &amp;lt;- s]   print a list 1 2 3  print [1,2,3] -- This is equivalent to putStrLn $ show [1,2,3]   1 2 3 4 5 6 7 8  quicksort1 :: (Ord a) =&amp;gt; [a] -&amp;gt; [a] quicksort1 [] = [] quicksort1 (x:xs) = let smallerSorted = quicksort1 [a | a &amp;lt;- xs, a &amp;lt;= x] biggerSorted = quicksort1 [a | a &amp;lt;- xs, a &amp;gt; x] in smallerSorted ++ [x] ++ biggerSorted print quicksort1 [5,1,2,3]   </description>
    </item>
    
    <item>
      <title>(WIP) Applying Multinomial Naive Bayes to NLP Problems: A Practical Explanation</title>
      <link>https://mullikine.github.io/posts/review-multinomial-naive-bayes-nlp/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-multinomial-naive-bayes-nlp/</guid>
      <description>Applying Multinomial Naive Bayes to NLP Problems: A Practical Explanation</description>
    </item>
    
    <item>
      <title>Searching hacker news</title>
      <link>https://mullikine.github.io/posts/searching-hacker-news/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/searching-hacker-news/</guid>
      <description>I create a script which can be used to search hacker news (or other sites) conveniently with title and contents queries.
1 2 3 4 5 6 7  eww &amp;#34;http://news.ycombinator.com&amp;#34; # How to search hacker news egr emacs site:news.ycombinator.com intitle:&amp;#34;email client&amp;#34; # terms -- title terms hn emacs -- email   Create the script hn 1 2 3 4 5 6  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null SITE=news.</description>
    </item>
    
    <item>
      <title>Misc LYAH notes</title>
      <link>https://mullikine.github.io/posts/haskell-lyah/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-lyah/</guid>
      <description>Related articles Haskell functions // Bodacious Blog  emacs Run haskell programs: babel + runhaskell 1 2 3 4 5 6 7 8 9  #+BEGIN_SRC haskell-n :sph nvc -pak rh :async :results none  main = do putStrLn &amp;#34;What is your name?&amp;#34; name &amp;lt;- getLine putStrLn $ name ++ &amp;#34;! This is a very nice name.&amp;#34; putStrLn &amp;#34;Where do you live?&amp;#34; city &amp;lt;- getLine putStrLn $ &amp;#34;Hey, I Love &amp;#34; ++ city ++ &amp;#34;!</description>
    </item>
    
    <item>
      <title>Taming term-mode</title>
      <link>https://mullikine.github.io/posts/taming-term/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/taming-term/</guid>
      <description>First attempt You can skip this and scroll down to the solution or read it to see some of the problems I was having with term.el.
Problems with term.el Any minor mode which is enabled while term is running will override bindings Therefore, if you can, make any such bindings that may interfere with term into global mappings instead.
1 2 3 4 5 6 7 8  ;; Comment this out ;; (define-key my-mode-map (kbd &amp;#34;M-k&amp;#34;) &amp;#39;avy-goto-char) ;; Unload binding (define-key my-mode-map (kbd &amp;#34;M-k&amp;#34;) nil) ;; Replace with this (define-key global-map (kbd &amp;#34;M-k&amp;#34;) &amp;#39;avy-goto-char)   gud-mode stole C-c C-a C-a is important in many programs for going to the start of the line.</description>
    </item>
    
    <item>
      <title>(WIP) Extending WordNut for generating blog titles</title>
      <link>https://mullikine.github.io/posts/extending-wordnut-for-generating-blog-titles/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-wordnut-for-generating-blog-titles/</guid>
      <description>Obtain an org-mode parser https://orgmode.org/worg/org-tools/index.html
Parse wordnut output to scrape synonyms from the buffer Given 2 words, create a list of synonyms for each Look for one word from each list with the same starting letter </description>
    </item>
    
    <item>
      <title>(WIP) How to play Dwarf Fortress (in fortress mode)</title>
      <link>https://mullikine.github.io/posts/dwarf-fortress/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dwarf-fortress/</guid>
      <description>Helpful links    name url     walkthrough https://df-walkthrough.readthedocs.io/en/latest/   legend http://dwarffortresswiki.org/index.php/DF2014:Map%5Flegend    Navigating left hand should sit on keys 1 to 4. right hand should sit on keys 6 to 9.
pinkies navigate bottom left to top right. middle fingers navigate top left to bottom right
I wanted to look for some symbols 1  unicode arrow | sed -e &amp;#39;/^[a-zA-Z]/d&amp;#39; -e &amp;#39;/^$/d&amp;#39; | tr &amp;#39;\n&amp;#39; &amp;#39; &amp;#39; | wrap 90 | sed &amp;#39;1,2d&amp;#39; | sed &amp;#39;8q&amp;#39;   1 2 3 4 5 6 7 8  ↻ ⇄ ⇅ ⇆ ⇇ ⇈ ⇉ ⇊ ⇍ ⇎ ⇏ ⇐ ⇑ ⇒ ⇓ ⇔ ⇕ ⇖ ⇗ ⇘ ⇙ ⇚ ⇛ ⇜ ⇝ ⇞ ⇟ ⇠ ⇡ ⇢ ⇣ ⇤ ⇥ ⇦ ⇧ ⇨ ⇩ ⇪ ⇫ ⇬ ⇭ ⇮ ⇯ ⇰ ⇱ ⇲ ⇳ ⇴ ⇵ ⇶ ⇷ ⇸ ⇹ ⇺ ⇻ ⇼ ⇽ ⇾ ⇿ ⌁ ⌃ ⌄ ⌤ ⍇ ⍈ ⍐ ⍗ ⍼ ⎋ ➔ ➘ ➙ ➚ ➛ ➜ ➝ ➞ ➟ ➠ ➡ ➢ ➣ ➤ ➥ ➦ ➧ ➨ ➩ ➪ ➫ ➬ ➭ ➮ ➯ ➱ ➲ ➳ ➴ ➵ ➶ ➷ ➸ ➹ ➺ ➻ ➼ ➽ ➾ ⟰ ⟱ ⟲ ⟳ ⟴ ⟵ ⟶ ⟷ ⟸ ⟹ ⟺ ⟻ ⟼ ⟽ ⟾ ⟿ ⤀ ⤁ ⤂ ⤃ ⤄ ⤅ ⤆ ⤇ ⤈ ⤉ ⤊ ⤋ ⤌ ⤍ ⤎ ⤏ ⤐ ⤑ ⤒ ⤓ ⤔ ⤕ ⤖ ⤗ ⤘ ⤙ ⤚ ⤛ ⤜ ⤝ ⤞ ⤟ ⤠ ⤡ ⤢ ⤣ ⤤ ⤥ ⤦ ⤧ ⤨ ⤩ ⤪ ⤭ ⤮ ⤯ ⤰ ⤱ ⤲ ⤳ ⤴ ⤵ ⤶ ⤷ ⤸ ⤹ ⤺ ⤻ ⤼ ⤽ ⤾ ⤿ ⥀ ⥁ ⥂ ⥃ ⥄ ⥅ ⥆ ⥇ ⥈ ⥉ ⥰ ⥱ ⥲ ⥳ ⥴ ⥵ ⥶ ⥷ ⥸ ⥹ ⥺ ⥻ ⦨ ⦩ ⦪ ⦫ ⦬ ⦭ ⦮ ⦯ ⦳ ⦴ ⦽ ⧪ ⧬ ⧭ ⨗ ⬀ ⬁ ⬂ ⬃ ⬄ ⬅ ⬆ ⬇ ⬈ ⬉ ⬊ ⬋ ⬌ ⬍ ⬎ ⬏ ⬐ ⬑ ⬰ ⬱ ⬲ ⬳ ⬴ ⬵ ⬶ ⬷ ⬸ ⬹ ⬺ ⬻ ⬼ ⬽ ⬾ ⬿ ⭀ ⭁ ⭂ ⭃ ⭄ ⭅ ⭆ ⭇ ⭈ ⭉ ⭊ ⭋ ⭌ ⭍ ⭎ ⭏ ⭚ ⭛ ⭜ ⭝ ⭞ ⭟ ⭠ ⭡ ⭢ ⭣ ⭤ ⭥ ⭦ ⭧ ⭨ ⭩ ⭪ ⭫ ⭬ ⭭ ⭮ ⭯ ⭰ ⭱ ⭲ ⭳ ⭶ ⭷ ⭸ ⭹ ⭺ ⭻ ⭼ ⭽ ⮀ ⮁ ⮂ ⮃ ⮄ ⮅ ⮆ ⮇ ⮈ ⮉ ⮊ ⮋ ⮌ ⮍ ⮎ ⮏ ⮔ ⮕ ⮘ ⮙ ⮚ ⮛ ⮜ ⮝ ⮞ ⮟ ⮠ ⮡ ⮢ ⮣ ⮤ ⮥ ⮦ ⮧ ⮨ ⮩ ⮪ ⮫ ⮬ ⮭ ⮮ ⮯ ⮰ ⮱ ⮲ ⮳ ⮴ ⮵ ⮶ ⮷ ⮸ ⮹ ⯬      key finger hand motion dimension     2 ring left ↓ ↕   8 ring right ↑ ↕   4 index left ← ↔   7 index right → ↔   3 middle left ↘ ⤡   8 middle right ↖ ⤡   1 pinkie left ↙ ⤢   9 pinkie right ↗ ⤢    I must say, these feel very unintuitive; perhaps as vim did when I first learned those.</description>
    </item>
    
    <item>
      <title>(WIP) Review of Language, trees, and geometry in neural networks</title>
      <link>https://mullikine.github.io/posts/language-trees-and-geometry-in-neural-networks/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/language-trees-and-geometry-in-neural-networks/</guid>
      <description>1906.02715 Visualizing and Measuring the Geometry of BERT
https://pair-code.github.io/interpretability/bert-tree/
https://pair-code.github.io/interpretability/context-atlas/blogpost/
Existing representation: word embeddings Language is made of discrete structures, yet neural networks operate on continuous data: vectors in high-dimensional space.
A successful language-processing network must translate this symbolic information into some kind of geometric representation—but in what form?
Word embeddings provide two well-known examples: distance encodes semantic similarity, while certain directions correspond to polarities (e.g. male vs. female).
New representation A recent, fascinating discovery points to an entirely new type of representation.</description>
    </item>
    
    <item>
      <title>Sensible Splits: Extending shackle.el</title>
      <link>https://mullikine.github.io/posts/making-shackle-split-sensibly/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/making-shackle-split-sensibly/</guid>
      <description>shackle.el provides a single interface for managing the way windows are displayed in emacs. This means you don&amp;rsquo;t have to dig into plugin code to provide ad-hoc advice to specific functions.
Unfortunately, it doesn&amp;rsquo;t provide an option to split sensibly, allowing you only to specify exactly how you want windows to be displayed.
For example, it will allow to you specify that all help buffers split to the right with the following rule.</description>
    </item>
    
    <item>
      <title>awk-ward mode for emacs</title>
      <link>https://mullikine.github.io/posts/awk-ward/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/awk-ward/</guid>
      <description>https://gitlab.com/kisaragi-hiu/awk-ward.el
This is a neat plugin that lets you edit awk scripts with real time feedback, displaying both the output and any errors.
Update awk-ward to enable updates on any buffer modification The problem as it has been designed to updates only when you are typing text in to the program.
Patch Use post-command-hook instead of post-self-insert-hook (07a56482) Commits Shane Mulligan / awk-ward.el GitLab
Demonstration of awk-ward with the patch working</description>
    </item>
    
    <item>
      <title>Review of CI tools for emacs</title>
      <link>https://mullikine.github.io/posts/continuous-integration-emacs/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/continuous-integration-emacs/</guid>
      <description>Emacs plugins  plugin list  magit-circleci magit-gh-pulls magit-gitflow jenkins jenkins-watch travis org-link-travis magit-circleci    Demonstration of jenkins.el for emacs 
TODO Review these jenkins plugins  plugin list  folders OWASP markup formatter build timeout crenditials binding timestamper workspace cleanup ant gradle pipeline github branch source pipeline: github groovy libraries pipeline: stage view git subversion ssh slaves matrix authorization strategy PAM authentication LDAP Email extension mailer    </description>
    </item>
    
    <item>
      <title>Extending magit with more convenient worktrees</title>
      <link>https://mullikine.github.io/posts/extending-magit/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-magit/</guid>
      <description>What is magit? It&amp;rsquo;s a really awesome git porcelain.
Using git worktree with magit to browse different versions of a repository https://magit.vc/manual/magit/Worktree.html
http://webcache.googleusercontent.com/search?q=cache:https://medium.com/@gaurav5430/git-using-git-worktree-to-run-2-versions-of-the-code-at-the-same-time-1b4586315a6c
Basic git worktree bindings This is because git manages the set of worktrees.
Magit makes use of this 1  % g (magit-worktree-status)   1  j magit-list-worktrees   1  find-function magit-list-worktrees    Example  1 2  cd &amp;#34;$MYGIT/kisaragi-hiu/awk-ward.el&amp;#34;; git worktree list --porcelain    This is where the info is stored: 1 2  cd &amp;#34;$MYGIT/kisaragi-hiu/awk-ward.</description>
    </item>
    
    <item>
      <title>emacs: demystifying emacs buttons</title>
      <link>https://mullikine.github.io/posts/emacs-get-function-for-button/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-get-function-for-button/</guid>
      <description>Buttons in emacs are a little bit of a black box.
This makes it difficult wish to extend or modify a mode that uses buttons: yasnippet, for example.
Here is how to find out what the button does before you click on it.
Get the function This is all you need for most cases.
(defun get-button-action () &amp;#34;Get the action of the button at point&amp;#34; (interactive) (let ((b (button-at (point)))) (if b (button-get b &amp;#39;action)))) Special case: help-mode and yasnippet Applying (get-button-action) in yasnippet very unhelpfully provides this help-button-action.</description>
    </item>
    
    <item>
      <title>Tremendous Task: Searching for code on GitHub with BigQuery and GHTorrent</title>
      <link>https://mullikine.github.io/posts/github-search-with-bigquery/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/github-search-with-bigquery/</guid>
      <description>Searching GitHub for regular expression matches in code is a tremendous task.
Prerequisites Set up the bq command https://cloud.google.com/bigquery/docs/bq-command-line-tool
Lots of money Sample search About US$5 per search.
This is cheaper than searching all files.
   shell variable function     $query a regular expression that searches the contents of files   $path_re a regex that matches on the file path   $path_re_exclude a regex that matches on the file path for pruning results    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #standardSQL SELECT sample_repo_name, sample_path, (SELECT STRING_AGG(snip) FROM snippets.</description>
    </item>
    
    <item>
      <title>Conveniently learn emacs bindings</title>
      <link>https://mullikine.github.io/posts/conveniently-learn-emacs-bindings/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/conveniently-learn-emacs-bindings/</guid>
      <description>Here&amp;rsquo;s the coolest thing I&amp;rsquo;ve made in the last few days.
This will allow you to fuzzy find maps and pretty print them.
 It&amp;rsquo;s useful for 2 reasons:  there are many modes which interfere with C-h k when you want to learn some bindings for a mode you are not in    Code (require &amp;#39;s) (defun my-new-buffer-frame (&amp;amp;optional contents bufname) &amp;#34;Create a new frame with a new empty buffer.</description>
    </item>
    
    <item>
      <title>Scrape URLs from eww region selection</title>
      <link>https://mullikine.github.io/posts/scrape-urls-from-eww-region-selection/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/scrape-urls-from-eww-region-selection/</guid>
      <description>The idea is you select a region of text on the screen and the text properties will be searched for URLs.
A new buffer is created with all the list of URLs in the region you selected.
This works on any emacs mode.
This also works with w3m for emacs.
If a browser is used through ansi-term or the like then emacs most likely wont be able to scrape these URLs from the text properties.</description>
    </item>
    
    <item>
      <title>PClean: A probabilistic scripting DSL</title>
      <link>https://mullikine.github.io/posts/pclean-gen-gpl/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/pclean-gen-gpl/</guid>
      <description>Links  MIT Probabilistic Computing Project Introduction | Gen GitHub - probcomp/Gen: A general-purpose probabilistic programming system with programmable inference  Other talks by MIT Probabilistic Computing Project: Videos, Talks, and Podcasts - MIT Probabilistic Computing Project
Tools Gen  a package for the Julia programming language. consists of multiple modeling languages that are implemented as DSLs in Julia and a Julia library for inference programming.  PClean  A probabilistic scripting DSL in the Gen package.</description>
    </item>
    
    <item>
      <title>Plant Intelligence</title>
      <link>https://mullikine.github.io/posts/plant-intelligence/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/plant-intelligence/</guid>
      <description>The Secret Life of Plants (1973) Pseudoscience.
The Power of Movement in Plants (Charles Darwin, 1880) ewwlinks +/&amp;#34;Darwin&amp;#34; &amp;#34;https://www.theparisreview.org/blog/2019/09/26/the-intelligence-of-plants/&amp;#34; Darwin floated the first modern ideation of plant intelligence in 1880.
The root of a plant has “the power of directing the movements of the adjoining parts” and thus “acts like the brain of one of the lower animals; the brain being seated within the anterior end of the body, receiving impressions from the sense organs and directing the several movements.</description>
    </item>
    
    <item>
      <title>Fused effects</title>
      <link>https://mullikine.github.io/posts/fused-effects/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/fused-effects/</guid>
      <description>Original video &amp;ldquo;Building Haskell Programs with Fused Effects&amp;rdquo; by Patrick Thomson - YouTube  Part of the GitHub semantic code team.
Install fused-effects stack install fused-effects Slides fused-effects is  a library for building Haskell programs an effect system providing fused, scoped, higher-order algebraic effects. performant, production-quality software suitable for industrial use.  Today, we&amp;rsquo;ll&amp;hellip;  describe the status quo of building Haskell programs explore how this status quo can be limiting show how fused-effects can overcome these limitations pinpoint fused-effects&amp;rsquo;s position in the design space  How are we to build programs in Haskell?</description>
    </item>
    
    <item>
      <title>Learning Haskell</title>
      <link>https://mullikine.github.io/posts/learning-haskell/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/learning-haskell/</guid>
      <description>Start with haskellbook.com and avoid learn you a haskell according to Tsoding.
My Haskell Setup - YouTube
Useful tools stack install hindent stack install hlint stack install repline stack install hasktags stack install importify hlint Apparently this is all you need to learn haskell.
Reading Monad transformers step-by-step https://page.mi.fu-berlin.de/scravy/realworldhaskell/materialien/monad-transformers-step-by-step.pdf $DUMP$NOTES/ws/haskell/reading/monad-transformers-step-by-step.txt
Module Data.Maybe Defines useful functions for dealing with optional values of type Maybe a.
Module Data.Map Defines finite maps.
Basic monads https://wiki.</description>
    </item>
    
    <item>
      <title>Differentiate org-mode bold face</title>
      <link>https://mullikine.github.io/posts/org-mode-bold/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/org-mode-bold/</guid>
      <description>The issue is that in a terminal, the generic bold face alone is not differentiable.
org-mode uses the generic bold face for text within asterisks.
Therefore we create a new face and give it a similar look but different colour to org-verbatim.
(defface org-bold &amp;#39;((t :foreground &amp;#34;#d2268b&amp;#34; :background &amp;#34;#2e2e2e&amp;#34; :weight bold :underline t )) &amp;#34;Face for org-mode bold.&amp;#34; :group &amp;#39;org-faces ) (setq org-emphasis-alist &amp;#39;((&amp;#34;*&amp;#34; ;; (bold :foreground &amp;#34;Orange&amp;#34; ) org-bold) (&amp;#34;/&amp;#34; italic) (&amp;#34;_&amp;#34; underline) (&amp;#34;=&amp;#34; ;; (:background &amp;#34;maroon&amp;#34; :foreground &amp;#34;white&amp;#34;) org-verbatim verbatim) (&amp;#34;~&amp;#34; ;; (:background &amp;#34;deep sky blue&amp;#34; :foreground &amp;#34;MidnightBlue&amp;#34;) org-code verbatim) (&amp;#34;+&amp;#34; (:strike-through t)))) ;; Because spacemacs had different ideas about the verbatim background (set-face-background &amp;#39;org-bold &amp;#34;#2e2e2e&amp;#34;) (set-face-background &amp;#39;org-verbatim &amp;#34;#2e2e2e&amp;#34;) </description>
    </item>
    
    <item>
      <title>Hitchhiker&#39;s Guide To The Galaxy – The Infocom Game, on Ubuntu, in a terminal!</title>
      <link>https://mullikine.github.io/posts/hhgttg/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/hhgttg/</guid>
      <description>Setup 1 2 3 4 5 6 7  cd git clone &amp;#34;https://gitlab.com/DavidGriffith/frotz&amp;#34; git clone &amp;#34;https://github.com/historicalsource/hitchhikersguide&amp;#34; apt install libao-dev apt install libsndfile-dev apt install libsamplerate-dev apt install libmodplug-dev   Play 1  ~/frotz/frotz ~/hitchhikersguide/COMPILED/s4.z3   Recording of hhgttg running</description>
    </item>
    
    <item>
      <title>Convert hydra to regular bindings</title>
      <link>https://mullikine.github.io/posts/convert-hydra-to-regular-bindings/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/convert-hydra-to-regular-bindings/</guid>
      <description>The problem: which-key doesn&amp;rsquo;t work with hydra I had made a bunch of hydras which I would simply use as basic menu systems
This is a bit of an anti-pattern.
Hydras should only be used for creating temporary modes.
The solution: create a macro which converts the hydras into regular bindings Prerequisites 1 2 3 4 5 6 7  (defun sed (command stdin) &amp;#34;wrapper around sed&amp;#34; (interactive) (setq stdin (str stdin)) (setq command (concat &amp;#34;sed &amp;#39;&amp;#34; (str command) &amp;#34;&amp;#39;&amp;#34;)) (sh-notty command stdin) )   The aim Wrap a defhydra with the convert-hydra-to-sslk macro to turn it into regular keybindings.</description>
    </item>
    
    <item>
      <title>fzf vs helm, ivy and completing-read</title>
      <link>https://mullikine.github.io/posts/helm-ivy-and-completing-read/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/helm-ivy-and-completing-read/</guid>
      <description>Helm, ivy and completing-read are 3 emacs-lisp alternatives to fzf.
They are all a little different to hack on / configure though.
helm Select from a list There are different ways to select from a list.
1 2 3 4 5 6 7 8 9 10 11 12 13  (defun fz-must-match (list &amp;amp;optional prompt) (setq prompt (or prompt &amp;#34;:&amp;#34;)) (helm-comp-read prompt list :must-match t)) ;; This is very useful (defun fz-default-return-query (list &amp;amp;optional prompt) (setq prompt (or prompt &amp;#34;:&amp;#34;)) (helm-comp-read prompt list :must-match &amp;#39;confirm)) ;; But I don&amp;#39;t like confirm things (defun fz-default-return-query (list &amp;amp;optional prompt) (setq prompt (or prompt &amp;#34;:&amp;#34;)) (helm-comp-read prompt list :must-match &amp;#39;nil))   Getting the list of options in another window tv takes a string and opens a window with it.</description>
    </item>
    
    <item>
      <title>Interesting emacs packages (Sep 2019)</title>
      <link>https://mullikine.github.io/posts/emacs-packages-21.09.19/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-packages-21.09.19/</guid>
      <description>Helpful.el GitHub - Wilfred/helpful: A better Emacs help buffer
Helpful is a replacement for help buffers that provides much more contextual information
Interesting features It can search all loaded elisp files for references to a symbol.
(define-button-type &amp;#39;helpful-all-references-button &amp;#39;action #&amp;#39;helpful--all-references &amp;#39;symbol nil &amp;#39;callable-p nil &amp;#39;follow-link t &amp;#39;help-echo &amp;#34;Find all references to this symbol&amp;#34;) (defun helpful--all-references (button) &amp;#34;Find all the references to the symbol that this BUTTON represents.&amp;#34; (let ((sym (button-get button &amp;#39;symbol)) (callable-p (button-get button &amp;#39;callable-p))) (cond ((not callable-p) (elisp-refs-variable sym)) ((functionp sym) (elisp-refs-function sym)) ((macrop sym) (elisp-refs-macro sym))))) parsec.</description>
    </item>
    
    <item>
      <title>Best emacs tetris in emacs 26&#43;</title>
      <link>https://mullikine.github.io/posts/emacs-tetris-nice/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-tetris-nice/</guid>
      <description>emacs 27 has an update to emacs&amp;rsquo; tetris mode which makes the glyphs display larger on higher DPI screens.
This script will download that update from git.savannah.gnu.org and display tetris in a distraction free environment for the ultimate productivity.
Symlinks If you symlink this script to etetris-vt100 and run that instead, you will get the animated and striking black and white terminal version.
1  ln -s etetris etetris-vt100   If you symlink this script to etetris-xterm and run that instead, you will get the vivid color terminal version.</description>
    </item>
    
    <item>
      <title>empirical: probability, theory and evidence</title>
      <link>https://mullikine.github.io/posts/empirical/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/empirical/</guid>
      <description>empirical  The word means:  in practice experimental non-philosophical scientific    Probability Empirical probability The empirical (or experimental) probability of an event is an &amp;ldquo;estimate&amp;rdquo; that an event will occur based upon how often the event occurred after collecting data from an experiment in a large number of trials.
Theoretical probability You do not actually conduct an experiment.
Political theory Empirical political theory Concerned with &amp;lsquo;what is.&amp;rsquo;</description>
    </item>
    
    <item>
      <title>Curling the paged GitHub API</title>
      <link>https://mullikine.github.io/posts/curling-the-paged-github-api/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/curling-the-paged-github-api/</guid>
      <description>The GitHub API The GitHub API is useful for many things including running searches on issues, repositories and contributors.
It makes use of pagination and rate limiting.
We like the convenience of curl on the command line and don&amp;rsquo;t wish to learn another tool.
Therefore we make a wrapper script around curl to take care of authentication and pagination.
Tools used to build the gh-curl script:    Program Purpose     jq wrangling json   yq wrangling yaml   curl making http requests   grep matching PCRE in the URL    The gh-curl script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140  #!</description>
    </item>
    
    <item>
      <title>Circumventing paywalls with eww browser</title>
      <link>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser/</guid>
      <description>Use Google cache Often Google cache has a full copy of an article.
Check for the existence of the cache for a given URL as some URLs may not be cached.
I had originally used curl for this.
Circumventing paywalls with eww browser and curl // Bodacious Blog
This is not an accurate science. Sometimes the cache is needed and sometimes it is not, but the more information we bring in (such as if the cache exists), the better, as this leads to a more informed decision.</description>
    </item>
    
    <item>
      <title>Didactic emacs-lisp macro example (ie. a tutorial)</title>
      <link>https://mullikine.github.io/posts/macro-tutorial/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/macro-tutorial/</guid>
      <description>In this tutorial we build a function b which allows you to run shell code within elisp syntax (it looks like emacs lisp).
This tutorial is useful for learning to write emacs-lisp macros but is also useful for understanding macros of any language.
First some prerequisite functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  (defmacro shut-up-c (&amp;amp;rest body) &amp;#34;This works for c functions where shut-up does not.</description>
    </item>
    
    <item>
      <title>Getting arxiv in the terminal</title>
      <link>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</guid>
      <description>It all starts with this emacs plugin 1  (require &amp;#39;biblio-arxiv)   We create a bash script We name it arxiv-summary.
Cant name this &amp;lsquo;as&amp;rsquo; because it interferes with pip.
Sometimes packages installed wtih pip need the assembler.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!</description>
    </item>
    
    <item>
      <title>Reading YouTube rather than watching it</title>
      <link>https://mullikine.github.io/posts/reading-youtube-rather-than-watching-it/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-youtube-rather-than-watching-it/</guid>
      <description>It all starts with youtube-dl youtube-dl is a YouTube video downloader. You can install it with sudo pip install youtube-dl.
Let&amp;rsquo;s make some scripts Use the spaCy NLP library to semantically segregate sentences.
Segment-sentences 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #!/usr/bin/env python3.5 #!/usr/bin/env python3.6 # -*- coding: utf-8 -*- # python3.6 -m spacy download en import sys import spacy text = sys.</description>
    </item>
    
    <item>
      <title>Adding new digraphs to vim and evil</title>
      <link>https://mullikine.github.io/posts/adding-new-digraphs-to-vim-and-evil/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/adding-new-digraphs-to-vim-and-evil/</guid>
      <description>I run this command to search for symbols but it often does not have the symbol I require vimhelp digraph-table ·	.M	0xb7	183	MIDDLE DOT ⇔	==	21D4	8660	LEFT RIGHT DOUBLE ARROW ∀	FA	2200	8704	FOR ALL ∂	dP	2202	8706	PARTIAL DIFFERENTIAL ∃	TE	2203	8707	THERE EXISTS ∅	/0	2205	8709	EMPTY SET ∆	DE	2206	8710	INCREMENT ∇	NB	2207	8711	NABLA ∈	(-	2208	8712	ELEMENT OF ∋	-)	220B	8715	CONTAINS AS MEMBER ∏	*P	220F	8719	N-ARY PRODUCT ` ∑	+Z	2211	8721	N-ARY SUMMATION ` ≤	=&amp;lt;	2264	8804	LESS-THAN OR EQUAL TO ≥	&amp;gt;=	2265	8805	GREATER-THAN OR EQUAL TO ≪	&amp;lt;*	226A	8810	MUCH LESS-THAN ≫	*&amp;gt;	226B	8811	MUCH GREATER-THAN I had to Google for these symbols as they were not in the list  List of symbols we wish to make into digraphs  ℕ - double-struck capital N ℤ - Zahlen - double-struck capital Z ℝ - double-struck capital R    Run the unicode program to find the decimal ID for each symbol we want unicode ℕ unicode ℤ unicode ℝ Add them to the vim digraph table Vim uses the decimal value of the symbol.</description>
    </item>
    
    <item>
      <title>Ameliorating list-processes</title>
      <link>https://mullikine.github.io/posts/ameliorating-list-processes/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/ameliorating-list-processes/</guid>
      <description>What is list-processes? list-processes is an emacs-lisp function which displays daemons running as subprocesses under emacs.
The trouble with list-processes  It doesn&amp;rsquo;t format the command string  Commands with multiline arguments are printed verbatim Arguments are not quoted    This means that commands may flow several lines (as many as it takes to print out the full command).
Also, 90% of the time you can&amp;rsquo;t copy the command and paste in the terminal because individual parameters with spaces are split into separate arguments.</description>
    </item>
    
    <item>
      <title>Asking for help: methods</title>
      <link>https://mullikine.github.io/posts/asking-for-help-irc-asciinema/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/asking-for-help-irc-asciinema/</guid>
      <description>IRC and asciinema I will usually create a recording of my terminal and ask over IRC.
Recordings 

&amp;lt;2019-10-30 Wed&amp;gt;  #racket 20:03 &amp;lt; libertyprime&amp;gt; hey guys. how would i hide the output of the sexps being evaluated? https://asciinema.org/a/qZolO6uyMFvCma8RvYNI0k9YK I can&amp;#39;t wrap in (void (begin ...)) because it will complain 20:04 &amp;lt; libertyprime&amp;gt; http://ix.io/20jR/rkt</description>
    </item>
    
    <item>
      <title>Circumventing paywalls with eww browser and curl</title>
      <link>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser-and-curl/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser-and-curl/</guid>
      <description>Use Google cache and curl Often Google cache has a full copy of an article.
We use curl to check the existence of the cache for a given URL as some URLs may not be cached.
This is not an accurate science. Sometimes the cache is needed and sometimes it is not, but the more information we bring in (such as if the cache exists), the better, as this leads to a more informed decision.</description>
    </item>
    
    <item>
      <title>Uniqifying emacs apps</title>
      <link>https://mullikine.github.io/posts/uniqifying-emacs-apps/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/uniqifying-emacs-apps/</guid>
      <description>The problem Many useful emacs apps can only have one instance running at a time due to working with a fixed buffer name.
 Examples of useful apps which you can only run one of  eww Perl-REPL dictionary-search calculator    The fix: rename the buffer to tack on a hash after it is created Create the advice function (defun unique-buffer-generic-after-advice (&amp;amp;rest args) &amp;#34;Give the buffer a unique name&amp;#34; (ignore-errors (let* ((hash (short-hash (str (time-to-seconds)))) (new-buffer-name (pcre-replace-string &amp;#34;(\\*?</description>
    </item>
    
    <item>
      <title>Fixing hugo terminal theme</title>
      <link>https://mullikine.github.io/posts/hugo-setup-terminal-theme/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mullikine.github.io/posts/hugo-setup-terminal-theme/</guid>
      <description>https://github.com/panr/hugo-theme-terminal/issues/43
I had to add this to config.toml to get the terminal theme to work.
[params] fullWidthTheme = false centerTheme = false </description>
    </item>
    
    <item>
      <title>About this weblog</title>
      <link>https://mullikine.github.io/posts/about/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/about/</guid>
      <description>Purpose I&amp;rsquo;ve started this blog to cast some light on my activities.
My goal is to do all of my programming through a terminal, forever, and see where that leads.
Big topics I&amp;rsquo;ll be covering:
 emacs Natural Language Processing python vim math  Thanks for reading!
Colophon This blog was made with hugo, a static site generator, emacs and a bit of my own handiwork.</description>
    </item>
    
    <item>
      <title>Lispy vs Paredit: The convolute function</title>
      <link>https://mullikine.github.io/posts/convolute/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/convolute/</guid>
      <description>The following illustrates the difference between lispy&amp;rsquo;s convolute function and paredit&amp;rsquo;s convolute function.
Original sexp (a a1 (b b1 (c c1 (d d1 (e) d9) c9) b9) a9) (special-lispy-convolute)  binding C  Swaps parent with grandparent including their elements.
Current element holds still.
Reversible.
;; Typing C on (c results in this (b b1 (a a1 (c c1 (d d1 (e) d9) c9) a9) b9) (paredit-convolute-sexp &amp;amp;optional N)  binding M-P  Swaps parent with grandparent including their elements.</description>
    </item>
    
    <item>
      <title>Notes from CodeCraft 06.08.19: Juju and Application Modelling</title>
      <link>https://mullikine.github.io/posts/codecraft-06.08.19/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/codecraft-06.08.19/</guid>
      <description>Tim Penhey &amp;ndash; lecture for 3rd year info sci Juju and Application Modelling Self-contained applications.
devops    Not just writing code, deploying
Also, monitoring, upgrading.
     Not just automation
Operating is a task in itself. Everything you do with softwrae beyond installing it.
     Software is complicated
most of the time adding code.
    django     gunicorn (Green Unicorn)</description>
    </item>
    
    <item>
      <title>Haskell at Facebook</title>
      <link>https://mullikine.github.io/posts/haskell-at-facebook/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-at-facebook/</guid>
      <description>Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  FXL Feature eXtraction Language DEPRECATED. Used before 2015. Scrapped. Used in combatting spam on the social networking service. FXL described as a narrowly-optimized implementation of a well-chosen subset of Standard ML (with some customized syntax). FXL offers two key advantages: it is simple and easy to write, yet extremely efficient for Facebook-sized workloads.</description>
    </item>
    
    <item>
      <title>Kalman Filter</title>
      <link>https://mullikine.github.io/posts/sp-kalman-filter/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/sp-kalman-filter/</guid>
      <description>Components of a Kalman Filter    Term Rank Describes Description     \(A_t\) Matrix \((n × n)\) state change Describes how the state evolves from \(t - 1\) to \(t\) without controls or noise.   \(B_t\) Matrix \((n × l)\) control change Describes how the control \(u_t\) changes the state from \(t - 1\) to \(t\).   \(C_t\) Matrix \((k × n)\) maps state to observation Describes how to map the state \(x_t\), to an observation \(z_t\).</description>
    </item>
    
    <item>
      <title>Making emacs-lisp wrappers for telco commands</title>
      <link>https://mullikine.github.io/posts/emacs-telco-commands/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-telco-commands/</guid>
      <description>Emacs scripts for bash-related tasks which could benefit from search and autocompletion 1 2 3 4 5 6 7 8 9  (require &amp;#39;my-utils) (require &amp;#39;my-nix) ;; lsof -i :55555 ;; (port2pid 55555) (defun port2process (port) (sh-notty (concat &amp;#34;lsof -i:&amp;#34; (str port)))) (defalias &amp;#39;portgrep &amp;#39;port2process) (defalias &amp;#39;port2pid &amp;#39;port2process)   (port2pid 55555) </description>
    </item>
    
    <item>
      <title>Notes from CodeCraft 03.07.18: Scott Automation</title>
      <link>https://mullikine.github.io/posts/codecraft-03.07.18/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/codecraft-03.07.18/</guid>
      <description>Scott Automation SCOTT - Automation + Robotics Scott
Started 100 years ago in Dunedin.
Milking cows TOF - time of flight.
Meatworks in Balclutha. Detecting Ribs Tried CNN Labelled the data but it wasn&amp;rsquo;t as good as the support vector machine (because the SVM had been trained over 10 years).
Visualise radiation from their radiation room Chris Mein Maps scattered around Dunedin.
In property services.
First Get data into GIS format.</description>
    </item>
    
    <item>
      <title>haskellrank – hackerrank haskell</title>
      <link>https://mullikine.github.io/posts/haskellrank/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskellrank/</guid>
      <description>Tsoding HackerRank in Haskell &amp;ndash; HaskellRank #01 - YouTube  Imperative style (wrong) Haskell is about declarative programming, not imperative.
 1 2  10 5  
1 2 3 4 5 6 7 8  solveMeFirst a b = a + b main :: IO () main = do val1 &amp;lt;- readLn val2 &amp;lt;- readLn let sum = solveMeFirst val1 val2 print sum   15 interact function Takes a function that takes string and returns a string and applies a side-effect to the output (typically, printing to screen).</description>
    </item>
    
    <item>
      <title>Copy text from screen with Tesseract</title>
      <link>https://mullikine.github.io/posts/copy-text-from-screen-with-tesseract/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/copy-text-from-screen-with-tesseract/</guid>
      <description>Add binding to xmonad 1  , ((modm .|. mod1Mask, xK_w ), spawn &amp;#34;win capture-text screen &amp;amp;&amp;#34;)   Add case to win script  Upscale the image by 300% to make the OCR more reliable.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  capture-text) { opt=&amp;#34;$1&amp;#34; shift dir=$DUMP$HOME/notes2018/ws/screenshots cd &amp;#34;$dir&amp;#34; tf_image=&amp;#34;$(ux tf $(date-ts)_screen png &amp;#34;$dir&amp;#34; || echo /dev/null)&amp;#34; scaled_image=&amp;#34;$(ux tf screen_scaled png || echo /dev/null)&amp;#34; case &amp;#34;$opt&amp;#34; in screen) { import &amp;#34;$tf_image&amp;#34; } ;; root) { import -window root &amp;#34;$tf_image&amp;#34; } ;; esac if !</description>
    </item>
    
    <item>
      <title>Research: Accessing Repository Hosting Services</title>
      <link>https://mullikine.github.io/posts/accessing-repository-hosting-services/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/accessing-repository-hosting-services/</guid>
      <description>Questions/Answers  Is Google Code [Search] still accessible through an API? No, The API is gone.  Look into software for accessing APIs GitHub API apt apt search github Results
libghc-github-dev/xenial 0.13.2-4build1 amd64 Haskell Github API libghc-github-doc/xenial,xenial 0.13.2-4build1 all Haskell Github API; documentation libghc-github-prof/xenial 0.13.2-4build1 amd64 Haskell Github API; profiling libraries  Common Lisp Github API  ```text cl-github-v3/xenial,xenial 20130312-1 all Common Lisp interface to the github V3 API ```  pip pip search github Results</description>
    </item>
    
    <item>
      <title>Research: Source Code Retrieval from Large Software Libraries</title>
      <link>https://mullikine.github.io/posts/source-code-retrieval-from-large-software-libraries/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/source-code-retrieval-from-large-software-libraries/</guid>
      <description>External [[file:/home/shane/dump/home/shane/notes2018/uni/cosc/480-project_FY/research/Source Code Retrieval from Large Software Libraries for Automatic.pdf][SCR from LSL for ABL.pdf]]
reading +1 source code retrieval large ` # Chapter 1: Introduction ` reading +7 source code retrieval large ` # Chapter 2: Related Work ` reading +12 source code retrieval large ` # Chapter 3: Models for Document Retrieval ` reading +25 source code retrieval large ` # Chapter 4: Information Retrieval For Bug Localization ` reading +31 source code retrieval large ` # Chapter 5: Incorporating Version Histories In Ir-Based Bug Localization ` reading +51 source code retrieval large ` # Chapter 6: Assisting Code Search With Automatic Query Reformulation For Bug Localization ` reading +79 source code retrieval large ` # Chapter 7: Exploiting Source Code Proximity And Order With Markov Random Fields ` reading +109 source code retrieval large ` # Chapter 8: A Retrieval Engine For Bug Localization:Terrier+ ` reading +114 source code retrieval large ` # Chapter 9: Conclusions ` Aim Mine the defect and ifle modification related knowledge that is always buried in the software repositories and to incorporate this knowledge that is always buried</description>
    </item>
    
    <item>
      <title>cmake</title>
      <link>https://mullikine.github.io/posts/cmake/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/cmake/</guid>
      <description>Resources learnxinyminutes   1 2 3 4 5 6 7 8 9 10 11 12 13  semver Semantic Version https://semver.org/ Given a version number MAJOR.MINOR.PATCH, increment the: - MAJOR version when you make incompatible API changes, - MINOR version when you add functionality in a backwards-compatible manner, and - PATCH version when you make backwards-compatible bug fixes. Additional labels for pre-release and build metadata are available as extensions to the MAJOR.</description>
    </item>
    
    <item>
      <title>Practical macros in Racket</title>
      <link>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</guid>
      <description>Original article Practical macros in Racket and how to work with them  This is a copy of Kevin R. Stravers article above, formatted in org-mode with some minor changes.
 TLDR You can ignore everything except define-syntax-parser if you&amp;rsquo;re new. In essence it&amp;rsquo;s a way to define macros in a clean manner.
Explanation of syntax: define-syntax-parser
An example of define-syntax-parser: Generating C with racket // Bodacious Blog
  Practical macros in Racket and how to work with them A macro is central in any Lisp and must be mastered in order to master the language.</description>
    </item>
    
    <item>
      <title>String quoting utility</title>
      <link>https://mullikine.github.io/posts/string-quoting-utility/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/string-quoting-utility/</guid>
      <description>premise This perl script enables you to do code generation and intelligent &amp;lsquo;quoting&amp;rsquo; and &amp;lsquo;unquoting&amp;rsquo;.
examples While coding, it might be necessary to take a chunk of code and turn it into a string input
 1 2 3 4 5  getopts(&amp;#34;d:Jufnbthl&amp;#34;, \%options); if (defined $options{d}) { $delim = $options{d}; }  
pipe the input into the q script
1  cat | q   &amp;#34;getopts(\&amp;#34;d:Jufnbthl\&amp;#34;, \\%options);\n\nif (defined $options{d}) {\n $delim= $options{d};\n}&amp;#34; cmd script for bash code generation Basic version, without the q script.</description>
    </item>
    
    <item>
      <title>Javascript syntax</title>
      <link>https://mullikine.github.io/posts/javascript-syntax/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/javascript-syntax/</guid>
      <description>1 2 3 4 5 6 7  lambda [javascript] [ES6] Comes in 2 flavors: - function expression - arroy function expression   arrow function expression https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow%5Ffunctions
function expression (this is just a lambda?) https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function
1 2 3  const getRectArea = function(width, height) { return width * height; };    Rewriting function expressions as arrow function expressions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  var elements = [ &amp;#39;Hydrogen&amp;#39;, &amp;#39;Helium&amp;#39;, &amp;#39;Lithium&amp;#39;, &amp;#39;Beryllium&amp;#39; ]; // This statement returns the array: [8, 6, 7, 9] elements.</description>
    </item>
    
    <item>
      <title>Send encrypted messages using your ssh key</title>
      <link>https://mullikine.github.io/posts/use-ssh-key-to-encrypt-messages/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/use-ssh-key-to-encrypt-messages/</guid>
      <description>Create self-decrypting encrypted files using your ssh public key. The self decrypting file will only decrypt if you have the private key. Only works on small files like short messages.
The script makemsg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  #!</description>
    </item>
    
    <item>
      <title>Python data structures</title>
      <link>https://mullikine.github.io/posts/python-data-structures/</link>
      <pubDate>Fri, 12 Oct 2012 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-data-structures/</guid>
      <description>bidict https://bidict.readthedocs.io/en/master/basic-usage.html
ordereddict 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  import collections print(&amp;#39;dict :&amp;#39;, end=&amp;#39; &amp;#39;) d1 = {} d1[&amp;#39;a&amp;#39;] = &amp;#39;A&amp;#39; d1[&amp;#39;b&amp;#39;] = &amp;#39;B&amp;#39; d1[&amp;#39;c&amp;#39;] = &amp;#39;C&amp;#39; d1[&amp;#39;d&amp;#39;] = &amp;#39;D&amp;#39; d1[&amp;#39;e&amp;#39;] = &amp;#39;E&amp;#39; d2 = {} d2[&amp;#39;e&amp;#39;] = &amp;#39;E&amp;#39; d2[&amp;#39;d&amp;#39;] = &amp;#39;D&amp;#39; d2[&amp;#39;c&amp;#39;] = &amp;#39;C&amp;#39; d2[&amp;#39;b&amp;#39;] = &amp;#39;B&amp;#39; d2[&amp;#39;a&amp;#39;] = &amp;#39;A&amp;#39; print(d1 == d2) print(&amp;#39;OrderedDict:&amp;#39;, end=&amp;#39; &amp;#39;) d1 = collections.</description>
    </item>
    
    <item>
      <title>Ruby operators</title>
      <link>https://mullikine.github.io/posts/ruby-operators/</link>
      <pubDate>Wed, 17 Jun 2009 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/ruby-operators/</guid>
      <description>References https://www.tutorialspoint.com/ruby/ruby%5Foperators.htm  double pipe ||= 
1 2 3  def repos @repos ||= init_repos end   ||= behaves like a || a = b i.e. it only assigns when a is not truthy.</description>
    </item>
    
    <item>
      <title>Xenolinguistics</title>
      <link>https://mullikine.github.io/posts/xenolinguistics/</link>
      <pubDate>Mon, 16 Feb 2009 00:00:00 +0900</pubDate>
      
      <guid>https://mullikine.github.io/posts/xenolinguistics/</guid>
      <description>Real research The study of what form alien languages might take The question of what form alien languages might take and the possibility for humans to recognize and translate them has been part of the linguistics and language studies courses, e.g., at the Bowling Green State University (2001).
A lesson from star trek Xenolinguistics - Star Trek TNG - The Ensigns of Command - YouTube
Zismareth. What did I just say?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://mullikine.github.io/posts/review-of-the-future-of-tech-with-kevin-scott-and-guests-microsoft-build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-the-future-of-tech-with-kevin-scott-and-guests-microsoft-build/</guid>
      <description>+ title = &amp;#34;Review of &amp;#39;The future of tech, with Kevin Scott and guests // Microsoft Build&amp;#39;&amp;#34; author = [&amp;#34;Shane Mulligan&amp;#34;] date = 2020-05-21T00:00:00+08:00 keywords = [&amp;#34;GPT-2&amp;#34;, &amp;#34;tooling&amp;#34;, &amp;#34;nlp&amp;#34;] tags = [&amp;#34;GPT-2&amp;#34;, &amp;#34;tooling&amp;#34;, &amp;#34;nlp&amp;#34;] draft = false +    Original video :: https://www.pscp.tv/Microsoft/1OyKAYWPRrWKb?t=29m19s Summary     At 29 min you can see a demo of code generation from comments.  This is similar to what deep tabnine currently does, though probably uses a more powerful language model.</description>
    </item>
    
    <item>
      <title>Write You A Haskell</title>
      <link>https://mullikine.github.io/posts/write-you-a-haskell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mullikine.github.io/posts/write-you-a-haskell/</guid>
      <description>This is just a casual writeup of WYAH as I read through it.
 Original article http://dev.stephendiehl.com/fun/ http://dev.stephendiehl.com/fun/002%5Fparsers.html Code https://github.com/sdiehl/write-you-a-haskell  We will build a small functional language called Fun which is a partial Haskell 2010 toy language; complete with:
 a parser type inference datatypes pattern matching desugaring typeclasses higher-kinded types monadic IO arbitrary-rank polymorphism records Core language STG intermediate language lazy evaluation interpreter native code generator a runtime, and several optimization passes.</description>
    </item>
    
  </channel>
</rss>