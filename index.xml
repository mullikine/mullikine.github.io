<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bodacious Blog</title>
    <link>https://mullikine.github.io/</link>
    <description>Recent content on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Dec 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generate yasnippet from vimsnippet</title>
      <link>https://mullikine.github.io/posts/generate-yasnippets-from-vimshippets/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/generate-yasnippets-from-vimshippets/</guid>
      <description>write the script vimsnippet2yasnippet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null while [ $# -gt 0 ]; do opt=&amp;#34;$1&amp;#34;; case &amp;#34;$opt&amp;#34; in &amp;#34;&amp;#34;) { shift; }; ;; -d) { dir=&amp;#34;$2&amp;#34; shift shift } ;; *) break; esac; done stdin_exists() { !</description>
    </item>
    
    <item>
      <title>Permalinks for substrings in various documents</title>
      <link>https://mullikine.github.io/posts/getting-permalinks-for-substrings-in-man-pages-urls-and-other-files/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/getting-permalinks-for-substrings-in-man-pages-urls-and-other-files/</guid>
      <description>The idea is I select some text and press g y and emacs or vim will provide me with a command to go to that section of that file.
example usage of results 1  emacshelp +/&amp;#34;Major modes specialize Emacs for editing or interacting with particular&amp;#34; &amp;#34;(elisp) Major Modes&amp;#34;   1  ewwlinks +/&amp;#34;\* When ~~ is pressed, the Expect interpreter runs interactively.\&amp;#34;&amp;#34; &amp;#34;https://wiki.tcl-lang.org/page/interact&amp;#34;   1  man +/&amp;#34;For example, here are some things Expect can do:&amp;#34; &amp;#34;expect(1)&amp;#34;   emacs functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  (defun get-path (&amp;amp;optional soft) (interactive) ;; (xc-m (s/rp (buffer-file-name))) (or (and (eq major-mode &amp;#39;Info-mode) (if soft (concat &amp;#34;(&amp;#34; (basename Info-current-file) &amp;#34;) &amp;#34; Info-current-node) (concat Info-current-file &amp;#34;.</description>
    </item>
    
    <item>
      <title>Reading 23.12.19</title>
      <link>https://mullikine.github.io/posts/reading-23.12.19/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-23.12.19/</guid>
      <description>AI NLP  Language Engineering; Harnessing the Power of Language Google AI Blog: ALBERT: A Lite BERT for Self-Supervised Learning of Language Representations  Computer Vision  ObjectNet  Automated testing  Cucumber | Tools &amp;amp; techniques that elevate teams to greatness Writing Features - Gherkin Language - Behat 2.5.3 documentation  Information Retrieval  Why databases use ordered indexes but programming uses hash tables (evanjones.ca)  Programming languages haskell parsers  An introduction to parsing text in Haskell with Parsec - Nick.</description>
    </item>
    
    <item>
      <title>Learning PureScript</title>
      <link>https://mullikine.github.io/posts/learning-purescript/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/learning-purescript/</guid>
      <description> Source material Read PureScript by Example | Leanpub Hack for backward compatibility | OCaml vs Haskell  1  ewwlinks +/&amp;#34;1.1 Functional JavaScript&amp;#34; &amp;#34;https://leanpub.com/purescript/read#leanpub-auto-functional-javascript&amp;#34;   </description>
    </item>
    
    <item>
      <title>Automating build systems for many languages</title>
      <link>https://mullikine.github.io/posts/build-systems/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/build-systems/</guid>
      <description>Related reading (more information) Languages supported by my development environment // Bodacious Blog  I have automated my interaction with these build tools.
This list does not include my emacs environment; it&amp;rsquo;s not even close to being exhaustive.
   name language example     aribtrary dotfiles (many) * .compton.conf. Kill and restart compton   make * list and fuzzy select targets then run them   pip, setup.</description>
    </item>
    
    <item>
      <title>Automating TOR and TPB</title>
      <link>https://mullikine.github.io/posts/automating-tor-and-the-pirate-bay/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-tor-and-the-pirate-bay/</guid>
      <description>Here&amp;rsquo;s a controversial post.
Disclaimer: I do not use The Pirate Bay for piracy and this is here for educational purposes only.
Patch w3m I patched w3m to send the magnet url under the cursor to the clipboard.
I&amp;rsquo;ll put it up here when I find it.
Create the tpb script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  #!</description>
    </item>
    
    <item>
      <title>Languages supported by my development environment</title>
      <link>https://mullikine.github.io/posts/emacs-languages-supported/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-languages-supported/</guid>
      <description>Related reading Setting up LSP with emacs (Go, Java, Python, Rust, C++, Haskell) // Bodacious Blog Build Systems support // Bodacious Blog  State of programming language support in my own environment If I havent filled in any blanks it&amp;rsquo;s because I haven&amp;rsquo;t investigated.
This document is in the early stages and is a work in progress.
I have not yet fully automated the generation of this document.</description>
    </item>
    
    <item>
      <title>Setting up PureScript</title>
      <link>https://mullikine.github.io/posts/setting-up-purescript/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-purescript/</guid>
      <description>Reading Make the Leap from JavaScript to PureScript - By  Thoughts Because PureScript is cleaned up it might be a lot better, even if it&amp;rsquo;s less powerful.
Haskell&amp;rsquo;s tooling must improve.
Learn PureScript  https://learnxinyminutes.com/docs/purescript/ https://github.com/adambard/learnxinyminutes-docs  Set up tooling https://github.com/purescript/documentation
 pulp (build system for PureScript) https://github.com/purescript-contrib/pulp https://www.npmjs.com/package/pulp
 psc-package (Package manager for PureScript) Based on the concept of package sets. https://github.com/purescript/psc-package
 gulp-purescript https://github.com/purescript-contrib/gulp-purescript
 psvm-js PureScript Version Manager https://github.</description>
    </item>
    
    <item>
      <title>TensorFlow Debugger (tfdb) and emacs</title>
      <link>https://mullikine.github.io/posts/tensorflow-debugger-tfdb-and-emacs/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/tensorflow-debugger-tfdb-and-emacs/</guid>
      <description>Relevant source material TensorFlow Debugger Screencast - YouTube DebugTFBasics  I plan on building a mode for emacs that includes syntax highlighting and keyboard macros, but I&amp;rsquo;ll have to wait until tfdb is released for TF2.0.
Wrapping TensorFlow Sessions With tfdbg Add the following lines of code to use tfdbg and then contain the Session object using a debugger wrapper.
1  from tensorflow.python import debug as tf_debug    CLI should be called before and after Session.</description>
    </item>
    
    <item>
      <title>★ Complex Dwarf Fortress macros with tcl/expect, emacs and tmux ★</title>
      <link>https://mullikine.github.io/posts/dwarf-fortress-macros-with-emacs-and-tmux/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dwarf-fortress-macros-with-emacs-and-tmux/</guid>
      <description>Related articles minor mode wrappers for shell commands // Bodacious Blog  Here I make an emacs mode for Dwarf Fortress and create some keybindings in emacs which runs a generated tcl/expect script over Dwarf Fortress using tmux to attach itself to the tty inside term- mode.
Write the emacs lisp This macro creates minor modes from a list of shell command names.
These shell commands may be arbitrary terminal programs.</description>
    </item>
    
    <item>
      <title>minor mode wrappers for shell commands</title>
      <link>https://mullikine.github.io/posts/minor-mode-wrappers-for-shell-commands/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/minor-mode-wrappers-for-shell-commands/</guid>
      <description>Related article Taming term-mode // Bodacious Blog  Summary Basically, I am creating a program-agnostic method of rebinding keys.
Given an arbitrary shell command, such as mc (midnight commander), I can create my own keybindings and macros for this program as if I was customising an emacs mode.
It&amp;rsquo;s all part of trying to control everything from emacs.
More specifically, this article is about creating buffer-local minor modes which are enabled only for specific commands started through term-mode.</description>
    </item>
    
    <item>
      <title>Nix language</title>
      <link>https://mullikine.github.io/posts/nix-language/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/nix-language/</guid>
      <description>Original article Nix Pills - basics-of-language Nix Expression Language - NixOS Wiki  1 2 3 4 5 6 7 8 9 10 11 12 13 14  Nix language Nix expression language A pure, lazy, functional language. Not a full-featured, general purpose language. Functions are “normal” values that can be passed around and manipulated in interesting ways. Its main job is to describe packages, compositions of packages, and the variability within packages.</description>
    </item>
    
    <item>
      <title>Review of &#39;Language Engineering; Harnessing the Power of Language (2004)&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-language-engineering-harnessing-the-power-of-language/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-language-engineering-harnessing-the-power-of-language/</guid>
      <description>This article is from 2004 or earlier.
It&amp;rsquo;s still an interesting insight into perspectives on Language Engineering from the early 2000s.
 Original article Language Engineering; Harnessing the Power of Language  The use of language is currently restricted.
Even between humans, understanding is usually limited to those groups who share a common language. †
 † &amp;hellip;let alone the language barrier with computers.  Language can be seen as much a barrier to communication as an aid.</description>
    </item>
    
    <item>
      <title>explainshell in zsh</title>
      <link>https://mullikine.github.io/posts/explainshell/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/explainshell/</guid>
      <description>Create the script 1 2 3 4 5 6 7 8 9 10 11 12 13  #!/bin/bash export TTY IFS= read -rd &amp;#39;&amp;#39; input &amp;lt; &amp;lt;(cat /dev/stdin) query=&amp;#34;$(p &amp;#34;$input&amp;#34; | urlencode)&amp;#34; url=&amp;#34;https://explainshell.com/explain?cmd=$query&amp;#34; # echo &amp;#34;$url&amp;#34; exec &amp;lt;&amp;amp;1 eww &amp;#34;$url&amp;#34;   Create the function 1 2 3 4 5 6 7 8 9  function zshexplainshell { tf_zle=&amp;#34;$(mktemp ${TMPDIR}/tf_zleXXXXXX || echo /dev/null)&amp;#34; print -R - &amp;#34;$PREBUFFER$BUFFER&amp;#34; &amp;gt; $tf_zle exec &amp;lt;&amp;amp;1 print -R - &amp;#34;$PREBUFFER$BUFFER&amp;#34; | explainshell print -Rz - &amp;#34;$(&amp;lt;$tf_zle)&amp;#34; zle send-break	# Force reload from the buffer stack }   Create the binding 1 2 3 4  # M-E autoload -z zshexplainshell zle -N zshexplainshell bindkey &amp;#34;\eE&amp;#34; zshexplainshell   Demonstration 1  x -sh &amp;#34;zcd .</description>
    </item>
    
    <item>
      <title>Review of &#39;BPF: A New Type of Software&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-bpf-a-new-type-of-software/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-bpf-a-new-type-of-software/</guid>
      <description>Original article BPF: A New Type of Software  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  KProbes A debugging mechanism for the Linux kernel which can also be used for monitoring events inside a production system.</description>
    </item>
    
    <item>
      <title>Creating FUSE filesystems in Python</title>
      <link>https://mullikine.github.io/posts/fuse-filesystem-in-python/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/fuse-filesystem-in-python/</guid>
      <description>Options Python2 Python 2 is obsolete, so no.
https://gist.github.com/wettenhj/7019100
python-fuse $MYGIT/libfuse/python-fuse
fusepy Python3+ pyfilesystem2 + fusefs pyfilesystem2 does NOT create a virtual filesystem on its own.
You need fusefs to mount a pyfilesystem2 extension.
 https://pypi.org/project/fusefs/ https://github.com/mirekys/fusefs
 https://pypi.org/project/fs/2.4.11/
 https://github.com/PyFilesystem/pyfilesystem2
  pyfuse https://github.com/nrclark/pyfuse
Install pyfilesystem2 and fusefs 1 2  py i fs py i fusefs   Using fusefs 1  fusefs &amp;lt;url&amp;gt; &amp;lt;mountpoint&amp;gt;   url is the pyFilesystem2 resource to be mounted, and may contain placeholders for such values as username, host, password, etc.</description>
    </item>
    
    <item>
      <title>Show immediate directory in mode line</title>
      <link>https://mullikine.github.io/posts/emacs-show-immediate-directory-in-mode-line/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-show-immediate-directory-in-mode-line/</guid>
      <description>Finding the value to change in mode-line-format 1  (telephone-line-raw mode-line-buffer-identification t)   Changes 1 2 3 4 5 6 7 8 9 10  ;; This is the original value (setq mode-line-buffer-identification (propertized-buffer-identification &amp;#34;%12b&amp;#34;)) ;; This is the modification made (defun mode-line-buffer-file-parent-directory () (when buffer-file-name (concat &amp;#34;[&amp;#34; (file-name-nondirectory (directory-file-name (file-name-directory buffer-file-name))) &amp;#34;]&amp;#34;))) (setq-default mode-line-buffer-identification (cons (car mode-line-buffer-identification) &amp;#39;((:eval (mode-line-buffer-file-parent-directory)))))   spacemacs Spacemacs already had a mechanism for this so it is displayed twice on some files.</description>
    </item>
    
    <item>
      <title>Access logging for systemd service file command</title>
      <link>https://mullikine.github.io/posts/log-service-command/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/log-service-command/</guid>
      <description>Find a service file 1  le service | v   1  v /etc/systemd/system/multi-user.target.wants/ssh.service   It&amp;rsquo;s aliased to:
1  v /etc/systemd/system/sshd.service   nvi 1  v /etc/systemd/system/multi-user.target.wants/nvi.service   1  journalctl -u nvi   -- Logs begin at Thu 2019-12-12 21:51:53 NZDT, end at Fri 2019-12-13 18:25:01 NZDT. -- Dec 12 21:51:54 morgan systemd[1]: Starting Recover nvi edit sessions.... Dec 12 21:51:54 morgan recover[1085]: Recovering nvi editor sessions.</description>
    </item>
    
    <item>
      <title>NixOS</title>
      <link>https://mullikine.github.io/posts/nixos/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/nixos/</guid>
      <description>Original article https://nixos.org/nixos/about.html  Nix package manager 1  which nix   /home/shane/.nix-profile/bin/nix Basic package management https://nixos.org/nix/manual/#ch-basic-package-mgmt
1  ci nix-env -qa | nnf &amp;#34;nix-env -qa&amp;#34; | xa -l head -n 10   /home/shane/notes/vars/nix-env-qa 0x0-2018-06-24 1password-0.5.6-003 2048-in-terminal-2017-11-29 20kly-1.4 2bwm-0.2 2fa-1.1.0 389-ds-base-1.3.9.1 3dpong-0.5 4store-1.1.6 8086tiny-1.25 1  ncf nix-env -qas | xa -l head -n 10   /home/shane/notes/vars/nix-env --S 0x0-2018-06-24 --S 2048-in-terminal-2017-11-29 --S 20kly-1.4 --S 2bwm-0.2 --S 2fa-1.</description>
    </item>
    
    <item>
      <title>Using comint for persistent history of shell commands</title>
      <link>https://mullikine.github.io/posts/using-comint-for-persistent-history-of-shell-commands/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-comint-for-persistent-history-of-shell-commands/</guid>
      <description>Relevent article https://emacs.stackexchange.com/questions/9925/persistent-shell-command-history  Write the elisp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  (defun comint-quick (cmd) (interactive) (let* ((slug (slugify cmd)) (buf (make-comint slug (nsfa cmd)))) (with-current-buffer buf (switch-to-buffer buf) (turn-on-comint-history (concat &amp;#34;/home/shane/notes/programs/comint/history/&amp;#34; slug))))) (require &amp;#39;exec-path-from-shell) ;; comint persistent history ;; https://emacs.</description>
    </item>
    
    <item>
      <title>Keyboard macros in GNU Ranger</title>
      <link>https://mullikine.github.io/posts/macros-in-gnu-ranger/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/macros-in-gnu-ranger/</guid>
      <description>Ranger does not have a build-in keyboard macro mechanism, but you can use tmux for this.
Create the tm-send-slow command 1 2 3 4 5 6 7 8  #!/bin/bash export TTY string=&amp;#34;$1&amp;#34; grep -o . &amp;lt;&amp;lt;&amp;lt; &amp;#34;$string&amp;#34; | while IFS=$&amp;#39;\n&amp;#39; read -r char; do tmux send -l &amp;#34;$char&amp;#34; done   Create the mapping 1  map F. shell -f tm-send-slow FFf   Demonstration</description>
    </item>
    
    <item>
      <title>Browsing sqlite3 databases with edbi for emacs</title>
      <link>https://mullikine.github.io/posts/browsing-databases-with-emacs-edbi/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/browsing-databases-with-emacs-edbi/</guid>
      <description>Set up edbi 1 2  # for emacs edbi cpan install DBD::SQLite   Create the scripts select-database 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } is_tty istty=$?</description>
    </item>
    
    <item>
      <title>Parsing with parsec</title>
      <link>https://mullikine.github.io/posts/parsing-with-parsec/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/parsing-with-parsec/</guid>
      <description> Source material Parsing using Parsec: a practical example [ CODE ] An introduction to parsing text in Haskell with Parsec - Nick.Chung - - [ CODE ] parsec: Monadic parser combinators Parsec - HaskellWiki  </description>
    </item>
    
    <item>
      <title>Browsing git repos</title>
      <link>https://mullikine.github.io/posts/browsing-git-repos/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/browsing-git-repos/</guid>
      <description>1  browse-git-repos</description>
    </item>
    
    <item>
      <title>DAP mode for emacs</title>
      <link>https://mullikine.github.io/posts/dap-mode/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dap-mode/</guid>
      <description>Related reading Setting up LSP with emacs (Go, Java, Python, Rust, C++, Haskell) // Bodacious Blog Official page for Debug Adapter Protocol Python environment // Bodacious Blog  DAP mode is like LSP for debugging.
bindings 1 2 3  (define-key my-mode-map (kbd &amp;#34;M-m a b&amp;#34;) #&amp;#39;dap-hydra/body) (define-key my-mode-map (kbd &amp;#34;M-m a a&amp;#34;) #&amp;#39;dap-ui-breakpoints) (define-key prog-mode-map (kbd &amp;#34;M-\&amp;#34;&amp;#34;) &amp;#39;handle-debug)   State of languages with DAP in my own environment    Language DAP Working LSP Working Fallback working Current user experience     Python ✓ ✓ ✓ pdb Good   Java ✓ ✓ ✓ eclim Good    Java Here is an example of me creating a breakpoint with a condition and running the debugger.</description>
    </item>
    
    <item>
      <title>Review of &#39;Indexing Billions of Text Vectors&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-indexing-billions-of-text-vectors/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-indexing-billions-of-text-vectors/</guid>
      <description>A New Search Engine  Original article A New Search Engine  Building a search engine from scratch  Original article Building a search engine from scratch  Indexing Billions of Text Vectors  Original article Indexing Billions of Text Vectors  A frequently occurring IR problem Finding similar pieces of text.
A query in this context can either be a user- generated one, (i.e. the piece of text that a user enters into a search engine), or a synthetic one generated by us.</description>
    </item>
    
    <item>
      <title>Controlled Text Generation</title>
      <link>https://mullikine.github.io/posts/controlled-text-generation/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/controlled-text-generation/</guid>
      <description>Original article https://eng.uber.com/pplm/ https://github.com/uber-research/PPLM https://github.com/huggingface/transformers/blob/master/examples/pplm/README.md Uber AI Plug and Play Language Model  Controlling Text Generation with Plug and Play Language Model (PPLM) PPLM builds on top of other large transformer- based generative models (like GPT-2), where it enables finer-grained control of attributes of the generated language (e.g. gradually switching topic 🐱 or sentiment 😃).
This controlled LG method consists of plugging in simple bag-of-words or one-layer classifiers as attribute controllers, and making updates in the activation space, without changing any model parameters.</description>
    </item>
    
    <item>
      <title>Creating Infinitely Generated Text Adventures with DL LMs</title>
      <link>https://mullikine.github.io/posts/infinitely-generated-text-adventures/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/infinitely-generated-text-adventures/</guid>
      <description>Original article AI Dungeon 2: Creating Infinitely Generated Text Adventures with Deep Learning Language Models - Perception, Control, Cognition  For each action you type the model is fed the context sentence as well as the past N action- result pairs in its memory to generate the result.
We found N=8 to be a good amount of memory to feed the model.
Other times the model has difficulty keeping track of who is who, especially in dialogue.</description>
    </item>
    
    <item>
      <title>Setting up LSP with emacs (Go, Java, Python, Rust, C&#43;&#43;, Haskell)</title>
      <link>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description>Guides used https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/ https://github.com/emacs-lsp/lsp-java  1 2 3 4 5  Debug Adaptor Protocol DAP The LSP of debugging. https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website   State of languages with LSP in my own environment    Language LSP Working Fallback working Current user experience REPL / Playground DAP (debug) Working Static analysis Complaints Custom LSP improvements     Go ✓ ✓ Amazing ✓  ✓ Go toolchain changes too quickly    Python ✓ ✓ Amazing ✓ ✓ ✓     Java ✓ ✓ eclim Good ✓ (default) ✓ ✓ A little slow.</description>
    </item>
    
    <item>
      <title>Chatbot with Rasa</title>
      <link>https://mullikine.github.io/posts/chatbot-with-rasa/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/chatbot-with-rasa/</guid>
      <description>Original article A Chatbot from Future: Building an end-to-end Conversational Assistant with Rasa  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  intent vs goal Some chatbot tools use the word intent to refer to the user goal. This is confusing because only some messages tell you what a user’s goal is.</description>
    </item>
    
    <item>
      <title>Make interactive functions with history</title>
      <link>https://mullikine.github.io/posts/emacs-make-interactive-function-with-history-from-shell-script/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-make-interactive-function-with-history-from-shell-script/</guid>
      <description>Make a macro for creating interactive functions from shell commands Interactively read a string which is the parameter.
Use the macro as a snippet.
1 2 3 4 5 6 7 8 9 10  (defmacro defshellinteractive (&amp;amp;rest body) (let ((sf (str2sym (concat &amp;#34;sh/t/&amp;#34; (slugify (list2string body) t)))) (sfhist (str2sym (concat &amp;#34;sh/t/&amp;#34; (slugify (list2string body) t) &amp;#34;-history&amp;#34;))) (cmd (mapconcat &amp;#39;str body &amp;#34; &amp;#34;))) `(defun ,sf (args) (interactive (list (read-string &amp;#34;args:&amp;#34; &amp;#34;&amp;#34; &amp;#39;,sfhist))) ;; (eval `(term-nsfa (concat ,,cmd &amp;#34; &amp;#34; ,args))) (eval `(sph (concat ,,cmd &amp;#34; &amp;#34; ,args)))))) (defshellinteractive gist-search)   Demonstration</description>
    </item>
    
    <item>
      <title>Named Entity Recognition</title>
      <link>https://mullikine.github.io/posts/named-entity-recognition/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/named-entity-recognition/</guid>
      <description>Original article Named Entity Recognition with NLTK and SpaCy - Towards Data Science Code https://github.com/susanli2016/NLP-with-Python/blob/master/NER%5FNLTK%5FSpacy.ipynb My fork https://github.com/mullikine/NLP-with-Python/blob/master/NER%5FNLTK%5FSpacy.py Related articles Part of Speech Labels // Bodacious Blog  1  sp $MYGIT/susanli2016/NLP-with-Python/NER_NLTK_Spacy.py   Missing libraries 1 2 3 4 5  Resource averaged_perceptron_tagger not found. Please use the NLTK Downloader to obtain the resource: &amp;gt;&amp;gt;&amp;gt; import nltk &amp;gt;&amp;gt;&amp;gt; nltk.download(&amp;#39;averaged_perceptron_tagger&amp;#39;)   1 2 3  import nltk nltk.</description>
    </item>
    
    <item>
      <title>Part of Speech Labels</title>
      <link>https://mullikine.github.io/posts/part-of-speech-labels/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/part-of-speech-labels/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  conjunction CONJ CNJ A part of speech that connects words, phrases, or clauses that are called the conjuncts of the conjunctions. subordinating conjunction Preposition IN A conjunction that introduces a subordinating clause, e.g. although, because. Coordinating conjunction CC A conjunction placed between words, phrases, clauses, or sentences of equal rank, e.</description>
    </item>
    
    <item>
      <title>Searching for gists</title>
      <link>https://mullikine.github.io/posts/searching-for-gists/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/searching-for-gists/</guid>
      <description>Create a gist-search script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } gr gist &amp;#34;$@&amp;#34; | grep //gist.github.com/ | urldecode | scrape &amp;#34;.*gist.github.com/[^?/]+&amp;#34; | sort | uniq | scrape &amp;#34;[^/]+$&amp;#34; | { if is_tty; then fzf | xa gist-list else cat fi }   Demonstration</description>
    </item>
    
    <item>
      <title>spaCy</title>
      <link>https://mullikine.github.io/posts/spacy/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/spacy/</guid>
      <description>Original gist https://gist.github.com/aparrish/697b7f56ac28f4e59af77a66ac573b8f  After loading into spacy Right off the bat, the spaCy library gives us access to a number of interesting units of text:
   code description     doc.sents sentences   doc words   doc.ents named entitites   doc.noun_chunks nouns in the text plus surrounding matter like adjectives and articles    1 2 3 4  sentences = list(doc.</description>
    </item>
    
    <item>
      <title>Extending gist-list to copy the URL, browse and download gists</title>
      <link>https://mullikine.github.io/posts/extending-gist-list/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-gist-list/</guid>
      <description>Using gist-list 1  x -sh &amp;#34;gist-list erantapaa&amp;#34; -e &amp;#34;Id&amp;#34; -c s -s non-blocking -c m -a   1  + ebbcd56... 10/20/15 20:57 public non-blocking I/O examples in Haskell   
Sometimes it doesn&amp;rsquo;t open  error After 0 kbd macro iterations: run-hooks: Cannot open load file: No such file or directory, drupal-mode  Extracting tabulated-list-id and forming a URL is the solution.
 solution tabulated-list-id &amp;quot;16b1a208e2725e7d9487dbb648c65034&amp;quot; This is a text property.</description>
    </item>
    
    <item>
      <title>Finding similar haskell functions from emacs and downloading their packages: Hoogle, intero, fzf</title>
      <link>https://mullikine.github.io/posts/hoogle-fuzzy-type-search-from-intero-emacs/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/hoogle-fuzzy-type-search-from-intero-emacs/</guid>
      <description>Demonstration 
Make these functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  (defun my-intero-get-type () (interactive) (my-enable-intero) (let ((out (sh-notty &amp;#34;sed -z -e \&amp;#34;s/\\n/ /g\&amp;#34; -e \&amp;#34;s/ \\+/ /g\&amp;#34;&amp;#34; (sed &amp;#34;s/^[^:]\\+ :: //&amp;#34; (intero-get-type-at (beginning-of-thing &amp;#39;sexp) (end-of-thing &amp;#39;sexp)))))) (if (called-interactively-p &amp;#39;any) (my/copy out) out))) (defun hs-download-packages-with-function-type (type) (interactive (list (my-intero-get-type))) ;; (term-nsfa &amp;#34;hsqf pg&amp;#34;) ;; (e/sph-zsh &amp;#34;t new \&amp;#34;rtcmd hs-type-declarative-search-fzf String\&amp;#34;&amp;#34;) (sph (concat &amp;#34;t new &amp;#34; (q &amp;#34;hs-download-packages-with-function-type &amp;#34; (q type))))) (defun hs-tds-fzf (type) (interactive (list (my-intero-get-type))) ;; (term-nsfa &amp;#34;hsqf pg&amp;#34;) ;; (e/sph-zsh &amp;#34;t new \&amp;#34;rtcmd hs-type-declarative-search-fzf String\&amp;#34;&amp;#34;) (sph (concat &amp;#34;t new &amp;#34; (q &amp;#34;rtcmd hs-type-declarative-search-fzf &amp;#34; (q type))))) (defun my/type-search-thing-at-point (&amp;amp;optional immediate winfunc) &amp;#34;Show doc for thing under pointl.</description>
    </item>
    
    <item>
      <title>Exploring Hoogle</title>
      <link>https://mullikine.github.io/posts/exploring-hoogle/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/exploring-hoogle/</guid>
      <description>Prereading Real-time interactive documentation lookup for haskell type-declarative search // Bodacious Blog GHCi and Haskell code intermixed in babel // Bodacious Blog  Finding package from the module name / an import statement Demonstration 
I created these two functions 1 2 3 4 5 6 7 8 9  hsImportToPackage :: String -&amp;gt; IO String hsImportToPackage modulename = do (_, Just hout, _, _) &amp;lt;- createProcess (proc &amp;#34;hs-import-to-package&amp;#34; [modulename]){ std_out = CreatePipe } hGetContents hout printIOString :: IO String -&amp;gt; IO () printIOString a = do str &amp;lt;- a putStrLn str   1  ghciol &amp;#34;:i fmap&amp;#34;   class Functor (f :: * -&amp;gt; *) where fmap :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b .</description>
    </item>
    
    <item>
      <title>click, a CLI library for python &#43; extending babel a bit more</title>
      <link>https://mullikine.github.io/posts/python-click/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-click/</guid>
      <description>Do I really need to learn yet another CLI library?
There are plenty of them.
https://codeburst.io/building-beautiful-command-line-interfaces-with-python-26c7e1bb54df
Click is actually very simple and straight forward.
It uses decorations to get things done.
Summary https://click.palletsprojects.com/en/7.x/
Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary.
It’s the “Command Line Interface Creation Kit”.
It’s highly configurable but comes with sensible defaults out of the box.</description>
    </item>
    
    <item>
      <title>introhaskell</title>
      <link>https://mullikine.github.io/posts/introhaskell/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/introhaskell/</guid>
      <description>Original article introhaskell  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  type variable Example: Given the type: a -&amp;gt; a -&amp;gt; a &amp;#39;a&amp;#39; is a type variable. ewwlinks +/&amp;#34;Type Variables&amp;#34; &amp;#34;https://cs.lmu.edu/~ray/notes/introhaskell/&amp;#34; We know [Char] and [Float] are two different types. So how do we speak about, or write functions that work on, lists of ANY type? Or tuples of any size, or any component type?</description>
    </item>
    
    <item>
      <title>More haskell syntax and babel improvements. Notes 29.11.19</title>
      <link>https://mullikine.github.io/posts/haskell-notes-29.11.19/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-notes-29.11.19/</guid>
      <description>stdin in babel. I can now do literate programming with pipeline scripts 1 2  #+BEGIN_SRC haskell-n :stdin &amp;#34;echo &amp;#39;h/*sup*/i&amp;#39;&amp;#34; :interpreter runhaskell :async :results verbatim code #+END_SRC   Changes made to babel. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  diff --git a/config/my-babel.</description>
    </item>
    
    <item>
      <title>Overview of Flask, Jinja2, templating engine</title>
      <link>https://mullikine.github.io/posts/jinja2/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/jinja2/</guid>
      <description>Original reading Jinja2 Explained in 5 Minutes! - codeburst  Demonstration working with a simple flask app 
Flask Example apps  https://github.com/greyli/flask-examples (4 months old) https://github.com/miguelgrinberg/flask-examples (6 years old)  greyli/flask-examples Hello world
$MYGIT/greyli/flask-examples/hello/app.py
https://github.com/greyli/flask-examples/blob/master/hello/app.py
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  # -*- coding: utf-8 -*- &amp;#34;&amp;#34;&amp;#34; :author: Grey Li (李辉) :url: http://greyli.</description>
    </item>
    
    <item>
      <title>A makeshift template processor in bash</title>
      <link>https://mullikine.github.io/posts/makeshift-template-processor/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/makeshift-template-processor/</guid>
      <description>1  echo -n &amp;#34;Hi &amp;lt;name&amp;gt;. How are you?&amp;#34; | tl -name Shane   This is similar to python f-strings 1 2 3  name = &amp;#34;Eric&amp;#34; age = 74 print(f&amp;#34;Hello, {name}. You are {age}.&amp;#34;)   Hello, Eric. You are 74. In fact, I should make an f-strings-based utility.
Build the replace-substring script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!</description>
    </item>
    
    <item>
      <title>Monad transformers</title>
      <link>https://mullikine.github.io/posts/monad-transformers/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/monad-transformers/</guid>
      <description>Original resource https://wiki.haskell.org/Meta-tutorial  grok haskell monad transformers  Original article http://blog.sigfpe.com/2006/05/grok-haskell-monad-transformers.html  State monad 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  import Control.Monad.Identity import Control.Monad.State test1 = do a &amp;lt;- get modify (+1) b &amp;lt;- get return (a,b) test2 = do a &amp;lt;- get modify (++&amp;#34;1&amp;#34;) b &amp;lt;- get return (a,b) go1 = evalState test1 0 go2 = evalState test2 &amp;#34;0&amp;#34; :t go1 go1 :t go2 go2 &amp;#34;**************&amp;#34; :t get :i get &amp;#34;**************&amp;#34; :t modify :i modify &amp;#34;**************&amp;#34; :t evalState :i evalState   go1 :: (Integer, Integer) (0,1) go2 :: ([Char], [Char]) (&amp;#34;0&amp;#34;,&amp;#34;01&amp;#34;) &amp;#34;**************&amp;#34; get :: MonadState s m =&amp;gt; m s class Monad m =&amp;gt; MonadState s (m :: * -&amp;gt; *) | m -&amp;gt; s where get :: m s .</description>
    </item>
    
    <item>
      <title>Real-time interactive documentation lookup for haskell type-declarative search</title>
      <link>https://mullikine.github.io/posts/doc-lookup-for-haskell-type-declarative-search/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/doc-lookup-for-haskell-type-declarative-search/</guid>
      <description>I make a tool for real-time fuzzy documentation lookup for haskell type- declarative search.
Demonstration; the final result 
Create the script hs-type-declarative-search This uses stack.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  #!</description>
    </item>
    
    <item>
      <title>AI-assisted coding tools for emacs</title>
      <link>https://mullikine.github.io/posts/ai-assisted-coding-tools-emacs/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/ai-assisted-coding-tools-emacs/</guid>
      <description>language-detection Emacs Lisp library that automatically detects the programming language in a buffer or string. Implemented as a random forest classifier, trained in scikit-learn and deployed to Emacs Lisp.
https://github.com/andreasjansson/language-detection.el
Example of usage 1 2 3 4 5 6 7 8 9  (defun new-buffer-from-selection-detect-language () &amp;#34;Creates a new buffer from the selection and tries to set the mode&amp;#34; (interactive) (if (selected-p) (let* ((b (new-buffer-from-string (selection)))) (with-current-buffer b (switch-to-buffer b) (guess-major-mode))))) (defalias &amp;#39;detect-language-set-mode &amp;#39;guess-major-mode)   1 2  ;; This works great (my/truly-selective-binding &amp;#34;Y&amp;#34; #&amp;#39;new-buffer-from-selection-detect-language)   expanded the macro</description>
    </item>
    
    <item>
      <title>ClassyPrelude – Alternative prelude for Haskell</title>
      <link>https://mullikine.github.io/posts/haskell-classy-prelude/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-classy-prelude/</guid>
      <description>Sources https://hackage.haskell.org/package/classy-prelude  New stuff  Text  Lots of things use Text instead of String. Note that show returns a String. To get back Text, use tshow.  other functionality  exceptions package system-filepath convenience functions whenM, unlessM hashNub and ordNub (efficient nub implementations).   Automate ClassyPrelude ghci repl extend the ghci-alternative-prelude script. Symlink as classy-prelude 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #!</description>
    </item>
    
    <item>
      <title>Future of emacs</title>
      <link>https://mullikine.github.io/posts/future-of-emacs/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/future-of-emacs/</guid>
      <description>This doesn&amp;rsquo;t actually represent my own view on the future of emacs.
I do agree about the current extension language being a major shortcoming and I see emacs lisp as not being a declarative programming language as being the main existential threat.
 References Emacs: The Editor for the Next Forty Years - Perry E. Metzger - EmacsConf 2019  Shortcomings of emacs  Extension language still mediocre. Implementation language is terrible.</description>
    </item>
    
    <item>
      <title>Generating combinations with zsh and common lisp</title>
      <link>https://mullikine.github.io/posts/combinations-in-common-lisp/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/combinations-in-common-lisp/</guid>
      <description>I will create a script named co that can be used to generate shell commands from lists, conveniently.
Demonstration 
Build the script combinations.cl 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195  #!</description>
    </item>
    
    <item>
      <title>Generating help for bash scripts</title>
      <link>https://mullikine.github.io/posts/help-for-bash-scripts/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/help-for-bash-scripts/</guid>
      <description>The point of creating the help command in this way is that you may enter you command, add a -h, and help will be displayed for the parameters entered.
When ready to run the command properly, you simply re-run without the -h.
Help function, scrapes the script for help arguments and presents them 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  help() { # Run help for argument # For each argument, gen the full argument line while [ $# -gt 0 ]; do opt=&amp;#34;$1&amp;#34;; case &amp;#34;$opt&amp;#34; in &amp;#34;&amp;#34;) { shift; }; ;; -*) { cat &amp;#34;$0&amp;#34; | sed -n &amp;#34;/^\(\s\+$opt\b\|.</description>
    </item>
    
    <item>
      <title>Haskell functions</title>
      <link>https://mullikine.github.io/posts/haskell-functions/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-functions/</guid>
      <description>name a lambda expression (if you wanted to for some reason) 1  addOne = \x -&amp;gt; x + 1   LYAH modules http://learnyouahaskell.com/modules
intersperse Takes an element and a list and then puts that element in between each pair of elements in the list.
1 2 3  :m Data.List intersperse &amp;#39;.&amp;#39; &amp;#34;MONKEY&amp;#34; intersperse 0 [1,2,3,4,5,6]   &amp;#34;M.O.N.K.E.Y&amp;#34; [1,0,2,0,3,0,4,0,5,0,6] intercalate Takes a list of lists and a list.</description>
    </item>
    
    <item>
      <title>GHCi and Haskell code intermixed in babel</title>
      <link>https://mullikine.github.io/posts/babel-ghci-and-haskell/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/babel-ghci-and-haskell/</guid>
      <description>Demonstration Running ghcih inside neovim inside emacs 
Create the ghcih script 1 2 3 4 5 6  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null xs ghci -H &amp;#34;$@&amp;#34;   Create the ghci case in xs When -H is provided, it will split the input code by assuming that the initial part is a haskell module and anything from the first ghci : command and onwards is ghci code.</description>
    </item>
    
    <item>
      <title>Relude – Alternative prelude for Haskell</title>
      <link>https://mullikine.github.io/posts/haskell-relude/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-relude/</guid>
      <description>Sources https://hackage.haskell.org/package/relude  Difference from Prelude Main differences from Prelude can be grouped into the following categories:
 Changed behavior of common functions  head, tail, last, init work with NonEmpty a instead of [a]. lines, unlines, words, unwords work with Text instead of String. show is polymorphic over return type. Functions sum and product are strict now, which makes them more efficient. You can&amp;rsquo;t call elem and notElem functions over Set and HashSet.</description>
    </item>
    
    <item>
      <title>Deconstructing IPTables-Metalanguage</title>
      <link>https://mullikine.github.io/posts/deconstructing-iptables-metalanguage/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/deconstructing-iptables-metalanguage/</guid>
      <description>Main.hs 1 2 3 4 5 6 7  ./Main.hs:4:import Test.Framework (defaultMain, testGroup) ./Main.hs:6:import Test.Framework.Providers.QuickCheck2 (testProperty) ./Main.hs:11:import Text.ParserCombinators.Parsec ./Main.hs:13:import Text.IptablesMetalanguage.Types ./Main.hs:14:import Text.IptablesMetalanguage.Parser ./Main.hs:15:import Text.IptablesMetalanguage.Print ./Main.hs:17:import GHC.Word   Test.Framework http://hackage.haskell.org/package/HTF
Tutorial http://hackage.haskell.org/package/HTF-0.14.0.0/docs/Test-Framework-Tutorial.html
defaultMain testGroup Parser.hs 1 2 3 4 5 6 7 8  ./src/Text/IptablesMetalanguage/Parser.hs:4:import Text.IptablesMetalanguage.Types ./src/Text/IptablesMetalanguage/Parser.hs:5:import Control.Applicative ((&amp;lt;$&amp;gt;)) ./src/Text/IptablesMetalanguage/Parser.hs:6:import Control.Monad.Error ./src/Text/IptablesMetalanguage/Parser.hs:7:import Data.Bits ./src/Text/IptablesMetalanguage/Parser.hs:8:import Data.Set (fromList) ./src/Text/IptablesMetalanguage/Parser.hs:9:import Data.Word ./src/Text/IptablesMetalanguage/Parser.hs:10:import Safe ./src/Text/IptablesMetalanguage/Parser.hs:11:import Text.ParserCombinators.Parsec   Types.hs 1 2  ./src/Text/IptablesMetalanguage/Types.hs:4:import Data.</description>
    </item>
    
    <item>
      <title>Notes on JSON Parser From Scratch in Haskell</title>
      <link>https://mullikine.github.io/posts/json-parser-haskell/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/json-parser-haskell/</guid>
      <description>Original video JSON Parser From Scratch in Haskell  Concepts taught    Concept     hole   newtype   Traversable   Functor   Applicative   Alternative   Record syntax    Glossary 1 2 3 4 5 6 7 8 9 10 11  type vs data vs newtype The &amp;#39;data&amp;#39; keyword allows you to introduce a new algebraic data type, while &amp;#39;type&amp;#39; just makes a type synonym.</description>
    </item>
    
    <item>
      <title>Reading 25.11.19</title>
      <link>https://mullikine.github.io/posts/reading-25.11.19/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-25.11.19/</guid>
      <description>Language Models as Knowledge Bases?  Original article https://arxiv.org/abs/1909.01066 Code https://github.com/facebookresearch/LAMA  1 2 3 4 5 6 7 8 9 10 11  Cloze statements An excellent method to encourage speech production in children. A cloze statement involves saying a familiar phrase and leaving out a word, then waiting for your child to fill in the blank. Familiar nursery rhymes, songs, and poems are perfect for this activity.   Recent progress in pretraining LMs on large textual corpora led to a surge of improvements for downstream NLP tasks.</description>
    </item>
    
    <item>
      <title>latex, math and emacs</title>
      <link>https://mullikine.github.io/posts/latex-math/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/latex-math/</guid>
      <description>n choose k \({n \choose k} = _{n}^{k}\textrm{C}= \frac{n!}{k!(n-k)!}\)
https://byjus.com/n-choose-k-formula/
\((x+y)^n = \sum_{k=0}^n %{n \choose k} x^{n - k} y^k\)
\begin{equation} \label{eq:1} C = W\log_{2} (1+\mathrm{SNR}) \end{equation}
binomial theorem In elementary algebra, the binomial theorem describes the algebraic expansion of powers of a binomial.
\((a+b)^n=\sum_{k=0}^n{n\choose k}a^{n-k}b^k\)</description>
    </item>
    
    <item>
      <title>Shortcomings of classical search engines</title>
      <link>https://mullikine.github.io/posts/shortcomings-of-search-engines/</link>
      <pubDate>Fri, 22 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/shortcomings-of-search-engines/</guid>
      <description>https://arxiv.org/pdf/1710.05649.pdf
Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  relevance feedback Feature of some IR systems. Take the results that are initially returned from a given query, to gather user feedback, and to use information about whether or not those results are relevant to perform a new query. Three types of feedback: - explicit feedback, - implicit feedback, and - blind feedback.</description>
    </item>
    
    <item>
      <title>List IPs with SSH port on the current network</title>
      <link>https://mullikine.github.io/posts/list-ips-for-current-network/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/list-ips-for-current-network/</guid>
      <description>While demonstrating for the DCBC School of CS, somebody often asks me what their IP address is for their Raspberry Pi.
I will run a script to scan for IP addresses with an SSH port and then log into the RBP one by one with the default password until I find one that has their files.
Recap: CIDR Glossary 1 2 3 4 5 6 7 8 9  Classless inter-domain routing CIDR A set of Internet protocol (IP) standards that is used to create unique identifiers for networks and individual devices.</description>
    </item>
    
    <item>
      <title>Generate emacs functions from CLI commands</title>
      <link>https://mullikine.github.io/posts/generate-emacs-functions-from-cli-commands/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/generate-emacs-functions-from-cli-commands/</guid>
      <description>Prerequisite reading Didactic emacs-lisp macro example (ie. a tutorial) // Bodacious Blog  Define the commands 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  (defmacro defshellfilter (&amp;amp;rest body) &amp;#34;Define a new string filter function based on a shell command&amp;#34; (let* (;; (s (str2sym (concat &amp;#34;sh/&amp;#34; (sym2str (first body))))) (base (slugify (list2string body) t)) (sm (str2sym (concat &amp;#34;sh/m/&amp;#34; base))) (sf (str2sym (concat &amp;#34;sh/&amp;#34; base))) (sfptw (str2sym (concat &amp;#34;sh/ptw/&amp;#34; base)))) `(progn (defmacro ,sm (&amp;amp;rest body) `(bp ,@&amp;#39;,body ,@body)) (defun ,sf (&amp;amp;rest body) (eval `(bp ,@&amp;#39;,body ,@body))) ;; This last one is the thing the function returns.</description>
    </item>
    
    <item>
      <title>Overview of my glossary</title>
      <link>https://mullikine.github.io/posts/glossary/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/glossary/</guid>
      <description>Click here to see my glossary
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113  &amp;#34;pathology&amp;#34; -&amp;gt; &amp;#34;oncology&amp;#34; &amp;#34;formal-languages&amp;#34; -&amp;gt; &amp;#34;programming-languages&amp;#34; &amp;#34;formal-languages&amp;#34; -&amp;gt; &amp;#34;functional-programming-fp&amp;#34; &amp;#34;formal-languages&amp;#34; -&amp;gt; &amp;#34;markup-languages&amp;#34; &amp;#34;functional-programming-fp&amp;#34; -&amp;gt; &amp;#34;lambda-calculus&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;compilers&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;haskell&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;golang&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;javascript&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;problog&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;racket&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;rust&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;tcl&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;programming-idioms&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;prolog&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;purescript&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;python&amp;#34; &amp;#34;python&amp;#34; -&amp;gt; &amp;#34;numpy&amp;#34; &amp;#34;python&amp;#34; -&amp;gt; &amp;#34;celery&amp;#34; &amp;#34;python&amp;#34; -&amp;gt; &amp;#34;spacy&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;r-lang&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;perl&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;lisp&amp;#34; &amp;#34;programming-languages&amp;#34; -&amp;gt; &amp;#34;lisp-based-languages&amp;#34; &amp;#34;lisp-based-languages&amp;#34; -&amp;gt; &amp;#34;lisp&amp;#34; &amp;#34;lisp-based-languages&amp;#34; -&amp;gt; &amp;#34;racket&amp;#34; &amp;#34;lisp-based-languages&amp;#34; -&amp;gt; &amp;#34;emacs-lisp&amp;#34; &amp;#34;functional-programming-fp&amp;#34; -&amp;gt; &amp;#34;haskell&amp;#34; &amp;#34;compilers&amp;#34; -&amp;gt; &amp;#34;parsers&amp;#34; &amp;#34;parsers&amp;#34; -&amp;gt; &amp;#34;github-semantic&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;oncology&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;psychology&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;ontology&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;math&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;computer-science&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;electricity&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;information-theory&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;data-science&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;architecture&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;data-mining&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;sciences&amp;#34; &amp;#34;studies&amp;#34; -&amp;gt; &amp;#34;philosophy&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;genetics&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;neuroscience&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;pathology&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;physics&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;phylogenetics&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;astrophysics&amp;#34; &amp;#34;sciences&amp;#34; -&amp;gt; &amp;#34;biochemistry&amp;#34; &amp;#34;data-science&amp;#34; -&amp;gt; &amp;#34;information-theory&amp;#34; &amp;#34;data-science&amp;#34; -&amp;gt; &amp;#34;data-mining&amp;#34; &amp;#34;data-science&amp;#34; -&amp;gt; &amp;#34;numpy&amp;#34; &amp;#34;cryptography&amp;#34; -&amp;gt; &amp;#34;information-theory&amp;#34; &amp;#34;computer-science&amp;#34; -&amp;gt; &amp;#34;random-number-generation&amp;#34; &amp;#34;computer-science&amp;#34; -&amp;gt; &amp;#34;data-science&amp;#34; &amp;#34;computer-science&amp;#34; -&amp;gt; &amp;#34;information-retrieval&amp;#34; &amp;#34;computer-science&amp;#34; -&amp;gt; hardware &amp;#34;computer-science&amp;#34; -&amp;gt; &amp;#34;cryptography&amp;#34; hardware -&amp;gt; &amp;#34;brain-computer-interface-bci&amp;#34; &amp;#34;neuroscience&amp;#34; -&amp;gt; &amp;#34;brain-computer-interface-bci&amp;#34; &amp;#34;information-retrieval&amp;#34; -&amp;gt; &amp;#34;preprocessing&amp;#34; &amp;#34;information-retrieval&amp;#34; -&amp;gt; &amp;#34;information-theory&amp;#34; &amp;#34;information-retrieval&amp;#34; -&amp;gt; &amp;#34;spark&amp;#34; &amp;#34;information-retrieval&amp;#34; -&amp;gt; &amp;#34;neural-ir&amp;#34; &amp;#34;computer-science&amp;#34; -&amp;gt; &amp;#34;artificial-intelligence-ai&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;machine-learning&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;decision-tree-learning&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;slam&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;general-ai-agi&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;deep-learning&amp;#34; &amp;#34;artificial-intelligence-ai&amp;#34; -&amp;gt; &amp;#34;logic&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;reinforcement-learning&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;keras&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;tensorflow&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;statistics&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;preprocessing&amp;#34; &amp;#34;deep-learning&amp;#34; -&amp;gt; &amp;#34;neural-ir&amp;#34; &amp;#34;information-retrieval&amp;#34; -&amp;gt; &amp;#34;elk-elastic-search&amp;#34; &amp;#34;data-structures-algorithms&amp;#34; -&amp;gt; &amp;#34;algorithms&amp;#34; &amp;#34;algorithms&amp;#34; -&amp;gt; &amp;#34;algorithm-analysis&amp;#34; &amp;#34;algorithms&amp;#34; -&amp;gt; &amp;#34;genetic-algorithms&amp;#34; &amp;#34;algorithms&amp;#34; -&amp;gt; &amp;#34;quantum-algorithms&amp;#34; &amp;#34;research&amp;#34; -&amp;gt; &amp;#34;arxiv&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;telecommunications&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;testing&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;databases&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;continuous-integration&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;licenses&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;preprocessing&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;software-engineering&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;system-administration&amp;#34; &amp;#34;computing&amp;#34; -&amp;gt; &amp;#34;google-cloud&amp;#34; &amp;#34;system-administration&amp;#34; -&amp;gt; &amp;#34;kubernetes&amp;#34; &amp;#34;software-engineering&amp;#34; -&amp;gt; &amp;#34;gdb&amp;#34; &amp;#34;databases&amp;#34; -&amp;gt; &amp;#34;big-query&amp;#34; &amp;#34;databases&amp;#34; -&amp;gt; &amp;#34;elk-elastic-search&amp;#34; &amp;#34;databases&amp;#34; -&amp;gt; &amp;#34;web-development&amp;#34; &amp;#34;jobs&amp;#34; -&amp;gt; &amp;#34;pacific-edge&amp;#34; &amp;#34;jobs&amp;#34; -&amp;gt; &amp;#34;decentralised-workforce-human-cloud&amp;#34; &amp;#34;pacific-edge&amp;#34; -&amp;gt; &amp;#34;oncology&amp;#34; &amp;#34;linguistics&amp;#34; -&amp;gt; &amp;#34;english-punctuation&amp;#34; &amp;#34;linguistics&amp;#34; -&amp;gt; &amp;#34;epigraphy&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;mathematical-algorithms&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;linear-algebra&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;number-theory&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;geometry&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;probability&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;statistics&amp;#34; &amp;#34;math&amp;#34; -&amp;gt; &amp;#34;abstract-algebra&amp;#34; &amp;#34;nlp-natural-language-processing&amp;#34; -&amp;gt; &amp;#34;conversational-ai&amp;#34; &amp;#34;spacy&amp;#34; -&amp;gt; &amp;#34;nlp-natural-language-processing&amp;#34; &amp;#34;spacy&amp;#34; -&amp;gt; &amp;#34;preprocessing&amp;#34; &amp;#34;world&amp;#34;     </description>
    </item>
    
    <item>
      <title>SSH config</title>
      <link>https://mullikine.github.io/posts/ssh-config/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/ssh-config/</guid>
      <description>Here&amp;rsquo;s some insight into my ssh config.
Proxy commands This is how to use proxytunnel, corkscrew and netcat to do ssh proxying.
If you wanted to ssh to home via vyatta via architect, you would do so as follows:
1  ssh home_vyatta_architect   config section for ProxyCommand 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95  Host *_connect-polipo ProxyCommand nc -X connect -x localhost:8123 %h %p Host *_tunneluni ProxyCommand proxytunnel -p proxy.</description>
    </item>
    
    <item>
      <title>Using vim as a stream editor</title>
      <link>https://mullikine.github.io/posts/vim-as-a-stream-editor/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/vim-as-a-stream-editor/</guid>
      <description>vim is considered to be more of a language than an editor.
Why not use all those vim bindings as macros for a stream editor? Then you can play out the motions in your head, which is more natural than formulating an awk script.
For example 1 2  ci -t 86400 elinks-dump &amp;#34;https://next-episode.net/supernatural&amp;#34; | edm -m &amp;#34;/Countdown:\&amp;lt;CR&amp;gt;jj\&amp;#34;ayyGdgg\&amp;#34;aP&amp;#34; | s efs   1 day 19 hours Demonstration</description>
    </item>
    
    <item>
      <title>Interactively loading GHCi commands</title>
      <link>https://mullikine.github.io/posts/interactively-loading-ghci-commands/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/interactively-loading-ghci-commands/</guid>
      <description>I&amp;rsquo;d like to be able to load commands into ghci and have the commands verbosely printed.
Likely you have a lot of .ghci files 1  locate .ghci   Case in point This file is actually a .ghci file as it contains commands such as :t (&amp;gt;)
https://github.com/bishboria/learnyouahaskell/blob/master/02/2%5Ftypes.hs
I created an expect script for this purpose using my expect-generation script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  hs|ghci) { cmd=&amp;#34;$1&amp;#34; shift if stdin_exists; then tfin=&amp;#34;$(cat | tf txt)&amp;#34; inpara=&amp;#34;-sf $(aqf &amp;#34;$tfin&amp;#34;)&amp;#34; else : ${cmd:=&amp;#34;foldl (/) 64 [4,2,4]&amp;#34;} fi # x -cd &amp;#34;$(pwd)&amp;#34; -sh &amp;#34;ghci&amp;#34; -r &amp;#34;^.</description>
    </item>
    
    <item>
      <title>Rosie Pattern Matching Language (RPL)</title>
      <link>https://mullikine.github.io/posts/rosie-pattern-matching-language/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/rosie-pattern-matching-language/</guid>
      <description>1 2 3 4 5 6 7 8 9  Rosie Pattern Matching Language RPL A language for writing PEG grammars, which are by definition both greedy and possessive. Parsing Expression Grammars PEG PEG languages are greedy and possessive.   extract ip addresses This file defines the ip address.
https://gitlab.com/rosie-pattern-language/rosie/blob/master/rpl/net.rpl
1  dmesg | rosie grep -o subs net.ipv4   7.35.177.61 7.35.177.61 extract email addresses RPL is greedy, possessive and its grammar libraries are usually designed to exhaust all possible (as opposed to commonly expected) matches, according to some spec.</description>
    </item>
    
    <item>
      <title>Notes on BERT</title>
      <link>https://mullikine.github.io/posts/google-bert/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/google-bert/</guid>
      <description>https://ai.googleblog.com/2018/11/open-sourcing-bert-state-of-art-pre.html
Pre-trained representations can either be context-free or contextual, and contextual representations can further be unidirectional or bidirectional.
1 2 3 4 5  node [style=filled,fillcolor=lightgrey,shape=box]; &amp;#34;Pre-trained representation&amp;#34; -&amp;gt; &amp;#34;context-free&amp;#34; &amp;#34;Pre-trained representation&amp;#34; -&amp;gt; contextual contextual -&amp;gt; unidirectional contextual -&amp;gt; bidirectional        LM supervision contextual Pre-trained Training data bi-directional     BERT unsupervised ✓ ✓ Plain text ✓   word2vec semi/self-supervised ✗      GloVe semi-supervised ✗       Supervision is a bit grey  Supervised If you consider that the network has to learn from it’s errors through back prop.</description>
    </item>
    
    <item>
      <title>Updating Trigger Studio for Age of Empires II: DE</title>
      <link>https://mullikine.github.io/posts/ts-aoe2de/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/ts-aoe2de/</guid>
      <description>Set up VS2005 on XP I&amp;rsquo;m using VS2005 for the maximum compatibility.
  Class diagram of TS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  n17 [label=&amp;#34;{LinkList|- _head\l- _tail\l| clear()\l getById()\l getByIdSafe()\l head()\l pop()\l push_back()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n19 [label=&amp;#34;{MapCopyCache|+ source\l+ source\l+ unitcount\l+ unitcount\l+ units\l+ units\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n41 [label=&amp;#34;{playersunit_ucnst_equals|- _cnst\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n42 [label=&amp;#34;{playersunit_ucnst_notequals|- _cnst\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n3 [label=&amp;#34;{Campaign|+ header\l| open()\l reset()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n11 [label=&amp;#34;{EditEC|+ index\l+ mapview\l+ parent\l+ players\l+ trigindex\l+ user\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n30 [label=&amp;#34;{TrigXmlVisitor|- _ss\l- _trigcount\l| visit()\l visitEnd()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n44 [label=&amp;#34;{uid_equals|- _uid\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n45 [label=&amp;#34;{unit_in_area|- _area\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n8 [label=&amp;#34;{ECBase|+ GAIA_INDEX\l+ ectype\l+ parent_trigger_id\l+ size\l+ type\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n14 [label=&amp;#34;{EffectItemData|+ editor\l+ treeitem\l+ trig_index\l| Copy()\l Delete()\l DuplicatePlayers()\l GetEffect()\l GetName()\l+ GetTrigger()\l ModifyIndex()\l OpenEditor()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n37 [label=&amp;#34;{get_ec_player|- _player\l|+ player()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n40 [label=&amp;#34;{players||}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n43 [label=&amp;#34;{send_visitor|- _tv\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n28 [label=&amp;#34;{TrigScrawlVisitor|- _ss\l- _trigcount\l| visit()\l visitEnd()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n34 [label=&amp;#34;{UnitGroupLink|+ count\l+ list\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n22 [label=&amp;#34;{Player|+ age\l+ ai\l+ aifile\l+ aimode\l+ avictory\l+ camera\l+ civ\l+ color\l+ cty\l+ ctyfile\l+ diplomacy\l+ dis_bldg\l+ dis_tech\l+ dis_unit\l+ enable\l+ ending_age\l+ human\l+ name\l names\l+ names\l+ ndis_b\l+ ndis_t\l+ ndis_u\l num_players\l+ num_players\l+ player_number\l+ pop\l+ resources\l+ stable\l+ u1\l+ u2\l+ ucount\l+ units\l+ vc\l+ vcfile\l| add_unit()\l change_unit_type_for_all_of_type()\l clear_ai()\l clear_cty()\l clear_vc()\l erase_unit()\l erase_unit_area()\l erase_unit_type()\l export_ai()\l export_cty()\l export_vc()\l find_unit()\l import_ai()\l import_cty()\l import_vc()\l read_age()\l read_aifiles()\l read_aimode()\l read_camera_longs()\l read_data1()\l read_data3()\l read_data4()\l read_diplomacy()\l read_dis_bldgs()\l read_dis_techs()\l read_dis_units()\l read_header_name()\l read_header_stable()\l read_ndis_bldgs()\l read_ndis_techs()\l read_ndis_units()\l read_player_number()\l read_resources()\l read_units()\l reset()\l write_data1()\l write_data3()\l write_header_name()\l write_header_stable()\l write_no_units()\l write_units()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n26 [label=&amp;#34;{Setts|+ BasePath\l+ DelTempOnExit\l+ ScenPath\l+ TempPath\l+ asktoconverteffects\l+ disabletips\l+ displayhints\l+ drawconds\l+ draweffects\l+ drawelevation\l+ drawlocations\l+ drawplayer\l+ drawterrain\l+ editall\l+ forceenabletips\l+ intense\l+ logname\l+ nowarnings\l- path\l- recent\l+ recent_first\l- recent_used\l+ showdisplayorder\l+ showtrigfunction\l+ showtrigids\l+ showtrignames\l+ warnbits\l+ zoom\l| load()\l read_recent()\l recent_getnext()\l recent_push()\l write_recent()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n6 [label=&amp;#34;{Condition|+ NUM_CONDITIONS_AOF4\l+ NUM_CONDITIONS_AOHD4\l+ NUM_CONDITIONS_AOK\l+ NUM_CONDITIONS_CC\l+ NUM_CONDITIONS_SWGB\l+ NUM_TAUNT_SETS\l+ NUM_VIRTUAL_CONDITIONS_AOC\l+ NUM_VIRTUAL_CONDITIONS_AOF\l+ NUM_VIRTUAL_CONDITIONS_AOHD\l+ NUM_VIRTUAL_CONDITIONS_AOK\l+ NUM_VIRTUAL_CONDITIONS_CC\l+ NUM_VIRTUAL_CONDITIONS_SWGB\l+ NUM_VIRTUAL_CONDITIONS_UP\l+ ai_signal\l+ amount\l+ area\l defaultvals\l+ defaultvals\l+ group\l+ object\l+ pTech\l+ pUnit\l+ player\l+ res_type\l+ reserved\l+ reverse_hd\l taunt_set\l+ taunt_set\l+ tech_cnst\l+ timer\l types\l+ types\l types_aok\l+ types_aok\l types_cc\l+ types_cc\l types_short\l+ types_short\l types_short_aok\l+ types_short_aok\l types_short_cc\l+ types_short_cc\l types_short_swgb\l+ types_short_swgb\l types_swgb\l+ types_swgb\l+ u_loc\l+ unit_cnst\l+ unknown2\l+ utype\l- valid_since_last_check\l virtual_types\l+ virtual_types\l virtual_types_aoc\l+ virtual_types_aoc\l virtual_types_aof\l+ virtual_types_aof\l virtual_types_aohd\l+ virtual_types_aohd\l virtual_types_aok\l+ virtual_types_aok\l virtual_types_cc\l+ virtual_types_cc\l virtual_types_swgb\l+ virtual_types_swgb\l virtual_types_up\l+ virtual_types_up\l| accept()\l areaName()\l check()\l check_and_save()\l compress()\l getName()\l getPlayer()\l get_valid_since_last_check()\l null_location_unit()\l null_object()\l read()\l selectedUnits()\l setPlayer()\l tobuffer()\l valid_area()\l valid_area_location()\l valid_full_map()\l valid_location_unit()\l valid_object()\l valid_partial_map()\l valid_player()\l valid_technology_spec()\l valid_unit_spec()\l write()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n7 [label=&amp;#34;{ConditionItemData|+ editor\l+ treeitem\l+ trig_index\l| Copy()\l Delete()\l DuplicatePlayers()\l GetCondition()\l GetName()\l+ GetTrigger()\l ModifyIndex()\l OpenEditor()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n38 [label=&amp;#34;{io_error||}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n39 [label=&amp;#34;{p||}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n47 [label=&amp;#34;{unit_in_rect|- _rect\l- _rect\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n5 [label=&amp;#34;{ColorLink|+ ref\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n20 [label=&amp;#34;{MemBuffer|- blen\l- buffer\l- mine\l- pos\l- writeable\l| checkFits()\l fill()\l+ get()\l read()\l reads()\l skip()\l write()\l writes()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n15 [label=&amp;#34;{ItemData|+ index\l+ type\l| Copy()\l Delete()\l DuplicatePlayers()\l GetName()\l+ GetTrigger()\l ModifyIndex()\l OpenEditor()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n16 [label=&amp;#34;{Link|- _id\l- _name\l+ _next\l| id()\l name()\l next()\l read()\l setNext()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n21 [label=&amp;#34;{NullBuffer|- _size\l| fill()\l read()\l reads()\l size()\l skip()\l write()\l writes()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n24 [label=&amp;#34;{SVector|- begin\l- end\l- next\l- realloc_flag\l|+ allocate()\l+ append()\l+ at()\l+ clear()\l- copy()\l+ count()\l- expand()\l+ first()\l+ insert()\l+ last()\l+ remove()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n25 [label=&amp;#34;{Scenario|+ OUTOFBOUNDS\l StandardAI\l+ StandardAI\l StandardAI2\l+ StandardAI2\l+ TEMPTERRAIN\l+ TEMPTERRAIN2\l+ all_techs\l+ bBitmap\l+ bitmap\l+ cFiles\l+ cinem\l+ editor_pos\l+ files\l+ game\l+ header\l+ lock_teams\l+ map\l+ max_teams\l+ messages\l- mod_status\l+ msg\l+ mstrings\l+ next_uid\l+ objstate\l+ origname\l+ pergame\l+ perversion\l pgAOC\l+ pgAOC\l pgAOE\l+ pgAOE\l pgAOF\l+ pgAOF\l pgAOF4\l+ pgAOF4\l pgAOF6\l+ pgAOF6\l pgAOHD\l+ pgAOHD\l pgAOHD4\l+ pgAOHD4\l pgAOHD6\l+ pgAOHD6\l pgAOK\l+ pgAOK\l+ pgGame\l pgSWGB\l+ pgSWGB\l pgSWGBCC\l+ pgSWGBCC\l pgUP\l+ pgUP\l+ player_choose_teams\l+ players\l pv1_15\l+ pv1_15\l pv1_18\l+ pv1_18\l+ pv1_21\l pv1_22\l+ pv1_22\l pv1_23\l+ pv1_23\l pv1_24\l+ pv1_24\l pv1_26\l+ pv1_26\l pv1_30\l+ pv1_30\l+ random_start_points\l- sect\l+ t_order\l+ triggers\l+ trigver\l+ unk3\l+ unk4\l+ unknown\l+ ver1\l+ ver2\l+ version2\l+ vict\l| AOKBMP()\l accept()\l adapt_game()\l add_activation()\l aoc_to_aok()\l aoc_to_hd4()\l aoc_to_hd6()\l aohd_to_hd6()\l aok_to_aoc()\l auto_upgrade_hd4()\l auto_upgrade_hd6()\l change_unit_type_for_all_of_type()\l clean_format()\l clean_triggers()\l clearaicpvc()\l compress_unit_ids()\l datasetRequired()\l delete_player_units()\l delete_triggers()\l duplicate_triggers()\l exFile()\l expansionsRequired()\l export_bmp()\l fix_t_order()\l fix_trigger_outliers()\l floodFill4()\l floodFillElev4()\l getPlayerCount()\l get_number_active_players()\l hd4_to_hd6()\l hd_to_10c()\l hd_to_swgb()\l hd_to_up()\l insert_trigger()\l instructions_panel_set()\l instructions_sound_id_set()\l instructions_sound_text_set()\l instructions_string_reset()\l instructions_string_zero()\l isTerrainEdge()\l is_userpatch()\l map_change_elevation()\l map_copy()\l map_delete()\l map_duplicate()\l map_move()\l map_paste()\l map_repeat()\l map_scale()\l map_size()\l map_swap()\l move_triggers()\l+ needsave()\l next_sect()\l open()\l outline()\l outlineDraw()\l prefix_display_order()\l randomize_unit_frames()\l read()\l read_data()\l remove_display_order_prefix()\l remove_trigger_descriptions()\l remove_trigger_names()\l requireDataset()\l reset()\l save()\l save_pseudonyms()\l set_number_active_players()\l set_unit_z_to_map_elev()\l sort_conds_effects()\l strip_patch4()\l strip_patch6()\l swapTerrain()\l swap_players()\l swap_trigger_names_descriptions()\l swap_triggers()\l sync_triggers()\l toFile()\l unrequireDataset()\l up_to_10c()\l up_to_aofe()\l up_to_hd()\l up_to_swgb()\l water_cliffs_visibility()\l write()\l write_data()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n4 [label=&amp;#34;{ChangePlayerVisitor|- _player\l| visit()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n9 [label=&amp;#34;{ESDATA|- aitype_count\l+ aitypes\l- civ_count\l+ civs\l- color_count\l+ colors\l pfuncs\l- pfuncs\l- res_count\l+ resources\l- rstate\l- tech_count\l+ techs\l- terrain_count\l+ terrains\l+ ug_buildings\l+ ug_units\l- unit_count\l- unitgroup_count\l+ unitgroups\l+ units\l| endResources()\l getCount()\l load()\l readAitypes()\l readCiv()\l readColor()\l readResources()\l readSimple()\l readTech()\l readTerrain()\l readUnit()\l readUnitGroup()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n12 [label=&amp;#34;{EditEffect|+ N_CONTROLS\l+ TrigCallback\l+ e\l| update()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n23 [label=&amp;#34;{SString|- data\l- len\l null\l- null\l|+ c_str()\l erase()\l+ length()\l lock()\l+ lwn()\l put()\l read()\l set()\l+ total_size()\l unlock()\l write()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n29 [label=&amp;#34;{TrigXmlReader|| read()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n31 [label=&amp;#34;{Trigger|+ conds\l+ description\l+ display_order\l+ effects\l+ id\l+ loop\l+ name\l+ obj\l+ obj_order\l+ obj_str_id\l+ state\l+ u1\l| accept()\l getIDName()\l getName()\l get_player()\l read()\l sort_conditions()\l sort_effects()\l tobuffer()\l write()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n32 [label=&amp;#34;{TriggerVisitor||+ visitEnd()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n33 [label=&amp;#34;{Unit|- cnst\l+ frame\l+ garrison\l+ ident\l- pType\l+ rotate\l size\l+ size\l+ state\l+ x\l+ y\l+ z\l| getType()\l getTypeID()\l read()\l setType()\l toBuffer()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n1 [label=&amp;#34;{AutoFile|- _file\l| close()\l get()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n10 [label=&amp;#34;{EditCondition|+ N_CONTROLS\l+ c\l| update()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n48 [label=&amp;#34;{unit_is_type|- _type\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n35 [label=&amp;#34;{UnitLink|+ hp\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n36 [label=&amp;#34;{bad_data_error||}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n27 [label=&amp;#34;{TechLink|+ civ\l|}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n2 [label=&amp;#34;{Buffer||}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; n13 [label=&amp;#34;{Effect|+ NUM_EFFECTS_AOC\l+ NUM_EFFECTS_AOF\l+ NUM_EFFECTS_AOF4\l+ NUM_EFFECTS_AOF6\l+ NUM_EFFECTS_AOHD\l+ NUM_EFFECTS_AOHD4\l+ NUM_EFFECTS_AOHD6\l+ NUM_EFFECTS_AOK\l+ NUM_EFFECTS_CC\l+ NUM_EFFECTS_SWGB\l+ NUM_EFFECTS_UP\l+ NUM_VIRTUAL_EFFECTS_AOC\l+ NUM_VIRTUAL_EFFECTS_AOF\l+ NUM_VIRTUAL_EFFECTS_AOHD\l+ NUM_VIRTUAL_EFFECTS_AOK\l+ NUM_VIRTUAL_EFFECTS_CC\l+ NUM_VIRTUAL_EFFECTS_SWGB\l+ NUM_VIRTUAL_EFFECTS_UP\l+ ai_goal\l+ amount\l+ area\l defaultvals\l+ defaultvals\l+ diplomacy\l+ disp_time\l+ group\l+ location\l+ num_sel\l+ pTech\l+ pUnit\l+ panel\l+ res_type\l+ s_player\l+ sound\l+ soundid\l+ stance\l+ t_player\l+ tech_cnst\l+ text\l+ textid\l+ trig_index\l types\l+ types\l types_aoc\l+ types_aoc\l types_aof\l+ types_aof\l types_aohd\l+ types_aohd\l types_aok\l+ types_aok\l types_cc\l+ types_cc\l types_short\l+ types_short\l types_short_aoc\l+ types_short_aoc\l types_short_aof\l+ types_short_aof\l types_short_aohd\l+ types_short_aohd\l types_short_aok\l+ types_short_aok\l types_short_cc\l+ types_short_cc\l types_short_swgb\l+ types_short_swgb\l types_short_up\l+ types_short_up\l types_swgb\l+ types_swgb\l types_up\l+ types_up\l+ uid_loc\l+ uids\l+ unit_cnst\l+ utype\l- valid_since_last_check\l virtual_types\l+ virtual_types\l virtual_types_aoc\l+ virtual_types_aoc\l virtual_types_aof\l+ virtual_types_aof\l virtual_types_aohd\l+ virtual_types_aohd\l virtual_types_aok\l+ virtual_types_aok\l virtual_types_cc\l+ virtual_types_cc\l virtual_types_swgb\l+ virtual_types_swgb\l virtual_types_up\l+ virtual_types_up\l| accept()\l areaName()\l check()\l check_and_save()\l compress()\l getName()\l getPlayer()\l getTypeName()\l get_valid_since_last_check()\l has_selected()\l has_unit_constant()\l isCeilAmount()\l isFloorAmount()\l null_location_unit()\l read()\l selectedUnits()\l setPlayer()\l tobuffer()\l valid_area()\l valid_area_location()\l valid_destination()\l valid_full_map()\l valid_location_coord()\l valid_location_unit()\l valid_panel()\l valid_partial_map()\l valid_points()\l valid_selected()\l valid_source_player()\l valid_target_player()\l valid_technology_spec()\l valid_trigger()\l valid_unit_constant()\l valid_unit_spec()\l write()\l}&amp;#34; style=filled fillcolor=&amp;#34;#ffffff&amp;#34; shape=&amp;#34;record&amp;#34;]; { n21 n20 } -&amp;gt; n2 [arrowhead=&amp;#34;empty&amp;#34;]; { n10 n12 } -&amp;gt; n11 [arrowhead=&amp;#34;empty&amp;#34;]; { n35 n27 n34 n5 } -&amp;gt; n16 [arrowhead=&amp;#34;empty&amp;#34;]; { n13 n6 } -&amp;gt; n8 [arrowhead=&amp;#34;empty&amp;#34;]; { n14 n7 } -&amp;gt; n15 [arrowhead=&amp;#34;empty&amp;#34;]; { n4 n30 n28 } -&amp;gt; n32 [arrowhead=&amp;#34;empty&amp;#34;];     Try opening a scenario saved from DE I receive this error 1 2 3 4 5 6 7 8  Failed to open as The Conquerors scenario file.</description>
    </item>
    
    <item>
      <title>Python environment</title>
      <link>https://mullikine.github.io/posts/python-environment/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-environment/</guid>
      <description>https://pipxproject.github.io/pipx/comparisons/
pyenv Makes it easy to install, manage, and switch between multiple Pythons.
1 2 3 4 5 6 7 8 9  # install a bunch of pythons pyenv install 3.8.0 pyenv install 3.7.4 pyenv install 3.6.9 pyenv install 2.7.16 pyenv install pypy3.6-7.1.1 # set the default python pyenv global 3.8.0   using pyenv Check which version is set and which are available 1  pyenv versions   * system (set by /home/shane/.</description>
    </item>
    
    <item>
      <title>Coding faster with Deep TabNine</title>
      <link>https://mullikine.github.io/posts/using-deep-tabnine/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-deep-tabnine/</guid>
      <description>Example of using Deep TabNine to write with example code</description>
    </item>
    
    <item>
      <title>Simulating mouse clicks in emacs</title>
      <link>https://mullikine.github.io/posts/simulating-mouse-clicks-in-emacs/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/simulating-mouse-clicks-in-emacs/</guid>
      <description>Using tmux, emacs and vim, I create some bindings to allow you to send mouse clicks to the terminal programmatically.
I had attempted to do this with emacs lisp but it was overly complicated and had I succeeded only emacs would be able to understand the mouse codes.
Click at the cursor location Make the tmux bindings 1 2  bind -n C-M-x run -b &amp;#34;tm mousedown&amp;#34; bind -n C-M-z run -b &amp;#34;tm mouseup&amp;#34;   Make the tm script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  mousedown|mouseup) { while [ $# -gt 0 ]; do opt=&amp;#34;$1&amp;#34;; case &amp;#34;$opt&amp;#34; in -t) { TMUX_PANE=&amp;#34;$2&amp;#34; shift shift } ;; *) break; esac; done [ -n &amp;#34;$1&amp;#34; ] &amp;amp;&amp;amp; x=&amp;#34;$1&amp;#34; &amp;amp;&amp;amp; shift [ -n &amp;#34;$1&amp;#34; ] &amp;amp;&amp;amp; y=&amp;#34;$1&amp;#34; &amp;amp;&amp;amp; shift : ${TMUX_PANE:=&amp;#34;$CALLER_PANE&amp;#34;} # tm cursor if test -z &amp;#34;$x&amp;#34;; then x=&amp;#34;$(tmux display -t &amp;#34;$TMUX_PANE&amp;#34; -p &amp;#34;#{cursor_x}&amp;#34;)&amp;#34; fi if test -z &amp;#34;$y&amp;#34;; then y=&amp;#34;$(tmux display -t &amp;#34;$TMUX_PANE&amp;#34; -p &amp;#34;#{cursor_y}&amp;#34;)&amp;#34; fi # ns &amp;#34;$f $TMUX_PANE $x $y&amp;#34; &amp;amp;&amp;gt;/dev/null if [ -n &amp;#34;$TMUX_PANE&amp;#34; ] &amp;amp;&amp;amp; [ -n &amp;#34;$x&amp;#34; ] &amp;amp;&amp;amp; [ -n &amp;#34;$y&amp;#34; ]; then case &amp;#34;$f&amp;#34; in mousedown) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -d $x $y)&amp;#34; } ;; mouseup) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -u $x $y)&amp;#34; } ;; click) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -d $x $y)&amp;#34; sleep 0.</description>
    </item>
    
    <item>
      <title>Python library wordcloud</title>
      <link>https://mullikine.github.io/posts/python-library-wordcloud/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-library-wordcloud/</guid>
      <description>
  </description>
    </item>
    
    <item>
      <title>Org-mode</title>
      <link>https://mullikine.github.io/posts/org-mode/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/org-mode/</guid>
      <description>I had been searching for a way to put newlines inside table cells This is the way to do it.
1 2 3  # This works for table cells #+MACRO: NL @@html:&amp;lt;br/&amp;gt;@@ #+MACRO: NLL @@html:&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;@@   1 2 3 4 5  | header / source | capacity | used by | instances | || | bst.h | *∞* | hash_table.h | one per hash table | | hash_table.</description>
    </item>
    
    <item>
      <title>Deconstructing the Cocomel search engine</title>
      <link>https://mullikine.github.io/posts/deconstructing-cocomel/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/deconstructing-cocomel/</guid>
      <description>This is my attempt to understand Vaughan Kitchen&amp;rsquo;s search engine.
 Source code https://github.com/vkitchen/cocomel Related articles Entropy, Cross-Entropy and KL-Divergence // Bodacious Blog An example information retrieval problem  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  red-black tree RBT [self-balancing binary search tree] Each node of the binary tree has an extra bit, and that bit is often interpreted as the color of the node.</description>
    </item>
    
    <item>
      <title>Generic paths for toolchains</title>
      <link>https://mullikine.github.io/posts/generic-path-for-blockchains/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/generic-path-for-blockchains/</guid>
      <description>I downloaded the latest version of the clang compiler today and I didn&amp;rsquo;t know where to put it.
I didn&amp;rsquo;t want to set up paths for a single toolchain and have to do it again in the future.
This was my hack. It works. Use this 1 2 3 4 5 6 7 8  for d in /usr/local/toolchains/*; do export PATH=$d/bin:${PATH} export LIBRARY_PATH=$d/lib:${LIBRARY_PATH} export LD_LIBRARY_PATH=$d/lib:${LD_LIBRARY_PATH} export C_INCLUDE_PATH=$d/include:${C_INCLUDE_PATH} export CPLUS_INCLUDE_PATH=$d/include:${CPLUS_INCLUDE_PATH} export MANPATH=&amp;#34;$d/share/man:$MANPATH&amp;#34; done   I extracted clang+llvm-9.</description>
    </item>
    
    <item>
      <title>Editing grep results with emacs</title>
      <link>https://mullikine.github.io/posts/editing-grep-results-with-emacs/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/editing-grep-results-with-emacs/</guid>
      <description>Either require ivy or steal it&amp;rsquo;s function 1 2 3 4 5 6  (defun ivy-wgrep-change-to-wgrep-mode () &amp;#34;Forward to `wgrep-change-to-wgrep-mode&amp;#39;.&amp;#34; (interactive) (if (require &amp;#39;wgrep nil &amp;#39;noerror) (wgrep-change-to-wgrep-mode) (error &amp;#34;Package wgrep isn&amp;#39;t installed&amp;#34;)))   When grep-mode is started, wgrep-setup must run to prepare wgrep 1 2 3 4 5 6 7 8 9 10 11 12  (defun grep-mode-hook-run () ;; This saves the keymap so it can be restored (wgrep-setup) (define-key compilation-button-map (kbd &amp;#34;C-m&amp;#34;) &amp;#39;compile-goto-error) (define-key grep-mode-map (kbd &amp;#34;C-m&amp;#34;) &amp;#39;compile-goto-error) ;; (define-key grep-mode-map (kbd &amp;#34;C-c C-p&amp;#34;) #&amp;#39;wgrep-change-to-wgrep-mode) ) (add-hook &amp;#39;grep-mode-hook &amp;#39;grep-mode-hook-run t) ;; If =C-x C-q= is not available we can use this binding instead (define-key grep-mode-map (kbd &amp;#34;C-c C-p&amp;#34;) #&amp;#39;ivy-wgrep-change-to-wgrep-mode)   Set up grep-mode 1 2 3 4 5 6  ;; Unmap some keys so we can type in grep-mode (define-key grep-mode-map (kbd &amp;#34;h&amp;#34;) nil) (define-key grep-mode-map (kbd &amp;#34;g&amp;#34;) nil) ;; This connects grep-mode to wgrep (define-key grep-mode-map (kbd &amp;#34;C-x C-q&amp;#34;) #&amp;#39;ivy-wgrep-change-to-wgrep-mode)   Set up wgrep-mode 1 2  (setq wgrep-auto-save-buffer t) (define-key wgrep-mode-map (kbd &amp;#34;C-m&amp;#34;) #&amp;#39;compile-goto-error)   wgrep-auto-save-buffer is needed so that when grep results are edited, they save automatically.</description>
    </item>
    
    <item>
      <title>Latex and Machine Learning</title>
      <link>https://mullikine.github.io/posts/machine-learning/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/machine-learning/</guid>
      <description>Information Gain  Original article Information Gain and Mutual Information for Machine Learning  \begin{equation} \mathbf{IG}(\mathbf{S}, a) = \mathbf{H}(\mathbf{S}) – \mathbf{H}(\mathbf{S} | a) \end{equation}
Mutual information  References Information Gain and Mutual Information for Machine Learning An introduction to mutual information - YouTube  Concerns the outcome of two random variables.
If we know the value of one of the random variables in a system there is a corresponding reduction in uncertainty for predicting the other one and mutual information measures that reduction in uncertainty.</description>
    </item>
    
    <item>
      <title>Entropy, Cross-Entropy and KL-Divergence</title>
      <link>https://mullikine.github.io/posts/entropy-cross-entropy-and-kl-divergence/</link>
      <pubDate>Sat, 02 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/entropy-cross-entropy-and-kl-divergence/</guid>
      <description>Original video A Short Introduction to Entropy, Cross-Entropy and KL-Divergence - YouTube Related reading https://blog.floydhub.com/knowledge-distillation/  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13  marginalized Treated as insignificant or peripheral. marginal likelihood function integrated likelihood model evidence evidence [#statistics] [#bayesian statistics] A likelihood function in which some parameter variables have been marginalized.   Predicted distribution vs true distribution Predicted distribution When designing a code to represent weather predictions, you try to assign fewer bits for outcomes which are probably going to be more common.</description>
    </item>
    
    <item>
      <title>Automating tcl/expect</title>
      <link>https://mullikine.github.io/posts/automating-expect/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-expect/</guid>
      <description>Using tmux, expect and bash I made a script which you can use to automate practically anything on the command line in an easy way.
Build the x scriptdescription>
    </item>
    
    <item>
      <title>C&#43;&#43; template metaprogramming with Racket</title>
      <link>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #lang fulmar (require fulmar/meta) (definitions (define/meta zero) (define/meta succ (n)) (define/meta (add m n) [((succ n-minus-one) m) (add n-minus-one (succ m))] [((zero) m) m]) (define/meta (m-equal a b) [(v v) v])) #&amp;lt;&amp;lt;tests-section-end int main(int argc, const char *argv[]) { Add&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero &amp;gt; &amp;gt;, Succ&amp;lt;Zero&amp;gt; &amp;gt;::result typedef result; MEqual&amp;lt;result, Succ&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero&amp;gt; &amp;gt; &amp;gt; &amp;gt;::result typedef assert; return 0; } tests-section-end   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  /* This file was generated by fulmar version 0.</description>
    </item>
    
    <item>
      <title>Golang slices vs Python slices</title>
      <link>https://mullikine.github.io/posts/golang-slices-vs-python-slices/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/golang-slices-vs-python-slices/</guid>
      <description>Golang slices are very limited.
Apart from its syntactic limitations, golang slice syntax also lacks in generics due to only being able to operate on golang slices.
Python, with its duck-typing is able to use slices on anything that&amp;rsquo;s a collection.
Demonstrate golang slices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import &amp;#34;fmt&amp;#34; func main() { intSlice := []int{1, 2, 3, 4, 5} fmt.</description>
    </item>
    
    <item>
      <title>Lispifying indent-based code</title>
      <link>https://mullikine.github.io/posts/lispify-indents/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/lispify-indents/</guid>
      <description>I would like to be able to take indent-based code and turn it into parenthesis-based code.
 Target languages:  YAML Python C++   Prototype in racket 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91  #lang racket ;; (require racket) ; or match individually.</description>
    </item>
    
    <item>
      <title>Macros in racket</title>
      <link>https://mullikine.github.io/posts/racket-macros/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/racket-macros/</guid>
      <description>;; CSE 341 Autumn 2012 - Racket Macros
Macros To oversimplify, a macro is just a rule for rewriting programs as a prepass to evaluation. So it’s very syntactic. The “level” at which macros are defined affects their usefulness. • “Sublexical” e.g.: Replace car with hd would turn cart into hdt. – No macro system does this; so macro-expander must know how to break programs into tokens. • “Pre-parsing” e.g.: Replace add(x,y) with x + y (where x and y stand for expressions) would turn add(x,y) * z into x + y * z.</description>
    </item>
    
    <item>
      <title>Variational Inference</title>
      <link>https://mullikine.github.io/posts/variational-inference/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/variational-inference/</guid>
      <description>Original article https://fabiandablander.com/r/Variational-Inference.html  Prereading https://mullikine.github.io/posts/entropy-cross-entropy-and-kl-divergence/
Bayes&amp;rsquo; Theorm 1 2 3 4 5 6 7 8 9 10 11  \begin{equation} \underbrace{p(\mathbf{z} \mid \mathbf{x})}_{\text{Posterior}} = \underbrace{p(\mathbf{z})}_{\text{Prior}} \times \frac{\overbrace{p(\mathbf{x} \mid \mat hbf{z})}^{\text{Likelihood}}}{\underbrace{\int p(\mathbf{x} \mid \mathbf{z}) \, p(\mathbf{z}) \, \mathrm{d}\mathbf{z}}_{\text{Marginal Likelihood}}} \enspace , \end{equation} where $\mathbf{z}$ denotes latent parameters we want to infer and $\mathbf{x}$ denotes data.   \begin{equation} \underbrace{p(\mathbf{z} \mid \mathbf{x})}_{\text{Posterior}} = \underbrace{p(\mathbf{z})}_{\text{Prior}} \times \frac{\overbrace{p(\mathbf{x} \mid \mathbf{z})}^{\text{Likelihood}}}{\underbrace{\int p(\mathbf{x} \mid \mathbf{z}) \, p(\mathbf{z}) \, \mathrm{d}\mathbf{z}}_{\text{Marginal Likelihood}}} \enspace , \end{equation}</description>
    </item>
    
    <item>
      <title>Graphviz and Hugo</title>
      <link>https://mullikine.github.io/posts/graphviz/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/graphviz/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph-ascii :async :results verbatim code  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ s1 ┃ ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ v ∘━━━━∘ #================================# ∘━━━━∘ ┃ s5 ┃ &amp;lt;━┄┄H low-priority H &amp;lt;━┄┄┃ s2 ┃ ∘━━━━∘ #================================# ∘━━━━∘ ^ ┃ ┃ ^ ┃ ┃ wait-time exceeded ┃ ┃ ┃ v ┃ ┃ ┃ #=====================# ┃ ∘━━━━∘ ∘━━━━━━┄┄H high-priority H ┃ ┃ s3 ┃ #=====================# ┃ ∘━━━━∘ ┃ ┃ ┃ ┃ v ┃ ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ s4 ┃ &amp;lt;∘ ∘━━━━━━━━━━━━━━━━━━━━━∘   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph priority :async :results raw drawer  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph-ascii-lr :async :results verbatim code  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ∘━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ ┃ ∘━━━━∘ #==============# wait-time exceeded #===============# ∘━━━━∘ ┃ ┃ s1 ┃ ━━&amp;gt; H H ━━━━━━━━━━━━━━━━━━━━&amp;gt; H high-priority H ━━&amp;gt; ┃ s4 ┃ ┃ ∘━━━━∘ H H #===============# ∘━━━━∘ ┃ H H ^ ┃ H low-priority H ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━∘ ┃ H H ┃ ∘━━━━∘ H H ∘━━━━━━━━━━━━━━━∘ ┃ ┃ s2 ┃ ━━&amp;gt; H H &amp;lt;━━━━━━━━━━━━━━━━━━━┄┄┃ s3 ┃ ┃ ∘━━━━∘ #==============# ∘━━━━━━━━━━━━━━━∘ ┃ ┃ ┃ ┃ ┃ v ┃ ∘━━━━━━━━━━━━━━∘ ∘━━━━━━━━━━-&amp;gt; ┃ s5 ┃ ∘━━━━━━━━━━━━━━∘   1 2 3 4 5 6 7 8 9  &amp;#34;Back&amp;#34; [shape=&amp;#34;egg&amp;#34; color=&amp;#34;green&amp;#34; style=&amp;#34;filled&amp;#34; fillcolor=&amp;#34;yellow&amp;#34;]; &amp;#34;Forth&amp;#34; [shape=&amp;#34;house&amp;#34; color=&amp;#34;red&amp;#34;]; &amp;#34;Other&amp;#34; [shape=&amp;#34;invtriangle&amp;#34; color=&amp;#34;blue&amp;#34;]; &amp;#34;Back&amp;#34; -&amp;gt; &amp;#34;Forth&amp;#34; [color=&amp;#34;orange&amp;#34; label=&amp;#34;weee&amp;#34;]; &amp;#34;Forth&amp;#34; -&amp;gt; &amp;#34;Back&amp;#34; [color=&amp;#34;purple&amp;#34; label=&amp;#34;eeew&amp;#34;]; &amp;#34;Other&amp;#34; -&amp;gt; &amp;#34;Forth&amp;#34; &amp;#34;Other&amp;#34; -&amp;gt; &amp;#34;Back&amp;#34;     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  subgraph clusterEncoders { style = filled fillcolor = lightgrey node [style=filled,fillcolor=lightgrey,shape=circle]; label = &amp;#34;Set of encoders&amp;#34; subgraph clusterEncoder1 { fillcolor = white label = &amp;#34;Encoder 1&amp;#34;; f1[label=&amp;#34;FFNN&amp;#34;] a1[label=&amp;#34;Self-Attention layer&amp;#34;] a1 -&amp;gt; f1 } subgraph clusterEncoder2 { fillcolor = white label = &amp;#34;Encoder 2&amp;#34;; f2[label=&amp;#34;FFNN&amp;#34;] a2[label=&amp;#34;Self-Attention layer&amp;#34;] a2 -&amp;gt; f2 } subgraph clusterEncoderN { fillcolor = white label = &amp;#34;Encoder N&amp;#34;; etc [label=&amp;#34;.</description>
    </item>
    
    <item>
      <title>Lists in emacs lisp</title>
      <link>https://mullikine.github.io/posts/lists-in-emacs-lisp/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/lists-in-emacs-lisp/</guid>
      <description>What is a list? A list in emacs is a list of cons cells. A cons cell has a car and a cdr. The car is a value. The cdr is a pointer.
e.g. This allows you to set the nth item of a list 1  (setcar (nthcdr 2 list) &amp;#39;epsilon)   Useful pages https://www.emacswiki.org/emacs/ListModification#toc7
functions  mod orig destructive to original variable     f/m mod orig macro dedup (slow) d     delete ✓   removes all matching elements from list   remove    same as &amp;lsquo;delete&amp;rsquo;   add-to-list ✓  ✓ push element to front   push ?</description>
    </item>
    
    <item>
      <title>TensorFlow BERT</title>
      <link>https://mullikine.github.io/posts/tensorflow-bert-keras/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/tensorflow-bert-keras/</guid>
      <description>Original article Hugging Face: State-of-the-Art Natural Language Processing in ten lines of TensorFlow 2.0  A list of transformer architectures    architecture     BERT   RoBERTa   GPT-2   DistilBERT    pip&amp;rsquo;s transformers library Builds on 3 main classes:  configuration class tokenizer class model class  configuration class Hosts relevant information concerning the model we will be using, such as:</description>
    </item>
    
    <item>
      <title>Deep TabNine and emacs</title>
      <link>https://mullikine.github.io/posts/emacs-deep-tab-nine/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-deep-tab-nine/</guid>
      <description>Deep TabNine can supplement your autocompletion needs by providing you with example code.
 plugin https://github.com/TommyX12/company-tabnine/  Objective Have two bindings; one for regular company complete and one for tabnine.
   kb f     M-` company-complete   M-Tab company-tabnine    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  (require &amp;#39;company-tabnine) ;; TODO Fix ;; While browsing the completions list, if I press &amp;lt;space&amp;gt; then company aborts.</description>
    </item>
    
    <item>
      <title>elisp advice</title>
      <link>https://mullikine.github.io/posts/emacs-lisp-advice/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-lisp-advice/</guid>
      <description>The only snippet you need # -*- mode: snippet -*- # name: around-advice # group: advice # key: ada # -- ;; nadvice - proc is the original function, passed in. do not modify (defun ${1:advised-function-name}-around-advice (proc &amp;amp;rest args) (message &amp;#34;$1 called with args %S&amp;#34; args) (let ((res (apply proc args))) (message &amp;#34;$1 returned %S&amp;#34; res) res)) (advice-add &amp;#39;$1 :around #&amp;#39;$1-around-advice) old advice This is the way it used to be done.</description>
    </item>
    
    <item>
      <title>Generating C with racket</title>
      <link>https://mullikine.github.io/posts/generating-c-with-racket/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/generating-c-with-racket/</guid>
      <description>related reading Practical macros in Racket // Bodacious Blog  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  #!/usr/local/racket/bin/racket #lang racket (require syntax/parse/define (for-syntax racket)) (define-syntax-parser Cstat ([_ ((~datum +) x ...)] #:with x* (string-join (map (lambda (x) (writeln x) (if (symbol?</description>
    </item>
    
    <item>
      <title>Haskell modes for emacs</title>
      <link>https://mullikine.github.io/posts/haskell-modes-for-emacs/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-modes-for-emacs/</guid>
      <description>This post is to help me keep track of all the garbage emacs modes floating around for Haskell.
Tooling is a huge deficiency with haskell, not just for emacs.
   mode pros cons     lsp-mode looks pretty keeps asking for project root. does not remember   flymake  leaves garbage files lying around in project directory   intero reliable, pretty type inference slow   haskell-mode reliable very basic; lacking    </description>
    </item>
    
    <item>
      <title>Haskell troubleshooting</title>
      <link>https://mullikine.github.io/posts/haskell-troubleshooting/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-troubleshooting/</guid>
      <description>Can&amp;rsquo;t find module which exists and is in the same directory  source code https://github.com/ThomasZumsteg/exercism-haskell/blob/master/say/say%5Ftest.hs  Asked on #haskell 1 2 3 4 5 6  16:19 &amp;lt; libertyprime&amp;gt; having trouble getting this to run https://asciinema.org/a/Z7G0B7ZmNtwjcnSSylEAWpUaI https://github.com/ThomasZumsteg/exercism-haskell/blob/master/say/say_test.hs 16:19 &amp;lt; libertyprime&amp;gt; not sure why 16:19 &amp;lt; libertyprime&amp;gt; the module is defined in say.hs in the same directory as say_test.hs 16:20 &amp;lt; Axman6&amp;gt; you probably want Say.hs 16:20 ::: Join to #haskell was synced in 378 secs 16:23 &amp;lt; libertyprime&amp;gt; thanks axman.</description>
    </item>
    
    <item>
      <title>LaTeX in emacs</title>
      <link>https://mullikine.github.io/posts/latex-in-emacs/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/latex-in-emacs/</guid>
      <description>Prereading Compounding Confoundment: arbitrary interpreters for Babel // Bodacious Blog
Setup Create the texalg2png script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #!/bin/bash export TTY read -r -d &amp;#39;&amp;#39; texcode &amp;lt;&amp;lt;HEREDOC \documentclass{standalone} \usepackage{varwidth} \usepackage{algorithm} %ctan.org\pkg\algorithms \usepackage{algpseudocode} \begin{document} \begin{varwidth}{\linewidth} \par\noindent \begin{algorithmic}[1] $(cat) \end{algorithmic} \end{varwidth} \end{document} HEREDOC printf -- &amp;#34;%s&amp;#34; &amp;#34;$texcode&amp;#34; | tex2png &amp;#34;$@&amp;#34;   Create the tex2png script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  #!</description>
    </item>
    
    <item>
      <title>Filtering text streams</title>
      <link>https://mullikine.github.io/posts/filter-regex-in-perlre/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/filter-regex-in-perlre/</guid>
      <description>The script awk-apply-to-record awk awk-apply-to-record.awk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  { # print NR if (r == &amp;#34;&amp;#34; || NR == r) { if (NR == 1) { printf &amp;#34;%s&amp;#34;, $0 |&amp;amp; cmd; } else { if (irs == &amp;#34;y&amp;#34;) { printf &amp;#34;%s&amp;#34;, RS printf &amp;#34;%s&amp;#34;, $0 |&amp;amp; cmd; } else { printf &amp;#34;%s%s&amp;#34;, RS, $0 |&amp;amp; cmd; } } close(cmd, &amp;#34;to&amp;#34;); # This is needed because getline will not overwrite if nothing is read $0 = &amp;#34;&amp;#34;; cmd |&amp;amp; getline $0; fflush(cmd); close(cmd); } else { if (NR &amp;gt; 1) { print RS } } print; system(&amp;#34;&amp;#34;); }   awk-apply-to-record 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  #!</description>
    </item>
    
    <item>
      <title>emacs for beginners - Editing MACroS</title>
      <link>https://mullikine.github.io/posts/emacs-keyboard-macros/</link>
      <pubDate>Sat, 26 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-keyboard-macros/</guid>
      <description>emacs becomes more powerful when you use it in the way it was designed to be used.
You should be using keyboard macros.
 keyboard macros vs lisp macros Keyboard macros and lisp macros are entirely different things.
The article you are reading is about using keyboard macros.
If you want to read about lisp macros then read my other article.
https://mullikine.github.io/posts/macro-tutorial/
  Using keyboard macros to speed up processes An example: Using magit-diff; before and after Before    kb f     q exit diff.</description>
    </item>
    
    <item>
      <title>(WIP) Database clustering tools and techniques</title>
      <link>https://mullikine.github.io/posts/database-clustering-methods/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/database-clustering-methods/</guid>
      <description>  Original article https://www.datanovia.com/en/blog/types-of-clustering-methods-overview-and-quick-start-r-code/  Contents  Types of clustering methods  Partitioning methods Hierarchical clustering Fuzzy clustering Density-based clustering Model-based clustering   Cluster analysis in R install.packages(&amp;#34;factoextra&amp;#34;) install.packages(&amp;#34;cluster&amp;#34;) install.packages(&amp;#34;magrittr&amp;#34;) Partitioning methods </description>
    </item>
    
    <item>
      <title>(WIP) Probabilistic programming with problog</title>
      <link>https://mullikine.github.io/posts/probabilistic-programming-with-problog/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/probabilistic-programming-with-problog/</guid>
      <description>Syntactic sugar Clauses can be constructed by virtue of overloading of Python operators:
   Prolog Python English     :- &amp;lt;&amp;lt; clause   , &amp;amp; and   ; &amp;vert; or   \+ ~ not    Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  stochastic memoization [#probabilistic programming] Remembering probabilistic events that have already occurred.</description>
    </item>
    
    <item>
      <title>emacs for scraping Google search results</title>
      <link>https://mullikine.github.io/posts/use-emacs-to-scrape-google-search-results/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/use-emacs-to-scrape-google-search-results/</guid>
      <description>I have had issues with using python libraries for scraping Google search results.
It appears that pip libraries keep going out of order.
Therefore, I switched to scraping with emacs.
I have developed a faith in the eww browser due to its reliability.
Create the elisp function which uses xurls to scrape URLs from text 1 2 3 4 5  (defun google-scrape-after-loaded () ;; (new-buffer-from-string (sh/ptw/uniqnosort (sh/ptw/xurls (format &amp;#34;%S&amp;#34; (buffer-string)))) &amp;#34;*google-results*&amp;#34;) (let ((results (sh/ptw/uniqnosort (sh/ptw/xurls (format &amp;#34;%S&amp;#34; (buffer-string)))))) (write-string-to-file results &amp;#34;/tmp/eww-scrape-output.</description>
    </item>
    
    <item>
      <title>Just a fun bit of math in my day</title>
      <link>https://mullikine.github.io/posts/fun-math/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/fun-math/</guid>
      <description>Useful mathematical symbols    symbol tex digraph how it reads      &amp;lt;:   is a subtype of    ⊧ \vDash &amp;lt;bar&amp;gt; = entails    ⊢ \vdash &amp;lt;bar&amp;gt; - infers    → \to -&amp;gt; is mapped to maps sets to sets   ↦ \mapsto &amp;lt;bar&amp;gt; &amp;gt; is mapped to maps elements to elements    Euler&amp;rsquo;s Characteristic The second most beautiful equation and its surprising applications - YouTube</description>
    </item>
    
    <item>
      <title>Playing with Kaggle, R and ESS</title>
      <link>https://mullikine.github.io/posts/kaggle-r-ess/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/kaggle-r-ess/</guid>
      <description>Build the script kag This is used for
 Downloading datasets to an organised directory structure Viewing CSV results in visidata by default Keeping track of history Caching results  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } slug=&amp;#34;$(echo &amp;#34;$3&amp;#34; | slugify)&amp;#34; dsname=&amp;#34;$(echo &amp;#34;$3&amp;#34; | sed &amp;#39;s=.</description>
    </item>
    
    <item>
      <title>Scripting Mathematica</title>
      <link>https://mullikine.github.io/posts/scripting-mathematica/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/scripting-mathematica/</guid>
      <description>Mathematica keyboard shortcuts https://reference.wolfram.com/language/tutorial/KeyboardShortcutListing.html
shell commands mmadoc Getting documentation with Mathematica code ?Integrate ?WolframAlpha#!/bin/bash export TTY funcname=&amp;#34;$1&amp;#34; mma &amp;#34;?$funcname&amp;#34; mma #!/bin/bash export TTY # Mathematica tf_script=&amp;#34;$(ux tf script wls || echo /dev/null)&amp;#34; trap &amp;#34;rm \&amp;#34;$tf_script\&amp;#34; 2&amp;gt;/dev/null&amp;#34; 0 cat &amp;gt; &amp;#34;$tf_script&amp;#34; &amp;lt;&amp;lt;HEREDOC Print[$@] HEREDOC wolframscript -file &amp;#34;$tf_script&amp;#34; &amp;#34;$@&amp;#34; Example mmadoc Integrate mmadoc WolframAlpha mma &amp;#34;WolframAlpha[\&amp;#34;size of the moon\&amp;#34;]&amp;#34; WolframAlpha[&amp;#34;size of the moon&amp;#34;] wa size of the moon mma &amp;#34;Integrate[5x,x]&amp;#34;Integrate[f, x] gives the indefinite integral ∫ f dx.</description>
    </item>
    
    <item>
      <title>Searching awesome lists for curated web browsing</title>
      <link>https://mullikine.github.io/posts/curated-surfing/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/curated-surfing/</guid>
      <description>Here I demonstrate searching through and reading lists of things from the command line.
I ran into some issues with the googlesearch pip module It seems to have been taken down from pip.
I changed my script to use emacs&amp;rsquo; eww browser to scrape the results instead eww is pretty reliable.
Demonstration Please be patient as I bypass the problem above.

Some search results from the demonstration above 1 2 3 4 5 6 7 8  http://linear.</description>
    </item>
    
    <item>
      <title>(WIP) Notes on &#34;The Illustrated GPT-2&#34;</title>
      <link>https://mullikine.github.io/posts/notes-on-illustrated-gpt2/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/notes-on-illustrated-gpt2/</guid>
      <description>Original article The Illustrated GPT-2 (Visualizing Transformer Language Models) Jay Alammar Visualizing machine learning one concept at a time  Prereading Overview of The Illustrated Transformer // Bodacious Blog
Goal Supplement The Illustrated Transformer with more visuals explaining the inner-workings of transformers, and how they’ve evolved since the original paper.
Contents Part 1: GPT2 And Language Modeling What is a Language Model Transformers for Language Modeling One Difference From BERT The Evolution of The Transformer Block Crash Course in Brain Surgery: Looking Inside GPT-2 A Deeper Look Inside End of part #1: The GPT-2, Ladies and Gentlemen Part 2: The Illustrated Self-Attention Self-Attention (without masking) 1- Create Query, Key, and Value Vectors 2- Score 3- Sum The Illustrated Masked Self-Attention GPT-2 Masked Self-Attention Beyond Language modeling You’ve Made it!</description>
    </item>
    
    <item>
      <title>Custom Org Links</title>
      <link>https://mullikine.github.io/posts/custom-org-links/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/custom-org-links/</guid>
      <description>org links are useful for making your org-mode documents more terse.
1 2 3 4  $EMACSD/config/org/org-google.el $EMACSD/config/org/org-man.el $EMACSD/config/org/org-rifle.el $EMACSD/config/org/org-youtube.el   org-google.el, for instance will allow you to write google searches into your org mode.
org-google Example You can then type C-c C-o on the link to run the google search.
1  [[google:emacs plugins]]   This is how it appears in org-mode.
google:emacs plugins
org-google.el source 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  ;;; org-man.</description>
    </item>
    
    <item>
      <title>Extending Babel</title>
      <link>https://mullikine.github.io/posts/extending-babel/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-babel/</guid>
      <description>previous article Compounding Confoundment: arbitrary interpreters for Babel // Bodacious Blog  Automate the process of changing the babel block wrapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  (defun org-babel-raise () &amp;#34;Move the interior of a babel to the outside: remove the babel block chrome and keep only the source code.</description>
    </item>
    
    <item>
      <title>Notes on &#34;Generating Beatles’ Lyrics with Machine Learning&#34;</title>
      <link>https://mullikine.github.io/posts/notes-on-generating-beatles-lyrics-with-machine-learning/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/notes-on-generating-beatles-lyrics-with-machine-learning/</guid>
      <description>Original article Generating Beatles Lyrics with Machine Learning - Towards Data Science  Apparatus     URL      code https://github.com/EugenHotaj/beatles    dataset http://toti.eu.com/beatles/index.asp github.com/EugenHotaj/beatles/blob/master/scraper.py   embeddings     algorithm      Hypothesis Aim Questions  How might might generate sentences from a language model?  Method Factoids Unigram model Ignores any conditioning and simply chooses the next word randomly from the training data.</description>
    </item>
    
    <item>
      <title>Notes on &#34;Identifying the right meaning of the words using BERT&#34;</title>
      <link>https://mullikine.github.io/posts/notes-on-identifying-the-right-meaning-of-the-words-using-bert/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/notes-on-identifying-the-right-meaning-of-the-words-using-bert/</guid>
      <description>Original article Identifying the right meaning of the words using BERT  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  Uncased [model] The text has been lowercased before WordPiece tokenization, e.g., John Smith becomes john smith. The Uncased model also strips out any accent markers. Cased [model] The true case and accent markers are preserved.</description>
    </item>
    
    <item>
      <title>Notes on &#34;Math4IQB Hopfield Networks&#34;</title>
      <link>https://mullikine.github.io/posts/notes-on-math4iqb-hopfield-networks/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/notes-on-math4iqb-hopfield-networks/</guid>
      <description>Original video https://www.youtube.com/watch?v=gfPUWwBkXZY  Glossary information gain [data mining] The amount of information that&amp;#39;s gained by knowing the value of the attribute, which is the entropy of the distribution before the split minus the entropy of the distribution after it. The largest information gain is equivalent to the smallest entropy. vim +/&amp;#34;mutual information&amp;#34; &amp;#34;$NOTES/ws/glossaries/information-theory.txt&amp;#34; information gain ratio [#decision tree learning] Ratio of information gain to the intrinsic information. It was proposed by Ross Quinlan, to reduce a bias towards multi-valued attributes by taking the number and size of branches into account when choosing an attribute.</description>
    </item>
    
    <item>
      <title>Random emacs tips</title>
      <link>https://mullikine.github.io/posts/emacs-tips/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-tips/</guid>
      <description>Just a glimpse into the kinds of things I am recording in my notes.
Help key &amp;ndash; interpretted by emacs, not tmux This is because you would have to modify both terminfo and tmux c source to get the help key this way.
It was simply easier to intercept the raw ansi in emacs and translate it.
(define-key key-translation-map (kbd &amp;#34;C-M-]&amp;#34;) (kbd &amp;#34;&amp;lt;help&amp;gt;&amp;#34;))    kb tr     &amp;lt;C-M-]&amp;gt; &amp;lt;help&amp;gt;    Multiple actions as single undo entry https://www.</description>
    </item>
    
    <item>
      <title>(WIP) Notes on &#34;Natural Language Processing by Jacob Eisenstein&#34;</title>
      <link>https://mullikine.github.io/posts/notes-on-eisenstein-nlp/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/notes-on-eisenstein-nlp/</guid>
      <description>Reading vs +/&amp;#34;Kneser-Ney&amp;#34; $NOTES/ws/nlp-natural-language-processing/reading/eisenstein-nlp-notes.txt Kneser-Ney smoothing Based on absolute discounting, but it redistributes the resulting probability mass in a different way from Katz backoff.
Empirical evidence points to Kneser-Ney smoothing as the state-of-art for n-gram LMing.</description>
    </item>
    
    <item>
      <title>Meta &amp; Inception</title>
      <link>https://mullikine.github.io/posts/meta-inception/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/meta-inception/</guid>
      <description>This is a blog article about writing a blog article about recording myself recording myself playing tetris inside emacs inside tmux inside neovim inside spacemacs, inside the 5 nested tmux sessions seen at the bottom of the screen.
DONE tetris inside of emacs 1  etetris-vt100   DONE tetris inside of neovim terminal inside of tmux 1  nvt etetris-vt100   DONE tetris inside of neovim terminal inside of tmux inside of spacemacs 1  sp -sh nvt etetris-vt100   DONE asciinema recording of an asciinema recording of tetris inside of neovim terminal inside of tmux inside of spacemacs Meta inception</description>
    </item>
    
    <item>
      <title>The Rise of the Machines - Brandan McCane</title>
      <link>https://mullikine.github.io/posts/brendan-mccain-ipl/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/brendan-mccain-ipl/</guid>
      <description>Inaugural Professorial Lecture - Professor Brendan McCane https://www.otago.ac.nz/news/events/otago719400.html
Brendan achieved the rank of professor.
Glossary IPL Inaugural Professorial Lecture Summary Brendan&amp;rsquo;s research is on the boundary between ML and computer vision.
That is, how to get a computer to learn what is in an image based on example images.
Some of his early work in this area included face detection and face recognition algorithms – similar to the algorithms that now run on all smart phones and social media platforms.</description>
    </item>
    
    <item>
      <title>Muddled Monoliths: consolidating key bindings with handle.el</title>
      <link>https://mullikine.github.io/posts/setting-up-handle-mode/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-handle-mode/</guid>
      <description>The problem I have a few makeshift, monolithic functions for consolidating documentation and code navigation commands under a single function.
They have become unwieldly as they grow to accommodate more languages and modes.
Example of an unwieldly function (defun my/doc-thing-at-point (arg &amp;amp;optional immediate winfunc) &amp;#34;Show doc for thing under pointl. winfunc = &amp;#39;spv or &amp;#39;sph elisp function&amp;#34; (interactive &amp;#34;P&amp;#34;) (if (not winfunc) (setq winfunc &amp;#39;sph)) (cond ((string-equal (preceding-sexp-or-element) &amp;#34;#lang&amp;#34;) (progn ;; (racket--repl-command &amp;#34;doc %s&amp;#34; (concat &amp;#34;H:&amp;#34; (str (sexp-at-point)))) (str (racket--cmd/async `(doc ,(concat &amp;#34;H:&amp;#34; (str (sexp-at-point)))))) (sleep 1) (let ((url (cl/xc nil :notify t))) (if immediate (if (string-match-p &amp;#34;racket/search/index.</description>
    </item>
    
    <item>
      <title>Setting up Rust</title>
      <link>https://mullikine.github.io/posts/overview-of-rust/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/overview-of-rust/</guid>
      <description>Glossary racer Rust Code Completion utility http://siciarz.net/24-days-of-rust-racer/ flamegraph The proportion of a program’s runtime that occurs in a routine is proportional to the width of the bar for that routine. https://ngoldbaum.github.io/posts/python-vs-rust-nn/ Language references Syntax https://cheats.rs/
Rosetta: rust vs swift vs scala http://hyperpolyglot.org/rust
Installation curl https://sh.rustup.rs -sSf | sh Reading Rust by example Introduction - Rust By Example
A little bit of functional programming https://hoverbear.org/2015/05/02/a-journey-into-iterators/
std::mem::drop https://blog.jabid.in/2019/10/11/drop.html
An simple example project Why I Ripped The Same CD 300 Times</description>
    </item>
    
    <item>
      <title>Scalable Python and bottlenecks</title>
      <link>https://mullikine.github.io/posts/scalable-python-and-bottlenecks/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/scalable-python-and-bottlenecks/</guid>
      <description>Original article https://instagram-engineering.com/python-at-scale-strict-modules-c0bb9245c834     term description see     import-time when imports are executed     Sources of slowness import re from mywebframework import db, route VALID_NAME_RE = re.compile(&amp;#34;^[a-zA-Z0-9]+$&amp;#34;) @route(&amp;#39;/&amp;#39;) def home(): return &amp;#34;Hello World!&amp;#34; class Person(db.Model): name: str  top level scope defines &amp;ndash; regex compilation decorator with unknown behaviour class definition: runs code contained within base class may have a meta-class or __init_subclass__ method.</description>
    </item>
    
    <item>
      <title>Compounding Confoundment: arbitrary interpreters for Babel</title>
      <link>https://mullikine.github.io/posts/arbitrary-interpreters-for-babel/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/arbitrary-interpreters-for-babel/</guid>
      <description>Genesis 11:7 “&amp;hellip;Come, let us go down and confuse their language so they will not understand each other.” If supporting many languages in Babel was not confounding enough, lets support arbitrary interpreters too!  The need to specify a custom interpreter arose when I needed to provide my own interpreter for generating an ASCII graph from a dot script.
Objective Specify an :interpreter and/or :filter command to override the execute behaviour.</description>
    </item>
    
    <item>
      <title>Haskell development 20.10.19</title>
      <link>https://mullikine.github.io/posts/haskell-development/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-development/</guid>
      <description>Original file $NOTES/ws/playgrounds/haskell/remember.org  This works now 1 2  echo :t 5 | ghciol ghciol :t 4   5 :: Num p =&amp;gt; p 4 :: Num p =&amp;gt; p ghci 1 2 3 4 5 6  Just &amp;#34;Haha&amp;#34; Just 84 :t Just &amp;#34;Haha&amp;#34; :t Just 84 :t Nothing Just 10 :: Maybe Double   Why is it that if something is a monad, you can use do notation with it?</description>
    </item>
    
    <item>
      <title>Using sqlite with postgres table browsing pager in emacs</title>
      <link>https://mullikine.github.io/posts/sqlite-output-in-postgres-viewer-in-emacs/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/sqlite-output-in-postgres-viewer-in-emacs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Illustrated Transformer</title>
      <link>https://mullikine.github.io/posts/review-of-the-illustrated-transformer/</link>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-the-illustrated-transformer/</guid>
      <description>Original article https://jalammar.github.io/illustrated-transformer/ Source https://github.com/tensorflow/tensor2tensor  Prereading https://jalammar.github.io/illustrated-word2vec/
Helpful glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  Multilayer perceptron Feed-Forward Neural Network FFNN Basically, these are multi-level logistic regression classifiers.</description>
    </item>
    
    <item>
      <title>Alternative preludes for Haskell</title>
      <link>https://mullikine.github.io/posts/alternative-preludes-for-haskell/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/alternative-preludes-for-haskell/</guid>
      <description>Related reading https://guide.aelve.com/haskell/alternative-preludes-zr69k1hc  Glossary Lazy IO haskell
Foundation Provide a better and more efficient prelude than base&amp;rsquo;s prelude.
https://hackage.haskell.org/package/foundation
be self-sufficient: no external dependencies apart from base.
provide better data-types: packed unicode string by default, arrays.
Better numerical classes that better represent mathematical thing (No more all-in-one Num).
Better I/O system with less Lazy IO
Usual partial functions distinguished through type system
Lazy IO https://stackoverflow.com/questions/5892653/whats-so-bad-about-lazy-i-o
Lazy IO has the problem that releasing whatever resource you have acquired is somewhat unpredictable, as it depends on how your program consumes the data &amp;ndash; its &amp;ldquo;demand pattern&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Decentralised workforce; the human cloud</title>
      <link>https://mullikine.github.io/posts/decentralised-workforce-human-cloud/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/decentralised-workforce-human-cloud/</guid>
      <description>Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  asynchronous communication https://doist.com/blog/asynchronous-communication/ When you send a message without expecting an immediate response. For example, you send an email. I open and respond to the email several hours later. synchronous communication https://doist.com/blog/asynchronous-communication/ When you send a message and the recipient processes the information and responds immediately.</description>
    </item>
    
    <item>
      <title>gwern.net GPT-2</title>
      <link>https://mullikine.github.io/posts/review-of-gewn-gpt2/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-gewn-gpt2/</guid>
      <description>original article https://www.gwern.net/GPT-2  Read using eww The website when viewed with a GUI browser, although impressive, is distracting.
The website was built with hackyll, a static site generator employing haskell.
1  eww &amp;#34;https://www.gwern.net/GPT-2&amp;#34;   Ease of reading Straight-forward once you understand ML jargon.</description>
    </item>
    
    <item>
      <title>Keyword extraction to analyse articles</title>
      <link>https://mullikine.github.io/posts/keyword-extraction/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/keyword-extraction/</guid>
      <description>sparsity [#text mining] Huge matrices are created based on word frequencies with many cells having zero values. This problem is called sparsity and is minimized using various techniques. Articles keyword extraction: nltk, sklearn Automated Keyword Extraction from Articles using NLP
kag datasets download benhamner/nips-papers textrank: numpy, spacy towardsdatascience.com/textrank-for-keyword-extraction-by-python-c0bae21bcec0
ngram, modified skip-gram, spacy Keywords Extraction with Ngram and Modified Skip-gram based on spaCy
TODO Turn the math4IQB lectures into keywords readsubs &amp;#34;https://www.</description>
    </item>
    
    <item>
      <title>Music playlists in emacs lisp</title>
      <link>https://mullikine.github.io/posts/music-playlists-in-emacs-lisp/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/music-playlists-in-emacs-lisp/</guid>
      <description>Build the emacs-script command emacs-script is a script to treat emacs lisp as a normal scripting language for the command line.
It loads some basic functionality so we can use emacs lisp for scripting.
Yes, it downloads from youtube and caches the videos.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83  #!</description>
    </item>
    
    <item>
      <title>Rewrite of gwern.net GPT-2 Neural Network Poetry</title>
      <link>https://mullikine.github.io/posts/rewrite-of-gwern-gpt2-poetry/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/rewrite-of-gwern-gpt2-poetry/</guid>
      <description>original article https://www.gwern.net/GPT-2  Read using eww The website when viewed with a GUI browser, although impressive, is distracting.
The website was built with hackyll, a static site generator employing haskell.
1  eww &amp;#34;https://www.gwern.net/GPT-2&amp;#34;   Ease of reading Straight-forward once you understand ML jargon.</description>
    </item>
    
    <item>
      <title>The Semantic Web and Ontology</title>
      <link>https://mullikine.github.io/posts/semantic-web-and-ontology/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/semantic-web-and-ontology/</guid>
      <description>Glossary semantic web A proposed development of the World Wide Web in which data in web pages is structured and tagged in such a way that it can be read directly by computers. &amp;#34;the Semantic Web could usher in a golden age of information access&amp;#34; ontology [#metaphysics] [noun] A set of concepts and categories in a subject area or domain that shows their properties and the relations between them. &amp;#34;what&amp;#39;s new about our ontology is that it is created automatically from large datasets&amp;#34; [#metaphysics] [field of study] The study of things, how they relate to other things, and what those things are called.</description>
    </item>
    
    <item>
      <title>(WIP) Review of NLP tools</title>
      <link>https://mullikine.github.io/posts/review-of-nlp-tools/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-nlp-tools/</guid>
      <description>lm-explorer Interactive explorer for language models (currently only OpenAI GPT-2).</description>
    </item>
    
    <item>
      <title>writeup.ai</title>
      <link>https://mullikine.github.io/posts/review-of-writeup-ai/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-writeup-ai/</guid>
      <description>Original article https://senrigan.io/blog/how-writeupai-runs-behind-the-scenes/#h%5F6068056784021570782144062  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  cross entropy loss (between two probability distributions) (and over the same underlying set of events) Higher loss is bad. Measures the performance of a classification model whose output is a probability value between 0 and 1. Measures the average number of bits needed to identify an event from the set.</description>
    </item>
    
    <item>
      <title>Overview of modern Continuous Integration tools</title>
      <link>https://mullikine.github.io/posts/review-of-continuous-integration-tools/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-continuous-integration-tools/</guid>
      <description>Circle CI Trust your CI/CD pipeline. Push code with confidence.
Automate your development process quickly, safely, and at scale.
Codeship Check in your code. Let us handle the rest. We provide a simple, turn-key SaaS CI/CD platform that is fast and flexible so that you can hit the ground running and build stuff that matters.
Runs the tests and deploys.
It replaces Circle CI.
Travis Easily sync your GitHub projects with Travis CI and you’ll be testing your code in minutes!</description>
    </item>
    
    <item>
      <title>Setting up .NET for XUnit</title>
      <link>https://mullikine.github.io/posts/dot-net/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dot-net/</guid>
      <description>I recently have been applying for jobs and so I decided to set up a modern .NET environment on Ubuntu with emacs and look into a unit testing suite called XUnit.
Setup Emacs omnisharp package installation 1  (package-install &amp;#39;omnisharp)   c# configuration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  (progn ;; c sharp ;; (add-hook &amp;#39;csharp-mode-hook &amp;#39;omnisharp-mode) ;; (add-hook &amp;#39;csharp-mode-hook #&amp;#39;company-mode) ;; (add-hook &amp;#39;csharp-mode-hook #&amp;#39;flycheck-mode) (eval-after-load &amp;#39;company &amp;#39;(add-to-list &amp;#39;company-backends &amp;#39;company-omnisharp)) (defun my-csharp-mode-setup () (omnisharp-mode) (company-mode) (flycheck-mode) (setq indent-tabs-mode nil) (setq c-syntactic-indentation t) (c-set-style &amp;#34;ellemtel&amp;#34;) (setq c-basic-offset 4) (setq truncate-lines t) (setq tab-width 4) (setq evil-shift-width 4) ;csharp-mode README.</description>
    </item>
    
    <item>
      <title>Software Design Principles – Scalability</title>
      <link>https://mullikine.github.io/posts/software-design-principles/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/software-design-principles/</guid>
      <description>Types of scalability https://elastisys.com/2015/09/10/scalability-design-principles/
Performance Parallelism and asynchronism is good.
Amdahl’s Law Performance does not scale perfectly linearly.
Some problems are simply better suited for tackling with a parallel approach.
Speedup of a program using multiple processors in parallel computing is limited by the sequential fraction of the program.
A limit to how much benefit we can get from increasing capacity.
Intended for parallel computing, not distributed systems.
Conclusion Try use components designed with parallelism and asynchronism in mind.</description>
    </item>
    
    <item>
      <title>Blogs and Vlogs</title>
      <link>https://mullikine.github.io/posts/blogs-and-vlogs/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/blogs-and-vlogs/</guid>
      <description>These are some of my favourite learning resources.
   source type url Topics     Math4IQB vlog https://www.youtube.com/user/Math4IQB/videos Information Theory   Gwern Bransen blog https://www.gwern.net/GPT-2 Haskell, NLP, R   Fabian Dablander blog https://fabiandablander.com Math, statistics, latex   John D. Cook blog https://www.johndcook.com/blog/ Math, statistics   Sacha Chua blog https://sachachua.com/blog/0000/00/05/ New emacs packages   Cameron Kerr blog http://humbledown.org https://distracted-it.blogspot.com Telecommunications   Brendan Gregg blog http://www.</description>
    </item>
    
    <item>
      <title>Coherence in Natural Language (2006)</title>
      <link>https://mullikine.github.io/posts/review-coherence-in-natural-language/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-coherence-in-natural-language/</guid>
      <description>Terminological mess The term cohesion does not figure in the index of the book.
Coherence vs cohesion &amp;ldquo;cohesion&amp;rdquo; for microstructures and &amp;ldquo;coherence&amp;rdquo; for macrostructures.
cohesion when talking about text and coherence when talking about discourse i.e. &amp;ldquo;semantics vs. pragmatics&amp;rdquo;
Issues covered in the book in the realm of coherence structures:
 cognitive science natural language engineering information extraction  Definitions Coherence structures ommitted: a chrestomathy of coherent vs incoherent text Reviews Coherence in natural language.</description>
    </item>
    
    <item>
      <title>(WIP) Applying Multinomial Naive Bayes to NLP Problems: A Practical Explanation</title>
      <link>https://mullikine.github.io/posts/review-multinomial-naive-bayes-nlp/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-multinomial-naive-bayes-nlp/</guid>
      <description>Applying Multinomial Naive Bayes to NLP Problems: A Practical Explanation</description>
    </item>
    
    <item>
      <title>Misc LYAH notes</title>
      <link>https://mullikine.github.io/posts/haskell-lyah/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-lyah/</guid>
      <description>Related articles Haskell functions // Bodacious Blog  emacs Run haskell programs: babel + runhaskell 1 2 3 4 5 6 7 8 9  #+BEGIN_SRC haskell-n :sph nvc -pak rh :async :results none  main = do putStrLn &amp;#34;What is your name?&amp;#34; name &amp;lt;- getLine putStrLn $ name ++ &amp;#34;! This is a very nice name.&amp;#34; putStrLn &amp;#34;Where do you live?&amp;#34; city &amp;lt;- getLine putStrLn $ &amp;#34;Hey, I Love &amp;#34; ++ city ++ &amp;#34;!</description>
    </item>
    
    <item>
      <title>Searching hacker news</title>
      <link>https://mullikine.github.io/posts/searching-hacker-news/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/searching-hacker-news/</guid>
      <description>I create a script which can be used to search hacker news (or other sites) conveniently with title and contents queries.
1 2 3 4 5 6 7  eww &amp;#34;http://news.ycombinator.com&amp;#34; # How to search hacker news egr emacs site:news.ycombinator.com intitle:&amp;#34;email client&amp;#34; # terms -- title terms hn emacs -- email   Create the script hn 1 2 3 4 5 6  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null SITE=news.</description>
    </item>
    
    <item>
      <title>(WIP) Extending WordNut for generating blog titles</title>
      <link>https://mullikine.github.io/posts/extending-wordnut-for-generating-blog-titles/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-wordnut-for-generating-blog-titles/</guid>
      <description> Obtain an org-mode parser https://orgmode.org/worg/org-tools/index.html
Parse wordnut output to scrape synonyms from the buffer Given 2 words, create a list of synonyms for each Look for one word from each list with the same starting letter </description>
    </item>
    
    <item>
      <title>(WIP) How to play Dwarf Fortress (in fortress mode)</title>
      <link>https://mullikine.github.io/posts/dwarf-fortress/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dwarf-fortress/</guid>
      <description>Helpful links    name url     walkthrough https://df-walkthrough.readthedocs.io/en/latest/   legend http://dwarffortresswiki.org/index.php/DF2014:Map%5Flegend    Navigating left hand should sit on keys 1 to 4. right hand should sit on keys 6 to 9.
pinkies navigate bottom left to top right. middle fingers navigate top left to bottom right
I wanted to look for some symbols 1  unicode arrow | sed -e &amp;#39;/^[a-zA-Z]/d&amp;#39; -e &amp;#39;/^$/d&amp;#39; | tr &amp;#39;\n&amp;#39; &amp;#39; &amp;#39; | wrap 90 | sed &amp;#39;1,2d&amp;#39; | sed &amp;#39;8q&amp;#39;   1 2 3 4 5 6 7 8  ↻ ⇄ ⇅ ⇆ ⇇ ⇈ ⇉ ⇊ ⇍ ⇎ ⇏ ⇐ ⇑ ⇒ ⇓ ⇔ ⇕ ⇖ ⇗ ⇘ ⇙ ⇚ ⇛ ⇜ ⇝ ⇞ ⇟ ⇠ ⇡ ⇢ ⇣ ⇤ ⇥ ⇦ ⇧ ⇨ ⇩ ⇪ ⇫ ⇬ ⇭ ⇮ ⇯ ⇰ ⇱ ⇲ ⇳ ⇴ ⇵ ⇶ ⇷ ⇸ ⇹ ⇺ ⇻ ⇼ ⇽ ⇾ ⇿ ⌁ ⌃ ⌄ ⌤ ⍇ ⍈ ⍐ ⍗ ⍼ ⎋ ➔ ➘ ➙ ➚ ➛ ➜ ➝ ➞ ➟ ➠ ➡ ➢ ➣ ➤ ➥ ➦ ➧ ➨ ➩ ➪ ➫ ➬ ➭ ➮ ➯ ➱ ➲ ➳ ➴ ➵ ➶ ➷ ➸ ➹ ➺ ➻ ➼ ➽ ➾ ⟰ ⟱ ⟲ ⟳ ⟴ ⟵ ⟶ ⟷ ⟸ ⟹ ⟺ ⟻ ⟼ ⟽ ⟾ ⟿ ⤀ ⤁ ⤂ ⤃ ⤄ ⤅ ⤆ ⤇ ⤈ ⤉ ⤊ ⤋ ⤌ ⤍ ⤎ ⤏ ⤐ ⤑ ⤒ ⤓ ⤔ ⤕ ⤖ ⤗ ⤘ ⤙ ⤚ ⤛ ⤜ ⤝ ⤞ ⤟ ⤠ ⤡ ⤢ ⤣ ⤤ ⤥ ⤦ ⤧ ⤨ ⤩ ⤪ ⤭ ⤮ ⤯ ⤰ ⤱ ⤲ ⤳ ⤴ ⤵ ⤶ ⤷ ⤸ ⤹ ⤺ ⤻ ⤼ ⤽ ⤾ ⤿ ⥀ ⥁ ⥂ ⥃ ⥄ ⥅ ⥆ ⥇ ⥈ ⥉ ⥰ ⥱ ⥲ ⥳ ⥴ ⥵ ⥶ ⥷ ⥸ ⥹ ⥺ ⥻ ⦨ ⦩ ⦪ ⦫ ⦬ ⦭ ⦮ ⦯ ⦳ ⦴ ⦽ ⧪ ⧬ ⧭ ⨗ ⬀ ⬁ ⬂ ⬃ ⬄ ⬅ ⬆ ⬇ ⬈ ⬉ ⬊ ⬋ ⬌ ⬍ ⬎ ⬏ ⬐ ⬑ ⬰ ⬱ ⬲ ⬳ ⬴ ⬵ ⬶ ⬷ ⬸ ⬹ ⬺ ⬻ ⬼ ⬽ ⬾ ⬿ ⭀ ⭁ ⭂ ⭃ ⭄ ⭅ ⭆ ⭇ ⭈ ⭉ ⭊ ⭋ ⭌ ⭍ ⭎ ⭏ ⭚ ⭛ ⭜ ⭝ ⭞ ⭟ ⭠ ⭡ ⭢ ⭣ ⭤ ⭥ ⭦ ⭧ ⭨ ⭩ ⭪ ⭫ ⭬ ⭭ ⭮ ⭯ ⭰ ⭱ ⭲ ⭳ ⭶ ⭷ ⭸ ⭹ ⭺ ⭻ ⭼ ⭽ ⮀ ⮁ ⮂ ⮃ ⮄ ⮅ ⮆ ⮇ ⮈ ⮉ ⮊ ⮋ ⮌ ⮍ ⮎ ⮏ ⮔ ⮕ ⮘ ⮙ ⮚ ⮛ ⮜ ⮝ ⮞ ⮟ ⮠ ⮡ ⮢ ⮣ ⮤ ⮥ ⮦ ⮧ ⮨ ⮩ ⮪ ⮫ ⮬ ⮭ ⮮ ⮯ ⮰ ⮱ ⮲ ⮳ ⮴ ⮵ ⮶ ⮷ ⮸ ⮹ ⯬      finger hand motion dimension     ring left ↓ ↕   ring right ↑ ↕   index left ← ↔   index right → ↔   middle left ↘ ⤡   middle right ↖ ⤡   pinkie left ↙ ⤢   pinkie right ↗ ⤢    I must say, these feel very unintuitive; perhaps as vim did when I first learned those.</description>
    </item>
    
    <item>
      <title>(WIP) Review of Language, trees, and geometry in neural networks</title>
      <link>https://mullikine.github.io/posts/language-trees-and-geometry-in-neural-networks/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/language-trees-and-geometry-in-neural-networks/</guid>
      <description>1906.02715 Visualizing and Measuring the Geometry of BERT
https://pair-code.github.io/interpretability/bert-tree/
https://pair-code.github.io/interpretability/context-atlas/blogpost/
Existing representation: word embeddings Language is made of discrete structures, yet neural networks operate on continuous data: vectors in high-dimensional space.
A successful language-processing network must translate this symbolic information into some kind of geometric representation—but in what form?
Word embeddings provide two well-known examples: distance encodes semantic similarity, while certain directions correspond to polarities (e.g. male vs. female).</description>
    </item>
    
    <item>
      <title>Sensible Splits: Extending shackle.el</title>
      <link>https://mullikine.github.io/posts/making-shackle-split-sensibly/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/making-shackle-split-sensibly/</guid>
      <description>shackle.el provides a single interface for managing the way windows are displayed in emacs. This means you don&amp;rsquo;t have to dig into plugin code to provide ad-hoc advice to specific functions.
Unfortunately, it doesn&amp;rsquo;t provide an option to split sensibly, allowing you only to specify exactly how you want windows to be displayed.
For example, it will allow to you specify that all help buffers split to the right with the following rule.</description>
    </item>
    
    <item>
      <title>Taming term-mode</title>
      <link>https://mullikine.github.io/posts/taming-term/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/taming-term/</guid>
      <description>libertyprime to #emacs i found myself recording an asciinema recording of me making an asciinema recording of me playing tetris inside of tmux inside of neovim inside of emacs inside of an emacs term inside of 4 nested tmuxes. it became hard to actually think about  First attempt You can skip this and scroll down to the solution or read it to see some of the problems I was having with term.</description>
    </item>
    
    <item>
      <title>awk-ward mode for emacs</title>
      <link>https://mullikine.github.io/posts/awk-ward/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/awk-ward/</guid>
      <description>https://gitlab.com/kisaragi-hiu/awk-ward.el
This is a neat plugin that lets you edit awk scripts with real time feedback, displaying both the output and any errors.
Update awk-ward to enable updates on any buffer modification The problem as it has been designed to updates only when you are typing text in to the program.
Patch Use post-command-hook instead of post-self-insert-hook (07a56482) Commits Shane Mulligan / awk-ward.el GitLab
Demonstration of awk-ward with the patch working</description>
    </item>
    
    <item>
      <title>Review of CI tools for emacs</title>
      <link>https://mullikine.github.io/posts/continuous-integration-emacs/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/continuous-integration-emacs/</guid>
      <description> Emacs plugins  plugin list  magit-circleci magit-gh-pulls magit-gitflow jenkins jenkins-watch travis org-link-travis magit-circleci   Demonstration of jenkins.el for emacs 
TODO Review these jenkins plugins  plugin list  folders OWASP markup formatter build timeout crenditials binding timestamper workspace cleanup ant gradle pipeline github branch source pipeline: github groovy libraries pipeline: stage view git subversion ssh slaves matrix authorization strategy PAM authentication LDAP Email extension mailer   </description>
    </item>
    
    <item>
      <title>Extending magit with more convenient worktrees</title>
      <link>https://mullikine.github.io/posts/extending-magit/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-magit/</guid>
      <description>What is magit? It&amp;rsquo;s a really awesome git porcelain.
Using git worktree with magit to browse different versions of a repository https://magit.vc/manual/magit/Worktree.html
http://webcache.googleusercontent.com/search?q=cache:https://medium.com/@gaurav5430/git-using-git-worktree-to-run-2-versions-of-the-code-at-the-same-time-1b4586315a6c
Basic git worktree bindings This is because git manages the set of worktrees.
Magit makes use of this 1  % g (magit-worktree-status)   1  j magit-list-worktrees   1  find-function magit-list-worktrees    Example
1 2  cd &amp;#34;$MYGIT/kisaragi-hiu/awk-ward.el&amp;#34;; git worktree list --porcelain    This is where the info is stored:</description>
    </item>
    
    <item>
      <title>emacs: demystifying emacs buttons</title>
      <link>https://mullikine.github.io/posts/emacs-get-function-for-button/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-get-function-for-button/</guid>
      <description>Buttons in emacs are a little bit of a black box.
This makes it difficult wish to extend or modify a mode that uses buttons: yasnippet, for example.
Here is how to find out what the button does before you click on it.
Get the function This is all you need for most cases.
(defun get-button-action () &amp;#34;Get the action of the button at point&amp;#34; (interactive) (let ((b (button-at (point)))) (if b (button-get b &amp;#39;action)))) Special case: help-mode and yasnippet Applying (get-button-action) in yasnippet very unhelpfully provides this help-button-action.</description>
    </item>
    
    <item>
      <title>Tremendous Task: Searching for code on GitHub with BigQuery and GHTorrent</title>
      <link>https://mullikine.github.io/posts/github-search-with-bigquery/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/github-search-with-bigquery/</guid>
      <description>Searching GitHub for regular expression matches in code is a tremendous task.
Prerequisites Set up the bq command https://cloud.google.com/bigquery/docs/bq-command-line-tool
Lots of money Sample search About US$5 per search.
This is cheaper than searching all files.
   shell variable function     $query a regular expression that searches the contents of files   $path_re a regex that matches on the file path   $path_re_exclude a regex that matches on the file path for pruning results    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #standardSQL SELECT sample_repo_name, sample_path, (SELECT STRING_AGG(snip) FROM snippets.</description>
    </item>
    
    <item>
      <title>Conveniently learn emacs bindings</title>
      <link>https://mullikine.github.io/posts/conveniently-learn-emacs-bindings/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/conveniently-learn-emacs-bindings/</guid>
      <description>Here&amp;rsquo;s the coolest thing I&amp;rsquo;ve made in the last few days.
This will allow you to fuzzy find maps and pretty print them.
 It&amp;rsquo;s useful for 2 reasons:  there are many modes which interfere with C-h k when you want to learn some bindings for a mode you are not in   Code (require &amp;#39;s) (defun my-new-buffer-frame (&amp;amp;optional contents bufname) &amp;#34;Create a new frame with a new empty buffer.</description>
    </item>
    
    <item>
      <title>Scrape URLs from eww region selection</title>
      <link>https://mullikine.github.io/posts/scrape-urls-from-eww-region-selection/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/scrape-urls-from-eww-region-selection/</guid>
      <description>The idea is you select a region of text on the screen and the text properties will be searched for URLs.
A new buffer is created with all the list of URLs in the region you selected.
This works on any emacs mode.
This also works with w3m for emacs.
If a browser is used through ansi-term or the like then emacs most likely wont be able to scrape these URLs from the text properties.</description>
    </item>
    
    <item>
      <title>PClean: A probabilistic scripting DSL</title>
      <link>https://mullikine.github.io/posts/pclean-gen-gpl/</link>
      <pubDate>Mon, 30 Sep 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/pclean-gen-gpl/</guid>
      <description>Links  MIT Probabilistic Computing Project Introduction | Gen GitHub - probcomp/Gen: A general-purpose probabilistic programming system with programmable inference  Other talks by MIT Probabilistic Computing Project: Videos, Talks, and Podcasts - MIT Probabilistic Computing Project
Tools Gen  a package for the Julia programming language. consists of multiple modeling languages that are implemented as DSLs in Julia and a Julia library for inference programming.  PClean  A probabilistic scripting DSL in the Gen package.</description>
    </item>
    
    <item>
      <title>Plant Intelligence</title>
      <link>https://mullikine.github.io/posts/plant-intelligence/</link>
      <pubDate>Fri, 27 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/plant-intelligence/</guid>
      <description>The Secret Life of Plants (1973) Pseudoscience.
The Power of Movement in Plants (Charles Darwin, 1880) ewwlinks +/&amp;#34;Darwin&amp;#34; &amp;#34;https://www.theparisreview.org/blog/2019/09/26/the-intelligence-of-plants/&amp;#34; Darwin floated the first modern ideation of plant intelligence in 1880.
The root of a plant has “the power of directing the movements of the adjoining parts” and thus “acts like the brain of one of the lower animals; the brain being seated within the anterior end of the body, receiving impressions from the sense organs and directing the several movements.</description>
    </item>
    
    <item>
      <title>Fused effects</title>
      <link>https://mullikine.github.io/posts/fused-effects/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/fused-effects/</guid>
      <description>Original video &amp;ldquo;Building Haskell Programs with Fused Effects&amp;rdquo; by Patrick Thomson - YouTube  Part of the GitHub semantic code team.
Install fused-effects stack install fused-effects Slides fused-effects is  a library for building Haskell programs an effect system providing fused, scoped, higher-order algebraic effects. performant, production-quality software suitable for industrial use.  Today, we&amp;rsquo;ll&amp;hellip;  describe the status quo of building Haskell programs explore how this status quo can be limiting show how fused-effects can overcome these limitations pinpoint fused-effects&amp;rsquo;s position in the design space  How are we to build programs in Haskell?</description>
    </item>
    
    <item>
      <title>Learning Haskell</title>
      <link>https://mullikine.github.io/posts/learning-haskell/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/learning-haskell/</guid>
      <description>Start with haskellbook.com and avoid learn you a haskell according to Tsoding.
My Haskell Setup - YouTube
Useful tools stack install hindent stack install hlint stack install repline stack install hasktags stack install importify hlint Apparently this is all you need to learn haskell.
Reading Monad transformers step-by-step https://page.mi.fu-berlin.de/scravy/realworldhaskell/materialien/monad-transformers-step-by-step.pdf $DUMP$NOTES/ws/haskell/reading/monad-transformers-step-by-step.txt
Module Data.Maybe Defines useful functions for dealing with optional values of type Maybe a.
Module Data.Map Defines finite maps.</description>
    </item>
    
    <item>
      <title>Differentiate org-mode bold face</title>
      <link>https://mullikine.github.io/posts/org-mode-bold/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/org-mode-bold/</guid>
      <description>The issue is that in a terminal, the generic bold face alone is not differentiable.
org-mode uses the generic bold face for text within asterisks.
Therefore we create a new face and give it a similar look but different colour to org-verbatim.
(defface org-bold &amp;#39;((t :foreground &amp;#34;#d2268b&amp;#34; :background &amp;#34;#2e2e2e&amp;#34; :weight bold :underline t )) &amp;#34;Face for org-mode bold.&amp;#34; :group &amp;#39;org-faces ) (setq org-emphasis-alist &amp;#39;((&amp;#34;*&amp;#34; ;; (bold :foreground &amp;#34;Orange&amp;#34; ) org-bold) (&amp;#34;/&amp;#34; italic) (&amp;#34;_&amp;#34; underline) (&amp;#34;=&amp;#34; ;; (:background &amp;#34;maroon&amp;#34; :foreground &amp;#34;white&amp;#34;) org-verbatim verbatim) (&amp;#34;~&amp;#34; ;; (:background &amp;#34;deep sky blue&amp;#34; :foreground &amp;#34;MidnightBlue&amp;#34;) org-code verbatim) (&amp;#34;+&amp;#34; (:strike-through t)))) ;; Because spacemacs had different ideas about the verbatim background (set-face-background &amp;#39;org-bold &amp;#34;#2e2e2e&amp;#34;) (set-face-background &amp;#39;org-verbatim &amp;#34;#2e2e2e&amp;#34;)</description>
    </item>
    
    <item>
      <title>Hitchhiker&#39;s Guide To The Galaxy – The Infocom Game, on Ubuntu, in a terminal!</title>
      <link>https://mullikine.github.io/posts/hhgttg/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/hhgttg/</guid>
      <description>Setup cd git clone &amp;#34;https://gitlab.com/DavidGriffith/frotz&amp;#34; git clone &amp;#34;https://github.com/historicalsource/hitchhikersguide&amp;#34; apt install libao-dev apt install libsndfile-dev apt install libsamplerate-dev apt install libmodplug-dev Play ~/frotz/frotz ~/hitchhikersguide/COMPILED/s4.z3 Recording of hhgttg running</description>
    </item>
    
    <item>
      <title>Convert hydra to regular bindings</title>
      <link>https://mullikine.github.io/posts/convert-hydra-to-regular-bindings/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/convert-hydra-to-regular-bindings/</guid>
      <description>The problem: which-key doesn&amp;rsquo;t work with hydra I had made a bunch of hydras which I would simply use as basic menu systems
This is a bit of an anti-pattern.
Hydras should only be used for creating temporary modes.
The solution: create a macro which converts the hydras into regular bindings Prerequisites 1 2 3 4 5 6 7  (defun sed (command stdin) &amp;#34;wrapper around sed&amp;#34; (interactive) (setq stdin (str stdin)) (setq command (concat &amp;#34;sed &amp;#39;&amp;#34; (str command) &amp;#34;&amp;#39;&amp;#34;)) (sh-notty command stdin) )   The aim Wrap a defhydra with the convert-hydra-to-sslk macro to turn it into regular keybindings.</description>
    </item>
    
    <item>
      <title>fzf vs helm, ivy and completing-read</title>
      <link>https://mullikine.github.io/posts/helm-ivy-and-completing-read/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/helm-ivy-and-completing-read/</guid>
      <description>Helm, ivy and completing-read are 3 emacs-lisp alternatives to fzf.
They are all a little different to hack on / configure though.
helm Select from a list There are different ways to select from a list.
(defun fz-must-match (list &amp;amp;optional prompt) (setq prompt (or prompt &amp;#34;:&amp;#34;)) (helm-comp-read prompt list :must-match t)) ;; This is very useful (defun fz-default-return-query (list &amp;amp;optional prompt) (setq prompt (or prompt &amp;#34;:&amp;#34;)) (helm-comp-read prompt list :must-match &amp;#39;confirm)) ;; But I don&amp;#39;t like confirm things (defun fz-default-return-query (list &amp;amp;optional prompt) (setq prompt (or prompt &amp;#34;:&amp;#34;)) (helm-comp-read prompt list :must-match &amp;#39;nil)) Getting the list of options in another window tv takes a string and opens a window with it.</description>
    </item>
    
    <item>
      <title>Interesting emacs packages (Sep 2019)</title>
      <link>https://mullikine.github.io/posts/emacs-packages-21.09.19/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-packages-21.09.19/</guid>
      <description>Helpful.el GitHub - Wilfred/helpful: A better Emacs help buffer
Helpful is a replacement for help buffers that provides much more contextual information
Interesting features It can search all loaded elisp files for references to a symbol.
(define-button-type &amp;#39;helpful-all-references-button &amp;#39;action #&amp;#39;helpful--all-references &amp;#39;symbol nil &amp;#39;callable-p nil &amp;#39;follow-link t &amp;#39;help-echo &amp;#34;Find all references to this symbol&amp;#34;)(defun helpful--all-references (button) &amp;#34;Find all the references to the symbol that this BUTTON represents.&amp;#34; (let ((sym (button-get button &amp;#39;symbol)) (callable-p (button-get button &amp;#39;callable-p))) (cond ((not callable-p) (elisp-refs-variable sym)) ((functionp sym) (elisp-refs-function sym)) ((macrop sym) (elisp-refs-macro sym))))) parsec.</description>
    </item>
    
    <item>
      <title>Best emacs tetris in emacs 26&#43;</title>
      <link>https://mullikine.github.io/posts/emacs-tetris-nice/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-tetris-nice/</guid>
      <description>emacs 27 has an update to emacs&amp;rsquo; tetris mode which makes the glyphs display larger on higher DPI screens.
This script will download that update from git.savannah.gnu.org and display tetris in a distraction free environment for the ultimate productivity.
Symlinks If you symlink this script to etetris-vt100 and run that instead, you will get the animated and striking black and white terminal version.
1  ln -s etetris etetris-vt100   If you symlink this script to etetris-xterm and run that instead, you will get the vivid color terminal version.</description>
    </item>
    
    <item>
      <title>empirical: probability, theory and evidence</title>
      <link>https://mullikine.github.io/posts/empirical/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/empirical/</guid>
      <description>empirical  The word means:  in practice experimental non-philosophical scientific   Probability Empirical probability The empirical (or experimental) probability of an event is an &amp;ldquo;estimate&amp;rdquo; that an event will occur based upon how often the event occurred after collecting data from an experiment in a large number of trials.
Theoretical probability You do not actually conduct an experiment.
Political theory Empirical political theory Concerned with &amp;lsquo;what is.&amp;rsquo;</description>
    </item>
    
    <item>
      <title>Circumventing paywalls with eww browser</title>
      <link>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser/</guid>
      <description>Use Google cache Often Google cache has a full copy of an article.
Check for the existence of the cache for a given URL as some URLs may not be cached.
I had originally used curl for this.
Circumventing paywalls with eww browser and curl // Bodacious Blog
This is not an accurate science. Sometimes the cache is needed and sometimes it is not, but the more information we bring in (such as if the cache exists), the better, as this leads to a more informed decision.</description>
    </item>
    
    <item>
      <title>Curling the paged GitHub API</title>
      <link>https://mullikine.github.io/posts/curling-the-paged-github-api/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/curling-the-paged-github-api/</guid>
      <description>The GitHub API The GitHub API is useful for many things including running searches on issues, repositories and contributors.
It makes use of pagination and rate limiting.
We like the convenience of curl on the command line and don&amp;rsquo;t wish to learn another tool.
Therefore we make a wrapper script around curl to take care of authentication and pagination.
Tools used to build the gh-curl script:    Program Purpose     jq wrangling json   yq wrangling yaml   curl making http requests   grep matching PCRE in the URL    The gh-curl script #!</description>
    </item>
    
    <item>
      <title>Adding new digraphs to vim and evil</title>
      <link>https://mullikine.github.io/posts/adding-new-digraphs-to-vim-and-evil/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/adding-new-digraphs-to-vim-and-evil/</guid>
      <description>I run this command to search for symbols but it often does not have the symbol I require vimhelp digraph-table·	.M	0xb7	183	MIDDLE DOT ⇔	==	21D4	8660	LEFT RIGHT DOUBLE ARROW ∀	FA	2200	8704	FOR ALL ∂	dP	2202	8706	PARTIAL DIFFERENTIAL ∃	TE	2203	8707	THERE EXISTS ∅	/0	2205	8709	EMPTY SET ∆	DE	2206	8710	INCREMENT ∇	NB	2207	8711	NABLA ∈	(-	2208	8712	ELEMENT OF ∋	-)	220B	8715	CONTAINS AS MEMBER ∏	*P	220F	8719	N-ARY PRODUCT ` ∑	+Z	2211	8721	N-ARY SUMMATION ` ≤	=&amp;lt;	2264	8804	LESS-THAN OR EQUAL TO ≥	&amp;gt;=	2265	8805	GREATER-THAN OR EQUAL TO ≪	&amp;lt;*	226A	8810	MUCH LESS-THAN ≫	*&amp;gt;	226B	8811	MUCH GREATER-THAN I had to Google for these symbols as they were not in the list  List of symbols we wish to make into digraphs  ℕ - double-struck capital N ℤ - Zahlen - double-struck capital Z ℝ - double-struck capital R   Run the unicode program to find the decimal ID for each symbol we want unicode ℕ unicode ℤ unicode ℝ Add them to the vim digraph table Vim uses the decimal value of the symbol.</description>
    </item>
    
    <item>
      <title>Ameliorating list-processes</title>
      <link>https://mullikine.github.io/posts/ameliorating-list-processes/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/ameliorating-list-processes/</guid>
      <description>What is list-processes? list-processes is an emacs-lisp function which displays daemons running as subprocesses under emacs.
The trouble with list-processes  It doesn&amp;rsquo;t format the command string  Commands with multiline arguments are printed verbatim Arguments are not quoted   This means that commands may flow several lines (as many as it takes to print out the full command).
Also, 90% of the time you can&amp;rsquo;t copy the command and paste in the terminal because individual parameters with spaces are split into separate arguments.</description>
    </item>
    
    <item>
      <title>Asking for help: methods</title>
      <link>https://mullikine.github.io/posts/asking-for-help-irc-asciinema/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/asking-for-help-irc-asciinema/</guid>
      <description>IRC and asciinema I will usually create a recording of my terminal and ask over IRC.
Recordings 

&amp;lt;2019-10-30 Wed&amp;gt;  #racket 20:03 &amp;lt; libertyprime&amp;gt; hey guys. how would i hide the output of the sexps being evaluated? https://asciinema.org/a/qZolO6uyMFvCma8RvYNI0k9YK I can&amp;#39;t wrap in (void (begin ...)) because it will complain 20:04 &amp;lt; libertyprime&amp;gt; http://ix.io/20jR/rkt</description>
    </item>
    
    <item>
      <title>Circumventing paywalls with eww browser and curl</title>
      <link>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser-and-curl/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser-and-curl/</guid>
      <description>Use Google cache and curl Often Google cache has a full copy of an article.
We use curl to check the existence of the cache for a given URL as some URLs may not be cached.
This is not an accurate science. Sometimes the cache is needed and sometimes it is not, but the more information we bring in (such as if the cache exists), the better, as this leads to a more informed decision.</description>
    </item>
    
    <item>
      <title>Didactic emacs-lisp macro example (ie. a tutorial)</title>
      <link>https://mullikine.github.io/posts/macro-tutorial/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/macro-tutorial/</guid>
      <description>In this tutorial we build a function b which allows you to run shell code within elisp syntax (it looks like emacs lisp).
This tutorial is useful for learning to write emacs-lisp macros but is also useful for understanding macros of any language.
First some prerequisite functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  (defmacro shut-up-c (&amp;amp;rest body) &amp;#34;This works for c functions where shut-up does not.</description>
    </item>
    
    <item>
      <title>Getting arxiv in the terminal</title>
      <link>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</guid>
      <description>It all starts with this emacs plugin 1  (require &amp;#39;biblio-arxiv)   We create a bash script We name it arxiv-summary.
Cant name this &amp;lsquo;as&amp;rsquo; because it interferes with pip.
Sometimes packages installed wtih pip need the assembler.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!</description>
    </item>
    
    <item>
      <title>Reading YouTube rather than watching it</title>
      <link>https://mullikine.github.io/posts/reading-youtube-rather-than-watching-it/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-youtube-rather-than-watching-it/</guid>
      <description>It all starts with youtube-dl youtube-dl is a YouTube video downloader. You can install it with sudo pip install youtube-dl.
Let&amp;rsquo;s make some scripts Use the spaCy NLP library to semantically segregate sentences.
Segment-sentences 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #!/usr/bin/env python3.5 #!/usr/bin/env python3.6 # -*- coding: utf-8 -*- # python3.6 -m spacy download en import sys import spacy text = sys.</description>
    </item>
    
    <item>
      <title>Uniqifying emacs apps</title>
      <link>https://mullikine.github.io/posts/uniqifying-emacs-apps/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/uniqifying-emacs-apps/</guid>
      <description>The problem Many useful emacs apps can only have one instance running at a time due to working with a fixed buffer name.
 Examples of useful apps which you can only run one of  eww Perl-REPL dictionary-search calculator   The fix: rename the buffer to tack on a hash after it is created Create the advice function (defun unique-buffer-generic-after-advice (&amp;amp;rest args) &amp;#34;Give the buffer a unique name&amp;#34; (ignore-errors (let* ((hash (short-hash (str (time-to-seconds)))) (new-buffer-name (pcre-replace-string &amp;#34;(\\*?</description>
    </item>
    
    <item>
      <title>Fixing hugo terminal theme</title>
      <link>https://mullikine.github.io/posts/hugo-setup-terminal-theme/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mullikine.github.io/posts/hugo-setup-terminal-theme/</guid>
      <description>https://github.com/panr/hugo-theme-terminal/issues/43
I had to add this to config.toml to get the terminal theme to work.
[params] fullWidthTheme = false centerTheme = false</description>
    </item>
    
    <item>
      <title>About this weblog</title>
      <link>https://mullikine.github.io/about/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/about/</guid>
      <description>I&amp;rsquo;ve started this blog to cast some light on my activities.
My goal is to do all of my programming through a terminal, forever, and see where that leads.
Big topics I&amp;rsquo;ll be covering:
 emacs Natural Language Processing python vim math  Thanks for reading!</description>
    </item>
    
    <item>
      <title>About this weblog</title>
      <link>https://mullikine.github.io/posts/about/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/about/</guid>
      <description>I&amp;rsquo;ve started this blog to cast some light on my activities.
My goal is to do all of my programming through a terminal, forever, and see where that leads.
Big topics I&amp;rsquo;ll be covering:
 emacs Natural Language Processing python vim math  Thanks for reading!</description>
    </item>
    
    <item>
      <title>Curriculum Vitae</title>
      <link>https://mullikine.github.io/about-me/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/about-me/</guid>
      <description>Download full CV
Shane Mulligan (BSc) Blogs  Practical macros in racket and how to work with them CodeLingo vs linters Combined glossary of A-Z Personal blog (You are already here)  Areas of interest  Natural Language Processing Application of deep learning Probability theory Domain-specific languages Language-agnostic programming Syntactic analysis (Parsers)  Skills &amp;amp; evidence
GitHub mullikine (Shane 诗恩 Mulligan) GitHub
Education BSc (Computer Science) from the University of Otago, Dunedin, NZ</description>
    </item>
    
    <item>
      <title>Curriculum Vitae</title>
      <link>https://mullikine.github.io/posts/about-me/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/about-me/</guid>
      <description>Download full CV
Shane Mulligan (BSc) Blogs  Practical macros in racket and how to work with them CodeLingo vs linters Combined glossary of A-Z Personal blog (You are already here)  Areas of interest  Natural Language Processing Application of deep learning Probability theory Domain-specific languages Language-agnostic programming Syntactic analysis (Parsers)  Skills &amp;amp; evidence
GitHub mullikine (Shane 诗恩 Mulligan) GitHub
Education BSc (Computer Science) from the University of Otago, Dunedin, NZ</description>
    </item>
    
    <item>
      <title>Lispy vs Paredit: The convolute function</title>
      <link>https://mullikine.github.io/posts/convolute/</link>
      <pubDate>Thu, 15 Aug 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/convolute/</guid>
      <description>The following illustrates the difference between lispy&amp;rsquo;s convolute function and paredit&amp;rsquo;s convolute function.
Original sexp (a a1 (b b1 (c c1 (d d1 (e) d9) c9) b9) a9) (special-lispy-convolute)  binding C  Swaps parent with grandparent including their elements.
Current element holds still.
Reversible.
;; Typing C on (c results in this (b b1 (a a1 (c c1 (d d1 (e) d9) c9) a9) b9) (paredit-convolute-sexp &amp;amp;optional N)  binding M-P  Swaps parent with grandparent including their elements.</description>
    </item>
    
    <item>
      <title>Notes from CodeCraft 06.08.19: Juju and Application Modelling</title>
      <link>https://mullikine.github.io/posts/codecraft-06.08.19/</link>
      <pubDate>Tue, 06 Aug 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/codecraft-06.08.19/</guid>
      <description>Tim Penhey &amp;ndash; lecture for 3rd year info sci Juju and Application Modelling Self-contained applications.
devops  Not just writing code, deploying
Also, monitoring, upgrading.
 Not just automation
Operating is a task in itself. Everything you do with softwrae beyond installing it.
 Software is complicated
most of the time adding code.
 django
 gunicorn (Green Unicorn)
Python Web Server Gateway Interface (WSGI) HTTP server. It is a pre-fork worker model, ported from Ruby&amp;#39;s Unicorn project.</description>
    </item>
    
    <item>
      <title>CodeLingo vs Linters</title>
      <link>https://mullikine.github.io/codelingo-vs-linters/main/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/codelingo-vs-linters/main/</guid>
      <description>Making tenets with CLQL that do the job of existing linters I started learning Go and CodeLingo / CLQL at the same time, so while I have found it generally easy and straightforward to create these tenets, I feel like I could&amp;rsquo;ve knocked them out even faster if I didn&amp;rsquo;t need to look up answers to questions such as &amp;lsquo;what is an interface in golang?&amp;rsquo;, for example. The process has been intuitive; I think in part to having a good naming convention.</description>
    </item>
    
    <item>
      <title>CodeLingo vs Linters: TLDR</title>
      <link>https://mullikine.github.io/codelingo-vs-linters/summary/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/codelingo-vs-linters/summary/</guid>
      <description>Tenet&amp;rsquo;s are 10x shorter and faster to write than Linters Comparison of size in code
   Lines (CL) Lines (L) Words (CL) Words (L) Bytes (CL) Bytes (L) Byte % (CL/L) Tenet name (CL) linter name (L)     18 681 49 2084 524 15616 3.36% unconvert unconvert   19 110 64 275 580 2198 26.39% init gochecknoinits   18 136 67 353 623 2307 27.</description>
    </item>
    
    <item>
      <title>Making emacs-lisp wrappers for telco commands</title>
      <link>https://mullikine.github.io/posts/emacs-telco-commands/</link>
      <pubDate>Sat, 25 Aug 2018 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-telco-commands/</guid>
      <description> Emacs scripts for bash-related tasks which could benefit from search and autocompletion 1 2 3 4 5 6 7 8 9  (require &amp;#39;my-utils) (require &amp;#39;my-nix) ;; lsof -i :55555 ;; (port2pid 55555) (defun port2process (port) (sh-notty (concat &amp;#34;lsof -i:&amp;#34; (str port)))) (defalias &amp;#39;portgrep &amp;#39;port2process) (defalias &amp;#39;port2pid &amp;#39;port2process)   (port2pid 55555)</description>
    </item>
    
    <item>
      <title>Notes from CodeCraft 03.07.18: Scott Automation</title>
      <link>https://mullikine.github.io/posts/codecraft-03.07.18/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/codecraft-03.07.18/</guid>
      <description>Scott Automation SCOTT - Automation + Robotics Scott
Started 100 years ago in Dunedin.
Milking cows TOF - time of flight.
Meatworks in Balclutha. Detecting Ribs Tried CNN Labelled the data but it wasn&amp;rsquo;t as good as the support vector machine (because the SVM had been trained over 10 years).
Visualise radiation from their radiation room Chris Mein Maps scattered around Dunedin.
In property services.
First Get data into GIS format.</description>
    </item>
    
    <item>
      <title>Copy text from screen with Tesseract</title>
      <link>https://mullikine.github.io/posts/copy-text-from-screen-with-tesseract/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/copy-text-from-screen-with-tesseract/</guid>
      <description>Add binding to xmonad 1  , ((modm .|. mod1Mask, xK_w ), spawn &amp;#34;win capture-text screen &amp;amp;&amp;#34;)   Add case to win script  Upscale the image by 300% to make the OCR more reliable.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  capture-text) { opt=&amp;#34;$1&amp;#34; shift dir=$DUMP$HOME/notes2018/ws/screenshots cd &amp;#34;$dir&amp;#34; tf_image=&amp;#34;$(ux tf $(date-ts)_screen png &amp;#34;$dir&amp;#34; || echo /dev/null)&amp;#34; scaled_image=&amp;#34;$(ux tf screen_scaled png || echo /dev/null)&amp;#34; case &amp;#34;$opt&amp;#34; in screen) { import &amp;#34;$tf_image&amp;#34; } ;; root) { import -window root &amp;#34;$tf_image&amp;#34; } ;; esac if !</description>
    </item>
    
    <item>
      <title>Research: Accessing Repository Hosting Services</title>
      <link>https://mullikine.github.io/posts/accessing-repository-hosting-services/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/accessing-repository-hosting-services/</guid>
      <description>Questions/Answers  Is Google Code [Search] still accessible through an API? No, The API is gone.  Look into software for accessing APIs GitHub API apt apt search github Results
libghc-github-dev/xenial 0.13.2-4build1 amd64 Haskell Github API libghc-github-doc/xenial,xenial 0.13.2-4build1 all Haskell Github API; documentation libghc-github-prof/xenial 0.13.2-4build1 amd64 Haskell Github API; profiling libraries  Common Lisp Github API
cl-github-v3/xenial,xenial 20130312-1 all Common Lisp interface to the github V3 API  pip pip search github Results</description>
    </item>
    
    <item>
      <title>Research: Source Code Retrieval from Large Software Libraries</title>
      <link>https://mullikine.github.io/posts/source-code-retrieval-from-large-software-libraries/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/source-code-retrieval-from-large-software-libraries/</guid>
      <description>External [[file:/home/shane/dump/home/shane/notes2018/uni/cosc/480-project_FY/research/Source Code Retrieval from Large Software Libraries for Automatic.pdf][SCR from LSL for ABL.pdf]]
reading +1 source code retrieval large ` # Chapter 1: Introduction ` reading +7 source code retrieval large ` # Chapter 2: Related Work ` reading +12 source code retrieval large ` # Chapter 3: Models for Document Retrieval ` reading +25 source code retrieval large ` # Chapter 4: Information Retrieval For Bug Localization ` reading +31 source code retrieval large ` # Chapter 5: Incorporating Version Histories In Ir-Based Bug Localization ` reading +51 source code retrieval large ` # Chapter 6: Assisting Code Search With Automatic Query Reformulation For Bug Localization ` reading +79 source code retrieval large ` # Chapter 7: Exploiting Source Code Proximity And Order With Markov Random Fields ` reading +109 source code retrieval large ` # Chapter 8: A Retrieval Engine For Bug Localization:Terrier+ ` reading +114 source code retrieval large ` # Chapter 9: Conclusions ` Aim Mine the defect and ifle modification related knowledge that is always buried in the software repositories and to incorporate this knowledge that is always buried</description>
    </item>
    
    <item>
      <title>Practical macros in Racket</title>
      <link>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</guid>
      <description>Original article Practical macros in Racket and how to work with them  This is a copy of Kevin R. Stravers article above, formatted in org-mode with some minor changes.
 TLDR You can ignore everything except define-syntax-parser if you&amp;rsquo;re new.
In essence it&amp;rsquo;s a way to define macros in a clean manner.
Explanation of syntax: define-syntax-parser
An example of define-syntax-parser: Generating C with racket // Bodacious Blog</description>
    </item>
    
    <item>
      <title>Send encrypted messages using your ssh key</title>
      <link>https://mullikine.github.io/posts/use-ssh-key-to-encrypt-messages/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/use-ssh-key-to-encrypt-messages/</guid>
      <description>Create self-decrypting encrypted files using your ssh public key. The self decrypting file will only decrypt if you have the private key. Only works on small files like short messages.
The script makemsg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  #!</description>
    </item>
    
    <item>
      <title>Write You A Haskell</title>
      <link>https://mullikine.github.io/posts/write-you-a-haskell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://mullikine.github.io/posts/write-you-a-haskell/</guid>
      <description>This is just a casual writeup of WYAH as I read through it.
 Original article http://dev.stephendiehl.com/fun/ http://dev.stephendiehl.com/fun/002%5Fparsers.html Code https://github.com/sdiehl/write-you-a-haskell  We will build a small functional language called Fun which is a partial Haskell 2010 toy language; complete with:
 a parser type inference datatypes pattern matching desugaring typeclasses higher-kinded types monadic IO arbitrary-rank polymorphism records Core language STG intermediate language lazy evaluation interpreter native code generator a runtime, and several optimization passes.</description>
    </item>
    
  </channel>
</rss>