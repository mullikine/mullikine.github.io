<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>facebook on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/facebook/</link>
    <description>Recent content in facebook on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 May 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/facebook/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Facebook interview prep</title>
      <link>https://mullikine.github.io/posts/facebook-interview-prep/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/facebook-interview-prep/</guid>
      <description>Facebook resources  https://www.facebook.com/careers/life/preparing-for-your-software-engineering-interview-at-facebook https://www.facebook.com/notes/facebook-engineering/get-that-job-at-facebook/10150964382448920 https://sites.google.com/site/steveyegge2/five-essential-phone-screen-questions http://cocoanuts.mobi/2014/08/03/facebook/ https://www.quora.com/How-should-I-prepare-for-a-software-engineer-interview-at-Facebook  You can review and practice Facebook problems, here:  https://www.careercup.com/page?pid=facebook-interview-questions https://codelab.interviewbit.com/registration/?type=professional  Own research  https://github.com/RehanSaeed/.NET-Big-O-Algorithm-Complexity-Cheat-Sheet https://github.com/joney000/Java-Competitive-Programming https://github.com/JBayona/Facebook-Interview-Coding https://github.com/Christopher-Hsieh/facebook-interview-prep  Questions about Operations (Network stuff) Big-O complexity    O(1)     O(log n)   O(n)   O(n log n)   O(nn), O(n^3)    If an algorithm increments each number in a list of length n, we might say: “This algorithm runs in O(n) time and performs O(1) work for each element”.</description>
    </item>
    
    <item>
      <title>Technologies Facebook is using</title>
      <link>https://mullikine.github.io/posts/technologies-facebook-is-using/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/technologies-facebook-is-using/</guid>
      <description>From Facebook https://opensource.facebook.com/
Hydra  Links https://github.com/facebookresearch/hydra https://hydra.cc/  Powered by Omegaconf.
1 2 3 4 5 6  Hydra [framework] Elegantly configure complex applications. https://hydra.cc   Basic example
 Configuration file config.yaml   1 2 3 4  db: driver: mysql user: omry pass: secret    Python file my_app.py   1 2 3 4 5 6 7 8 9  import hydra from omegaconf import DictConfig @hydra.</description>
    </item>
    
    <item>
      <title>Using Facebook&#39;s Duckling parser</title>
      <link>https://mullikine.github.io/posts/using-facebook-s-duckling-parser/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-facebook-s-duckling-parser/</guid>
      <description>Demonstration 
Obtain the docker image 1  docker pull rasa/duckling   Create duckling-parse script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #!/bin/bash export TTY input=&amp;#34;$(urlencode)&amp;#34; set -m ( unbuffer docker \  run \  --name duckling-container \  --rm \  --network=host \  --entrypoint= \  rasa/duckling:latest \  duckling-example-exe -p 8000 --no-access-log --no-error-log ) &amp;amp;&amp;gt;/dev/null &amp;amp; sleep 2 /usr/bin/curl -XPOST http://0.</description>
    </item>
    
    <item>
      <title>Haskell at Facebook</title>
      <link>https://mullikine.github.io/posts/haskell-at-facebook/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell-at-facebook/</guid>
      <description>Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  FXL Feature eXtraction Language DEPRECATED. Used before 2015. Scrapped. Used in combatting spam on the social networking service. FXL described as a narrowly-optimized implementation of a well-chosen subset of Standard ML (with some customized syntax). FXL offers two key advantages: it is simple and easy to write, yet extremely efficient for Facebook-sized workloads.</description>
    </item>
    
  </channel>
</rss>