<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithms on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/algorithms/</link>
    <description>Recent content in algorithms on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Revision of time and space complexity</title>
      <link>https://mullikine.github.io/posts/time-space-complexity/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/time-space-complexity/</guid>
      <description>Original articles How to analyze time complexity: Count your steps YourBasic Big O notation: definition and examples YourBasic O(n) Complexity. This notation can be used for both space and time T(n) Time complexity S(n) Space complexity O(log n) memory space  = W(n) :: Worst-case/slowest/most-inefficient complexity bound
 Θ(n) Upper + lower bound complexity Ω(n) Fastest/most efficient complexity bound  ∊ T(n) ∊ O(f(n)) means that T(n) doesn&amp;rsquo;t grow faster than f(n).</description>
    </item>
    
  </channel>
</rss>