<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>perl on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/perl/</link>
    <description>Recent content in perl on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Oct 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/perl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Filtering text streams</title>
      <link>https://mullikine.github.io/posts/filter-regex-in-perlre/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/filter-regex-in-perlre/</guid>
      <description>The script awk-apply-to-record awk awk-apply-to-record.awk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  { # print NR if (r == &amp;#34;&amp;#34; || NR == r) { if (NR == 1) { printf &amp;#34;%s&amp;#34;, $0 |&amp;amp; cmd; } else { if (irs == &amp;#34;y&amp;#34;) { printf &amp;#34;%s&amp;#34;, RS printf &amp;#34;%s&amp;#34;, $0 |&amp;amp; cmd; } else { printf &amp;#34;%s%s&amp;#34;, RS, $0 |&amp;amp; cmd; } } close(cmd, &amp;#34;to&amp;#34;); # This is needed because getline will not overwrite if nothing is read $0 = &amp;#34;&amp;#34;; cmd |&amp;amp; getline $0; fflush(cmd); close(cmd); } else { if (NR &amp;gt; 1) { print RS } } print; system(&amp;#34;&amp;#34;); }   awk-apply-to-record 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  #!</description>
    </item>
    
    <item>
      <title>String quoting utility</title>
      <link>https://mullikine.github.io/posts/string-quoting-utility/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/string-quoting-utility/</guid>
      <description>premise This perl script enables you to do code generation and intelligent &amp;lsquo;quoting&amp;rsquo; and &amp;lsquo;unquoting&amp;rsquo;.
examples While coding, it might be necessary to take a chunk of code and turn it into a string input
 1 2 3 4 5  getopts(&amp;#34;d:Jufnbthl&amp;#34;, \%options); if (defined $options{d}) { $delim = $options{d}; }  
pipe the input into the q script
1  cat | q   &amp;#34;getopts(\&amp;#34;d:Jufnbthl\&amp;#34;, \\%options);\n\nif (defined $options{d}) {\n $delim= $options{d};\n}&amp;#34; cmd script for bash code generation Basic version, without the q script.</description>
    </item>
    
  </channel>
</rss>