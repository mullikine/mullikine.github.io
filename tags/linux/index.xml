<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/linux/</link>
    <description>Recent content in linux on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>systemd service mode based on chkservice</title>
      <link>https://mullikine.github.io/posts/systemd-service-mode-with-chkservice/</link>
      <pubDate>Sat, 06 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/systemd-service-mode-with-chkservice/</guid>
      <description>Code for creating a chkservice mode and assigning a keybinding to it 1 2 3 4 5 6 7 8 9  (defun make-etui-cmd (cmd) &amp;#34;This function expects a one term command (binary name only) and it returns a new interactive function.&amp;#34; (let ((funname (concat &amp;#34;esh-&amp;#34; cmd))) (eval `(defun ,(str2sym funname) (&amp;amp;rest args) &amp;#34;This function expects a one term command (binary name only).&amp;#34; (interactive) (term-nsfa (mapconcat &amp;#39;q (cons ,cmd args) &amp;#34; &amp;#34;) nil ,cmd))))) (define-key my-mode-map (kbd &amp;#34;M-m a y&amp;#34;) (make-etui-cmd &amp;#34;chkservice&amp;#34;))   Also create an external script chkservice wrapper script for starting chkservice with enough privileges 1 2 3 4 5 6 7 8 9 10 11 12  #!</description>
    </item>
    
    <item>
      <title>Generic paths for toolchains</title>
      <link>https://mullikine.github.io/posts/generic-path-for-blockchains/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/generic-path-for-blockchains/</guid>
      <description>I downloaded the latest version of the clang compiler today and I didn&amp;rsquo;t know where to put it.
I didn&amp;rsquo;t want to set up paths for a single toolchain and have to do it again in the future.
This was my hack. It works. Use this 1 2 3 4 5 6 7 8  for d in /usr/local/toolchains/*; do export PATH=$d/bin:${PATH} export LIBRARY_PATH=$d/lib:${LIBRARY_PATH} export LD_LIBRARY_PATH=$d/lib:${LD_LIBRARY_PATH} export C_INCLUDE_PATH=$d/include:${C_INCLUDE_PATH} export CPLUS_INCLUDE_PATH=$d/include:${CPLUS_INCLUDE_PATH} export MANPATH=&amp;#34;$d/share/man:$MANPATH&amp;#34; done   I extracted clang+llvm-9.</description>
    </item>
    
  </channel>
</rss>