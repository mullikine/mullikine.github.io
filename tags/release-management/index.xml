<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>release-management on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/release-management/</link>
    <description>Recent content in release-management on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Jan 2020 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/release-management/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hydra - CI and release management for NixOS</title>
      <link>https://mullikine.github.io/posts/nix-hydra-ci/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/nix-hydra-ci/</guid>
      <description>Original article https://nixos.org/hydra/manual/  An automated system continuously or periodically  checks out the source code of a project, builds it, runs tests, and produces reports for the developers.  Therefore,  Various errors that might accidentally be committed into the code base are automatically caught.  Such a system allows more in-depth testing than what developers could feasibly do manually:
 Portability testing Lengthy and numerous tests Tests may include many types of analysis Build many variants Deterministic incremental building Assurance for building from VCS The machines on which the CI system runs ideally provides a clean, well-defined build environment.</description>
    </item>
    
  </channel>
</rss>