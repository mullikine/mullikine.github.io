<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ssh on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/ssh/</link>
    <description>Recent content in ssh on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Nov 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SSH config</title>
      <link>https://mullikine.github.io/posts/ssh-config/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/ssh-config/</guid>
      <description>Here&amp;rsquo;s some insight into my ssh config.
Proxy commands This is how to use proxytunnel, corkscrew and netcat to do ssh proxying.
If you wanted to ssh to home via vyatta via architect, you would do so as follows:
1  ssh home_vyatta_architect   config section for ProxyCommand 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95  Host *_connect-polipo ProxyCommand nc -X connect -x localhost:8123 %h %p Host *_tunneluni ProxyCommand proxytunnel -p proxy.</description>
    </item>
    
    <item>
      <title>Send encrypted messages using your ssh key</title>
      <link>https://mullikine.github.io/posts/use-ssh-key-to-encrypt-messages/</link>
      <pubDate>Tue, 20 Jan 2015 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/use-ssh-key-to-encrypt-messages/</guid>
      <description>Create self-decrypting encrypted files using your ssh public key. The self decrypting file will only decrypt if you have the private key. Only works on small files like short messages.
The script makemsg 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  #!</description>
    </item>
    
  </channel>
</rss>