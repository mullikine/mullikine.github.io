<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/rust/</link>
    <description>Recent content in Rust on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 05 Dec 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting up LSP with emacs (Go, Java, Python, Rust, C&#43;&#43;, Haskell, JS, TS, Ruby…)</title>
      <link>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description>Guides used https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/ https://github.com/emacs-lsp/lsp-java  1 2 3 4 5  Debug Adaptor Protocol DAP The LSP of debugging. https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website   State of languages with LSP in my own environment    Language LSP Working Fallback working Current user experience TabNine enabled REPL / Playground DAP (debug) Working Static analysis Complaints Custom LSP improvements     Go ✓ ✓ Amazing ✓ ✓  ✓ Go toolchain changes too quickly    Python ✓ ✓ Amazing ✓ ✓ ✓ ✓     Racket ✓ ✓ racket-mode Amazing  ✓  ✓     Java ✓ ✓ eclim Good ✓ ✓ (default) ✓ ✓ A little slow.</description>
    </item>
    
    <item>
      <title>Setting up Rust</title>
      <link>https://mullikine.github.io/posts/overview-of-rust/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/overview-of-rust/</guid>
      <description>Glossary racer Rust Code Completion utility http://siciarz.net/24-days-of-rust-racer/ flamegraph The proportion of a program’s runtime that occurs in a routine is proportional to the width of the bar for that routine. https://ngoldbaum.github.io/posts/python-vs-rust-nn/ Language references Syntax https://cheats.rs/
Rosetta: rust vs swift vs scala http://hyperpolyglot.org/rust
Installation curl https://sh.rustup.rs -sSf | sh Reading Rust by example Introduction - Rust By Example
A little bit of functional programming https://hoverbear.org/2015/05/02/a-journey-into-iterators/
std::mem::drop https://blog.jabid.in/2019/10/11/drop.html
An simple example project Why I Ripped The Same CD 300 Times</description>
    </item>
    
  </channel>
</rss>