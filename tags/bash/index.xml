<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bash on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/bash/</link>
    <description>Recent content in bash on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Jul 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install haskell missing libraries</title>
      <link>https://mullikine.github.io/posts/install-haskell-missing-libraries/</link>
      <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/install-haskell-missing-libraries/</guid>
      <description>List installed resolvers stack-list-resolvers
1 2 3 4 5 6 7 8 9 10 11 12 13 14  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null # stack ls snapshots --lts remote | cat # TODO Make a way to list local resolvers cd /media/external-hd$HOME/.stack/build-plan find . -maxdepth 1 -name &amp;#34;lts-*.yaml&amp;#34; | sed -e &amp;#39;s/^\.\///&amp;#39; -e &amp;#39;s/\.yaml$//&amp;#39; | awk1 | while IFS=$&amp;#39;\n&amp;#39; read -r line; do echo &amp;#34;$line&amp;#34; unbuffer oci yq -r &amp;#39;.</description>
    </item>
    
    <item>
      <title>String quoting utility</title>
      <link>https://mullikine.github.io/posts/string-quoting-utility/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/string-quoting-utility/</guid>
      <description>premise This perl script enables you to do code generation and intelligent &amp;lsquo;quoting&amp;rsquo; and &amp;lsquo;unquoting&amp;rsquo;.
examples While coding, it might be necessary to take a chunk of code and turn it into a string input
 1 2 3 4 5  getopts(&amp;#34;d:Jufnbthl&amp;#34;, \%options); if (defined $options{d}) { $delim = $options{d}; }  
pipe the input into the q script
1  cat | q   &amp;#34;getopts(\&amp;#34;d:Jufnbthl\&amp;#34;, \\%options);\n\nif (defined $options{d}) {\n $delim= $options{d};\n}&amp;#34; cmd script for bash code generation Basic version, without the q script.</description>
    </item>
    
  </channel>
</rss>