<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bash on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/bash/</link>
    <description>Recent content in bash on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Oct 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Searching awesome lists for curated web browsing</title>
      <link>https://mullikine.github.io/posts/curated-surfing/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/curated-surfing/</guid>
      <description>Here I demonstrate searching through and reading lists of things from the command line.
I ran into some issues with the googlesearch pip module It seems to have been taken down from pip.
I changed my script to use emacs&amp;rsquo; eww browser to scrape the results instead eww is pretty reliable.
Demonstration Please be patient as I bypass the problem above.

Some search results from the demonstration above http://linear.</description>
    </item>
    
    <item>
      <title>Best emacs tetris in emacs 26&#43;</title>
      <link>https://mullikine.github.io/posts/emacs-tetris-nice/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-tetris-nice/</guid>
      <description>emacs 27 has an update to emacs&amp;rsquo; tetris mode which makes the glyphs display larger on higher DPI screens.
This script will download that update from git.savannah.gnu.org and display tetris in a distraction free environment for the ultimate productivity.
Symlinks If you symlink this script to etetris-vt100 and run that instead, you will get the animated and striking black and white terminal version.
ln -s etetris etetris-vt100 If you symlink this script to etetris-xterm and run that instead, you will get the vivid color terminal version.</description>
    </item>
    
    <item>
      <title>Curling the paged GitHub API</title>
      <link>https://mullikine.github.io/posts/curling-the-paged-github-api/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/curling-the-paged-github-api/</guid>
      <description>The GitHub API The GitHub API is useful for many things including running searches on issues, repositories and contributors.
It makes use of pagination and rate limiting.
We like the convenience of curl on the command line and don&amp;rsquo;t wish to learn another tool.
Therefore we make a wrapper script around curl to take care of authentication and pagination.
Tools used to build the gh-curl script:    Program Purpose     jq wrangling json   yq wrangling yaml   curl making http requests   grep matching PCRE in the URL    The gh-curl script #!</description>
    </item>
    
    <item>
      <title>Didactic emacs-lisp macro example (ie. a tutorial)</title>
      <link>https://mullikine.github.io/posts/macro-tutorial/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/macro-tutorial/</guid>
      <description>In this tutorial we build a function b which allows you to run shell code within elisp syntax (it looks like emacs lisp).
This tutorial is useful for learning to write emacs-lisp macros but is also useful for understanding macros of any language.
First some prerequisite functions (defmacro shut-up-c (&amp;amp;rest body) &amp;#34;This works for c functions where shut-up does not.&amp;#34; `(let* ((inhibit-message t)) ,@body)) (defun get-dir () &amp;#34;Gets the current working directory.</description>
    </item>
    
    <item>
      <title>Getting arxiv in the terminal</title>
      <link>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</guid>
      <description>It all starts with this emacs plugin (require &amp;#39;biblio-arxiv) We create a bash script We name it arxiv-summary.
Cant name this &amp;lsquo;as&amp;rsquo; because it interferes with pip.
Sometimes packages installed wtih pip need the assembler.
#!/bin/bash export TTY # Collect history of all arxiv-summary invocations ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null last_arg=&amp;#34;${@: -1}&amp;#34; url=&amp;#34;$last_arg&amp;#34; set -- &amp;#34;${@:1:$(($#-1))}&amp;#34; # shift last arg # if pl &amp;#34;$url&amp;#34; | grep -q -P &amp;#39;^([a-z-]+/)?</description>
    </item>
    
    <item>
      <title>Reading YouTube rather than watching it</title>
      <link>https://mullikine.github.io/posts/reading-youtube-rather-than-watching-it/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-youtube-rather-than-watching-it/</guid>
      <description>It all starts with youtube-dl youtube-dl is a YouTube video downloader. You can install it with sudo pip install youtube-dl.
Let&amp;rsquo;s make some scripts Use the spaCy NLP library to semantically segregate sentences.
Segment-sentences #!/usr/bin/env python3.5 #!/usr/bin/env python3.6 # -*- coding: utf-8 -*- # python3.6 -m spacy download en import sys import spacy text = sys.stdin.read() nlp = spacy.load(&amp;#34;en&amp;#34;) doc = nlp(str(text)) for span in doc.sents: print(str(span)) clean-subs This script helps to make the subtitles very easy to read.</description>
    </item>
    
  </channel>
</rss>