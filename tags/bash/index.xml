<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bash on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/bash/</link>
    <description>Recent content in bash on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Jan 2017 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>String quoting utility</title>
      <link>https://mullikine.github.io/posts/string-quoting-utility/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/string-quoting-utility/</guid>
      <description>premise This perl script enables you to do code generation and intelligent &amp;lsquo;quoting&amp;rsquo; and &amp;lsquo;unquoting&amp;rsquo;.
examples While coding, it might be necessary to take a chunk of code and turn it into a string input
 1 2 3 4 5  getopts(&amp;#34;d:Jufnbthl&amp;#34;, \%options); if (defined $options{d}) { $delim = $options{d}; }  
pipe the input into the q script
1  cat | q   &amp;#34;getopts(\&amp;#34;d:Jufnbthl\&amp;#34;, \\%options);\n\nif (defined $options{d}) {\n $delim= $options{d};\n}&amp;#34; cmd script for bash code generation Basic version, without the q script.</description>
    </item>
    
  </channel>
</rss>