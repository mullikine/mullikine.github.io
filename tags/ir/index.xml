<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ir on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/ir/</link>
    <description>Recent content in ir on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 29 Oct 2020 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/ir/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Application to Canva</title>
      <link>https://mullikine.github.io/posts/application-to-canva/</link>
      <pubDate>Thu, 29 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/application-to-canva/</guid>
      <description>Work in progress
To Canva,
Please consider me for the position of Search Infrastructure Software Engineer.
&amp;hellip;
Yours sincerely,
Shane Mulligan
TODO Demonstrations 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  ** TODO Demonstrate *** Python *** AWS *** Solr *** ElasticSearch ** Responsibilities - Design, build out, and support our search platform – the Solr infrastructure, Solr application logic &amp;amp; Search relevance improvements - Work with the data-science to power and improve the discovery and search experiences across Canva - Ensuring that the millions of public assets that Canva stores are searchable &amp;amp; the right content is delivered to the user at the right time - Work cross-functionally with the various platform, technology, and product teams to build out the next generation of high-availability and scalable search capability - Build and maintain internal tooling for logging, monitoring, load testing, alerting and reporting needs for our search infrastructure - Developing solutions you’ve designed from the ground up through from conception to deployment into production - Performance in debugging, benchmarking, and addressing Identifying and addressing performance bottlenecks Canva’s search infrastructure - Design meetings; code reviews; mentoring new starters; technical interviews; and contributing to growing the team ** Required Skills and Background - Five-plus (5+) years of commercial software development experience writing high-performance production-quality code in Python and Bash (experience with Java is a plus, but not required) - Extensive experience with Apache Solr or ElasticSearch - Experience developing complex cloud-based search applications and infrastructure at scale - Broad knowledge of Cloud (AWS), Networking, and OS (Linux) concepts, services, and best practices - Firmly grounded computer science and engineering fundamentals including concurrency, multithreading, data structures, solution design, architecture, and design patterns - Be self-driven, able to take ownership of projects, and be able to think in terms of systems, process, and business value, not just technology   Search engines Croogle Demonstration of CroogleRTC Search Engine - YouTube</description>
    </item>
    
    <item>
      <title>searching for libraries in emacs with libraries.io</title>
      <link>https://mullikine.github.io/posts/searching-for-libraries-in-emacs-with-libraries-io/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/searching-for-libraries-in-emacs-with-libraries-io/</guid>
      <description>Summary I&amp;rsquo;d like to search for libraries using libraries.io, but not have to leave emacs.
Demonstration 
Add to eww&amp;rsquo;s URL handling hook to download the actual code 
Code Define an engine-mode engine 1 2 3  (defengine libraries &amp;#34;https://libraries.io/search?q=%s&amp;#34; :keybinding &amp;#34;/&amp;#34;)   Create the function to clean up the page after loading in eww 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  (defun clean-up-libraries-io () (interactive) (beginning-of-buffer) (toggle-read-only) (cua-set-mark) (search-forward &amp;#34;------&amp;#34;) (forward-line) (forward-char) (delete-selected) (end-of-buffer) (cua-set-mark) (re-search-backward &amp;#34;^License&amp;#34;) (previous-line) (delete-selected) (beginning-of-buffer) (toggle-read-only)) (add-to-list &amp;#39;eww-patchup-url-alist &amp;#39;(&amp;#34;://libraries.</description>
    </item>
    
    <item>
      <title>grep.app inside emacs</title>
      <link>https://mullikine.github.io/posts/grep-app-inside-emacs/</link>
      <pubDate>Sun, 23 Aug 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/grep-app-inside-emacs/</guid>
      <description>Summary grep.app is a free web app that lets you perform full-text search on GitHub code, using regex to match content, file paths and repository names.
The problem I&amp;rsquo;d like to make this more convenient by searching and obtaining example code all within emacs.
 emacs&amp;rsquo; eww-mode doesn&amp;rsquo;t support javascript. I&amp;rsquo;d like to present the website in a usable form &amp;ndash; code snippets cleaned up. I&amp;rsquo;d like to automate the process of searching so that it doesn&amp;rsquo;t require any typing.</description>
    </item>
    
    <item>
      <title>Rosetta stones for commands and code</title>
      <link>https://mullikine.github.io/posts/rosetta-stones-for-commands-and-code/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/rosetta-stones-for-commands-and-code/</guid>
      <description>Setup commands 1 2 3 4 5 6 7 8  cd $NOTES/ws/rosetta-stones/windows-vs-linux url2org &amp;#34;https://www.lemoda.net/windows/windows2unix/windows2unix.html&amp;#34; &amp;gt; lemoda.net.org cd $NOTES/ws/rosetta-stones/shell elinks-dump &amp;#34;https://hyperpolyglot.org/shell&amp;#34; &amp;gt; hyperpolyglot.txt cd $NOTES/ws/rosetta-stones/lisp elinks-dump &amp;#34;https://hyperpolyglot.org/lisp&amp;#34; &amp;gt; hyperpolyglot.txt   TUI 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null topic=&amp;#34;$1&amp;#34; shift cd $NOTES/ws/rosetta-stones test -n &amp;#34;$topic&amp;#34; || topic=&amp;#34;$(find .</description>
    </item>
    
    <item>
      <title>Common search functions in emacs</title>
      <link>https://mullikine.github.io/posts/common-search-functions-in-emacs/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/common-search-functions-in-emacs/</guid>
      <description>The plan Create bindings to query natural language models for suggestions  Generate relevant natural language queries  guru99 project management 1 2 3 4  (defun my-egr-guru99 (query) (interactive (list (read-string &amp;#34;egr:&amp;#34; &amp;#34;guru99 &amp;#34;))) ;; (sps (concat &amp;#34;eww &amp;#34; (q (car (str2list (sn (concat &amp;#34;gl &amp;#34; (q query)))))))) (eww (car (str2list (sn (concat &amp;#34;gl &amp;#34; (q query)))))))   
github repositories  Search google Download Browse</description>
    </item>
    
    <item>
      <title>Review of &#39;Counting inversions via rank queries | blog :: Brent -&gt; [String]&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-counting-inversions-via-rank-queries-blog-brent-string/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-counting-inversions-via-rank-queries-blog-brent-string/</guid>
      <description>Original article Counting inversions via rank queries | blog :: Brent -&amp;gt; String   Count the number of inversions of a sequence in \(O(n \lg n)\)  inversion Given a sequence \(a_1, a_2, \dots, a_n\) , an inversion is a pair of positions \(i, j\) such that \(a_i\) and \(a_j\) are in the “wrong order”, that is, \(i &amp;lt; j\) but \(a_i &amp;gt; a_j\) .  There can be up to \(n(n-1)/2\) inversions in the worst case, so we cannot hope to count them in faster than quadratic time by simply incrementing a counter.</description>
    </item>
    
    <item>
      <title>Reading 23.12.19</title>
      <link>https://mullikine.github.io/posts/reading-23.12.19/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-23.12.19/</guid>
      <description>AI NLP  Language Engineering; Harnessing the Power of Language Google AI Blog: ALBERT: A Lite BERT for Self-Supervised Learning of Language Representations  Computer Vision  ObjectNet  Automated testing  Cucumber | Tools &amp;amp; techniques that elevate teams to greatness Writing Features - Gherkin Language - Behat 2.5.3 documentation  Information Retrieval  Why databases use ordered indexes but programming uses hash tables (evanjones.ca)  Programming languages haskell parsers  An introduction to parsing text in Haskell with Parsec - Nick.</description>
    </item>
    
    <item>
      <title>Browsing sqlite3 databases with edbi for emacs</title>
      <link>https://mullikine.github.io/posts/browsing-databases-with-emacs-edbi/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/browsing-databases-with-emacs-edbi/</guid>
      <description>Set up edbi 1 2  # for emacs edbi cpan install DBD::SQLite   Create the scripts select-database 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } is_tty istty=$?</description>
    </item>
    
    <item>
      <title>Review of &#39;Indexing Billions of Text Vectors&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-indexing-billions-of-text-vectors/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-indexing-billions-of-text-vectors/</guid>
      <description>A New Search Engine  Original article A New Search Engine  Building a search engine from scratch  Original article Building a search engine from scratch  Indexing Billions of Text Vectors  Original article Indexing Billions of Text Vectors  A frequently occurring IR problem Finding similar pieces of text.
A query in this context can either be a user- generated one, (i.e. the piece of text that a user enters into a search engine), or a synthetic one generated by us.</description>
    </item>
    
    <item>
      <title>Shortcomings of classical search engines</title>
      <link>https://mullikine.github.io/posts/shortcomings-of-search-engines/</link>
      <pubDate>Fri, 22 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/shortcomings-of-search-engines/</guid>
      <description>https://arxiv.org/pdf/1710.05649.pdf
Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  relevance feedback Feature of some IR systems. Take the results that are initially returned from a given query, to gather user feedback, and to use information about whether or not those results are relevant to perform a new query. Three types of feedback: - explicit feedback, - implicit feedback, and - blind feedback.</description>
    </item>
    
    <item>
      <title>Deconstructing the Cocomel search engine</title>
      <link>https://mullikine.github.io/posts/deconstructing-cocomel/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/deconstructing-cocomel/</guid>
      <description>This is my attempt to understand Vaughan Kitchen&amp;rsquo;s search engine.
 Source code https://github.com/vkitchen/cocomel Related articles Entropy, Cross-Entropy and KL-Divergence // Bodacious Blog \
An example information retrieval problem  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  red-black tree RBT [self-balancing binary search tree] Each node of the binary tree has an extra bit, and that bit is often interpreted as the color of the node.</description>
    </item>
    
    <item>
      <title>Searching awesome lists for curated web browsing</title>
      <link>https://mullikine.github.io/posts/curated-surfing/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/curated-surfing/</guid>
      <description>Here I demonstrate searching through and reading lists of things from the command line.
I ran into some issues with the googlesearch pip module It seems to have been taken down from pip.
I changed my script to use emacs&amp;rsquo; eww browser to scrape the results instead eww is pretty reliable.
Demonstration Please be patient as I bypass the problem above.

Some search results from the demonstration above 1 2 3 4 5 6 7 8  http://linear.</description>
    </item>
    
    <item>
      <title>Blogs and Vlogs</title>
      <link>https://mullikine.github.io/posts/blogs-and-vlogs/</link>
      <pubDate>Mon, 14 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/blogs-and-vlogs/</guid>
      <description>Blogs and vlogs These people have been influential to me.
2019    source type url Topics     Math4IQB vlog Math4IQB - YouTube Information Theory   Gwern Bransen blog GPT-2 Neural Network Poetry Gwern.net Haskell, NLP, R   Fabian Dablander blog Fabian Dablander - PhD Student Methods Statistics Math, statistics, latex   John Kitchen blog The Kitchin Research Group Emacs   John D.</description>
    </item>
    
    <item>
      <title>Searching hacker news</title>
      <link>https://mullikine.github.io/posts/searching-hacker-news/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/searching-hacker-news/</guid>
      <description>I create a script which can be used to search hacker news (or other sites) conveniently with title and contents queries.
1 2 3 4 5 6 7  eww &amp;#34;http://news.ycombinator.com&amp;#34; # How to search hacker news egr emacs site:news.ycombinator.com intitle:&amp;#34;email client&amp;#34; # terms -- title terms hn emacs -- email   Create the script hn 1 2 3 4 5 6  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null SITE=news.</description>
    </item>
    
    <item>
      <title>Tremendous Task: Searching for code on GitHub with BigQuery and GHTorrent</title>
      <link>https://mullikine.github.io/posts/github-search-with-bigquery/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/github-search-with-bigquery/</guid>
      <description>Searching GitHub for regular expression matches in code is a tremendous task.
Prerequisites Set up the bq command https://cloud.google.com/bigquery/docs/bq-command-line-tool
Lots of money Sample search About US$5 per search.
This is cheaper than searching all files.
   shell variable function     $query a regular expression that searches the contents of files   $path_re a regex that matches on the file path   $path_re_exclude a regex that matches on the file path for pruning results    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #standardSQL SELECT sample_repo_name, sample_path, (SELECT STRING_AGG(snip) FROM snippets.</description>
    </item>
    
    <item>
      <title>Research: Accessing Repository Hosting Services</title>
      <link>https://mullikine.github.io/posts/accessing-repository-hosting-services/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/accessing-repository-hosting-services/</guid>
      <description>Questions/Answers  Is Google Code [Search] still accessible through an API? No, The API is gone.  Look into software for accessing APIs GitHub API apt apt search github Results
libghc-github-dev/xenial 0.13.2-4build1 amd64 Haskell Github API libghc-github-doc/xenial,xenial 0.13.2-4build1 all Haskell Github API; documentation libghc-github-prof/xenial 0.13.2-4build1 amd64 Haskell Github API; profiling libraries  Common Lisp Github API  ```text cl-github-v3/xenial,xenial 20130312-1 all Common Lisp interface to the github V3 API ```  pip pip search github Results</description>
    </item>
    
    <item>
      <title>Research: Source Code Retrieval from Large Software Libraries</title>
      <link>https://mullikine.github.io/posts/source-code-retrieval-from-large-software-libraries/</link>
      <pubDate>Fri, 23 Mar 2018 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/source-code-retrieval-from-large-software-libraries/</guid>
      <description>External [[file:/home/shane/dump/home/shane/notes2018/uni/cosc/480-project_FY/research/Source Code Retrieval from Large Software Libraries for Automatic.pdf][SCR from LSL for ABL.pdf]]
reading +1 source code retrieval large ` # Chapter 1: Introduction ` reading +7 source code retrieval large ` # Chapter 2: Related Work ` reading +12 source code retrieval large ` # Chapter 3: Models for Document Retrieval ` reading +25 source code retrieval large ` # Chapter 4: Information Retrieval For Bug Localization ` reading +31 source code retrieval large ` # Chapter 5: Incorporating Version Histories In Ir-Based Bug Localization ` reading +51 source code retrieval large ` # Chapter 6: Assisting Code Search With Automatic Query Reformulation For Bug Localization ` reading +79 source code retrieval large ` # Chapter 7: Exploiting Source Code Proximity And Order With Markov Random Fields ` reading +109 source code retrieval large ` # Chapter 8: A Retrieval Engine For Bug Localization:Terrier+ ` reading +114 source code retrieval large ` # Chapter 9: Conclusions ` Aim Mine the defect and ifle modification related knowledge that is always buried in the software repositories and to incorporate this knowledge that is always buried</description>
    </item>
    
  </channel>
</rss>