<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>macros on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/macros/</link>
    <description>Recent content in macros on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Sep 2019 00:00:00 +1200</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/macros/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Convert hydra to regular bindings</title>
      <link>https://mullikine.github.io/posts/convert-hydra-to-regular-bindings/</link>
      <pubDate>Sat, 21 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/convert-hydra-to-regular-bindings/</guid>
      <description>The problem: which-key doesn&amp;rsquo;t work with hydra I had made a bunch of hydras which I would simply use as basic menu systems
This is a bit of an anti-pattern.
Hydras should only be used for creating temporary modes.
The solution: create a macro which converts the hydras into regular bindings Prerequisites (defun sed (command stdin) &amp;#34;wrapper around sed&amp;#34; (interactive) (setq stdin (str stdin)) (setq command (concat &amp;#34;sed &amp;#39;&amp;#34; (str command) &amp;#34;&amp;#39;&amp;#34;)) (sh-notty command stdin) ) The aim Wrap a defhydra with the convert-hydra-to-sslk macro to turn it into regular keybindings.</description>
    </item>
    
    <item>
      <title>Didactic emacs-lisp macro example (ie. a tutorial)</title>
      <link>https://mullikine.github.io/posts/macro-tutorial/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/macro-tutorial/</guid>
      <description>In this tutorial we build a function b which allows you to run shell code within elisp syntax (it looks like emacs lisp).
This tutorial is useful for learning to write emacs-lisp macros but is also useful for understanding macros of any language.
First some prerequisite functions (defmacro shut-up-c (&amp;amp;rest body) &amp;#34;This works for c functions where shut-up does not.&amp;#34; `(let* ((inhibit-message t)) ,@body)) (defun get-dir () &amp;#34;Gets the current working directory.</description>
    </item>
    
  </channel>
</rss>