<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>regex on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/regex/</link>
    <description>Recent content in regex on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jul 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/regex/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The best regex trick ever in different languages</title>
      <link>https://mullikine.github.io/posts/the-best-regex-trick-ever-in-different-languages/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/the-best-regex-trick-ever-in-different-languages/</guid>
      <description> Original article https://www.rexegg.com/regex-best-trick.html  The trick is a way to **match all except for &amp;hellip;** For example, Match Tarzan but not &amp;ldquo;Tarzan&amp;rdquo;.
emacs lisp 1 2 3 4 5 6  (let ((str1 &amp;#34;\&amp;#34;Tarzan\&amp;#34;&amp;#34;) (str2 &amp;#34;Tarzan&amp;#34;)) (when (string-match &amp;#34;\&amp;#34;Tarzan\&amp;#34;\\|\\(Tarzan\\)&amp;#34; str1) (message (concat &amp;#34;str1:&amp;#34; (match-string 1 str1)))) (when (string-match &amp;#34;\&amp;#34;Tarzan\&amp;#34;\\|\\(Tarzan\\)&amp;#34; str2) (message (concat &amp;#34;str2:&amp;#34; (match-string 1 str2)))))   &amp;#34;\&amp;#34;str2:Tarzan\&amp;#34;&amp;#34; </description>
    </item>
    
    <item>
      <title>Review of &#39;Khanlou | Regexes vs Combinatorial Parsing&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-khanlou-regexes-vs-combinatorial-parsing/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-khanlou-regexes-vs-combinatorial-parsing/</guid>
      <description>Original article Khanlou | Regexes vs Combinatorial Parsing  Work in progress
1 2  inscrutable Impossible to understand or interpret.    Regex  inscrutable not composable requires type interpretation    There&amp;rsquo;s actually not a lot in the original blog post.</description>
    </item>
    
    <item>
      <title>Review of &#39;grex - Rust&#39; - generate regex from test cases</title>
      <link>https://mullikine.github.io/posts/review-of-grex-rust/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-grex-rust/</guid>
      <description>Original article grex - Rust Code GitHub - pemistahl/grex: A command-line tool and library for generating regular expressions from user-provided test cases  Demonstration Fully automated 
Semi automated 
1 2 3  Thomas Bergersen - Avalanche (Female Vocals) - YouTube Thomas Bergersen - Our Destiny (Sun) - YouTube Thomas Bergersen - So Small - YouTube   1  ^Thomas Bergersen \- (?:Avalanche \(Female Vocals\)|(?:Our Destiny \(Sun\)|So Small)) \- YouTube$   emacs has a built-in which is far less powerful 1  (regexp-opt &amp;#39;(&amp;#34;alex&amp;#34; &amp;#34;albert&amp;#34; &amp;#34;alois&amp;#34; &amp;#34;bummer&amp;#34;))   &amp;#34;\&amp;#34;\\\\(?</description>
    </item>
    
    <item>
      <title>Rosie Pattern Matching Language (RPL)</title>
      <link>https://mullikine.github.io/posts/rosie-pattern-matching-language/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/rosie-pattern-matching-language/</guid>
      <description>Simple associativity and precedence rules All RPL operators are right-associative  expressions etc.  Binary operators have equal precedence in RPL bracket expressions Brackets behave very much like parentheses and braces.
It means that the expressions e1 â€¦ en can be any RPL expressions.
It means that extra layers of brackets around an expression do not change its meaning.
1 2 3 4 5 6 7 8  -- a sequence of expressions (the pliers ie.</description>
    </item>
    
  </channel>
</rss>