<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>complexity on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/complexity/</link>
    <description>Recent content in complexity on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/complexity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Revision of time and space complexity</title>
      <link>https://mullikine.github.io/posts/time-space-complexity/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/time-space-complexity/</guid>
      <description>Original articles How to analyze time complexity: Count your steps YourBasic Big O notation: definition and examples YourBasic O(n) Complexity. This notation can be used for both space and time T(n) Time complexity S(n) Space complexity O(log n) memory space  = W(n) :: Worst-case/slowest/most-inefficient complexity bound
 Θ(n) Upper + lower bound complexity Ω(n) Fastest/most efficient complexity bound  ∊ T(n) ∊ O(f(n)) means that T(n) doesn&amp;rsquo;t grow faster than f(n).</description>
    </item>
    
    <item>
      <title>Facebook interview prep</title>
      <link>https://mullikine.github.io/posts/facebook-interview-prep/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/facebook-interview-prep/</guid>
      <description>Facebook resources  https://www.facebook.com/careers/life/preparing-for-your-software-engineering-interview-at-facebook https://www.facebook.com/notes/facebook-engineering/get-that-job-at-facebook/10150964382448920 https://sites.google.com/site/steveyegge2/five-essential-phone-screen-questions http://cocoanuts.mobi/2014/08/03/facebook/ https://www.quora.com/How-should-I-prepare-for-a-software-engineer-interview-at-Facebook  You can review and practice Facebook problems, here:  https://www.careercup.com/page?pid=facebook-interview-questions https://codelab.interviewbit.com/registration/?type=professional  Own research  https://github.com/RehanSaeed/.NET-Big-O-Algorithm-Complexity-Cheat-Sheet https://github.com/joney000/Java-Competitive-Programming https://github.com/JBayona/Facebook-Interview-Coding https://github.com/Christopher-Hsieh/facebook-interview-prep  Questions about Operations (Network stuff) Big-O complexity    O(1)     O(log n)   O(n)   O(n log n)   O(nn), O(n^3)    If an algorithm increments each number in a list of length n, we might say: “This algorithm runs in O(n) time and performs O(1) work for each element”.</description>
    </item>
    
  </channel>
</rss>