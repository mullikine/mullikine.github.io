<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>polyglot on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/polyglot/</link>
    <description>Recent content in polyglot on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 21 Dec 2019 00:00:00 +1300</lastBuildDate><atom:link href="https://mullikine.github.io/tags/polyglot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning PureScript</title>
      <link>https://mullikine.github.io/posts/learning-purescript/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/learning-purescript/</guid>
      <description>Source material Read PureScript by Example | Leanpub \
GitHub - paf31/purescript-book: Sources for the PureScript book \
Hack for backward compatibility | OCaml vs Haskell  1  ewwlinks +/&amp;#34;1.1 Functional JavaScript&amp;#34; &amp;#34;https://leanpub.com/purescript/read#leanpub-auto-functional-javascript&amp;#34;   Type inference is supposed to be used as a tool.
Functional programming is great at:
 data analysis, parsing, compiler implementation, generic programming, parallelism  PureScript provides the ability to import existing JavaScript code, by providing types for its values and functions, and then to use those functions in regular PureScript code.</description>
    </item>
    
  </channel>
</rss>
