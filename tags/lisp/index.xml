<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lisp on Bodacious Blog</title>
    <link>http://mullikine.github.io/tags/lisp/</link>
    <description>Recent content in lisp on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jun 2020 00:00:00 +0800</lastBuildDate><atom:link href="http://mullikine.github.io/tags/lisp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Effective lisp string editing in emacs</title>
      <link>http://mullikine.github.io/posts/effective-lisp-string-editing-in-emacs/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>http://mullikine.github.io/posts/effective-lisp-string-editing-in-emacs/</guid>
      <description>Premise I wanted to edit strings in a more isolated and optimised environment for editing strings.
The best way to do so turned out to be a combination of buffer narrowing and switching to a new mode who&amp;rsquo;s sole purpose is to provide a generic mode for editing text and a key binding to widen the buffer again.
Create the major mode and the &amp;lsquo;edit string&amp;rsquo; function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  (defvar lispy-string-edit-mode-map (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap &amp;#34;lispy string&amp;#34;))) (define-key map (kbd &amp;#34;C-c &amp;#39;&amp;#34;) &amp;#39;lispy-edit-string) map)) (define-derived-mode lispy-string-edit-mode text-mode &amp;#34;lispy string&amp;#34; &amp;#34;Major mode for editing lisp strings&amp;#34;) (defun emacs-lisp-edit-string () (interactive) (if (and (lispy--buffer-narrowed-p) (major-mode-p &amp;#39;lispy-string-edit-mode)) (progn (cfilter &amp;#34;q -f&amp;#34;) (while (lispy--buffer-narrowed-p) (ignore-errors (call-interactively &amp;#39;recursive-widen))) (emacs-lisp-mode)) (if (lispy--in-string-p) (save-mark-and-excursion (progn (lispy-mark) (call-interactively &amp;#39;my/enter-edit-emacs) (lispy-string-edit-mode) (cfilter &amp;#34;uq&amp;#34;)))))) (defalias &amp;#39;lispy-edit-string &amp;#39;emacs-lisp-edit-string)   Demonstration Editing strings is so much easier now!</description>
    </item>
    
    <item>
      <title>Implementing operators from other languages in elisp</title>
      <link>http://mullikine.github.io/posts/implementing-operators-from-other-languages-in-elisp/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>http://mullikine.github.io/posts/implementing-operators-from-other-languages-in-elisp/</guid>
      <description>Ruby https://en.wikibooks.org/wiki/Ruby%5FProgramming/Syntax/Operators
||= (double pipe) http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html
Useful for initializing with default values.
   op explanation arity precedence association     \vert\vert\eq A \vert\vert\eq B assigns B to A iff A is nil or false Binary 15 Right    1 2 3 4 5 6 7 8  (defmacro ||= (sym value) &amp;#34;Idempotent assignment operator from Ruby&amp;#34; `(progn (if (not (variable-p &amp;#39;,sym)) (setq ,sym ,value)) ,sym)) (provide &amp;#39;my-operators)   &amp;amp;&amp;amp;\eq (double ampersand equals) http://www.</description>
    </item>
    
    <item>
      <title>Review of emacs distributions</title>
      <link>http://mullikine.github.io/posts/emacs-distributions/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>http://mullikine.github.io/posts/emacs-distributions/</guid>
      <description>All the distributions I use are overlaid with my own customisations to make them very similar to each other by making my own key bindings and hydras layer. They still retain their own peculiarities, but I have taken a decent portion of code from each distribution to form a common functionality layer.
I have over 1300 emacs plugins which all distributions share.
Spacemacs  Very good default keybindings. Great support for LSP.</description>
    </item>
    
    <item>
      <title>Generating combinations with zsh and common lisp</title>
      <link>http://mullikine.github.io/posts/combinations-in-common-lisp/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>http://mullikine.github.io/posts/combinations-in-common-lisp/</guid>
      <description>I will create a script named co that can be used to generate shell commands from lists, conveniently.
Demonstration 
Build the script combinations.cldescription>
    </item>
    
  </channel>
</rss>
