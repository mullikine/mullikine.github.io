<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/github/</link>
    <description>Recent content in github on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Oct 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Searching awesome lists for curated web browsing</title>
      <link>https://mullikine.github.io/posts/curated-surfing/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/curated-surfing/</guid>
      <description>Here I demonstrate searching through and reading lists of things from the command line.
I ran into some issues with the googlesearch pip module It seems to have been taken down from pip.
I changed my script to use emacs&amp;rsquo; eww browser to scrape the results instead eww is pretty reliable.
Demonstration Please be patient as I bypass the problem above.

Some search results from the demonstration above http://linear.</description>
    </item>
    
    <item>
      <title>Tremendous Task: Searching for code on GitHub with BigQuery and GHTorrent</title>
      <link>https://mullikine.github.io/posts/github-search-with-bigquery/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/github-search-with-bigquery/</guid>
      <description>Searching GitHub for regular expression matches in code is a tremendous task.
Prerequisites Set up the bq command https://cloud.google.com/bigquery/docs/bq-command-line-tool
Lots of money Sample search About US$5 per search.
This is cheaper than searching all files.
   shell variable function     $query a regular expression that searches the contents of files   $path_re a regex that matches on the file path   $path_re_exclude a regex that matches on the file path for pruning results    #standardSQL SELECT sample_repo_name, sample_path, (SELECT STRING_AGG(snip) FROM snippets.</description>
    </item>
    
    <item>
      <title>Fused effects</title>
      <link>https://mullikine.github.io/posts/fused-effects/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/fused-effects/</guid>
      <description>Original video &amp;ldquo;Building Haskell Programs with Fused Effects&amp;rdquo; by Patrick Thomson - YouTube  Part of the GitHub semantic code team.
Install fused-effects stack install fused-effects Slides fused-effects is  a library for building Haskell programs an effect system providing fused, scoped, higher-order algebraic effects. performant, production-quality software suitable for industrial use.  Today, we&amp;rsquo;ll&amp;hellip;  describe the status quo of building Haskell programs explore how this status quo can be limiting show how fused-effects can overcome these limitations pinpoint fused-effects&amp;rsquo;s position in the design space  How are we to build programs in Haskell?</description>
    </item>
    
    <item>
      <title>Curling the paged GitHub API</title>
      <link>https://mullikine.github.io/posts/curling-the-paged-github-api/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/curling-the-paged-github-api/</guid>
      <description>The GitHub API The GitHub API is useful for many things including running searches on issues, repositories and contributors.
It makes use of pagination and rate limiting.
We like the convenience of curl on the command line and don&amp;rsquo;t wish to learn another tool.
Therefore we make a wrapper script around curl to take care of authentication and pagination.
Tools used to build the gh-curl script:    Program Purpose     jq wrangling json   yq wrangling yaml   curl making http requests   grep matching PCRE in the URL    The gh-curl script #!</description>
    </item>
    
  </channel>
</rss>