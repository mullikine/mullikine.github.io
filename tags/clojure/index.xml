<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojure on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/clojure/</link>
    <description>Recent content in clojure on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 May 2021 00:00:00 +1200</lastBuildDate><atom:link href="https://mullikine.github.io/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Review of &#39;Solving Problems the Clojure Way - Rafal Dittwald - YouTube&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-solving-problems-the-clojure-way-rafal-dittwald-youtube/</link>
      <pubDate>Mon, 10 May 2021 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-solving-problems-the-clojure-way-rafal-dittwald-youtube/</guid>
      <description>Original video Solving Problems the Clojure Way - Rafal Dittwald - YouTube   1 2 3 4 5  mixing concerns Bad thing to do when object oriented programming. &amp;#34;you&amp;#39;re mixing concerns here&amp;#34;   fp minimise state Derive values Instead of extra state.
For example, in tic-tac-toe.
Derive what turn it is from the state of the grid, instead of keep track of the turn.
Copy [data] instead of mutate in-place Instead of changing data, copy the data structure.</description>
    </item>
    
    <item>
      <title>Open anything in Clojure</title>
      <link>https://mullikine.github.io/posts/open-anything-in-clojure/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/open-anything-in-clojure/</guid>
      <description>Summary I already have tooling to open anything in Python.
Aside from already being able to use that Python library in Clojure, I would like to implement the same type of thing in Clojure this time.
It will simply have handlers to open files, urls or other strings into useful clojure objects.
Resources  Code http://github.com/mullikine/open-in-clojure  Starting the project 1  new-project open-in-clojure clj   The Python project opy</description>
    </item>
    
    <item>
      <title>Zero-shot NLP in Clojure</title>
      <link>https://mullikine.github.io/posts/zero-shot-nlp-in-clojure/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/zero-shot-nlp-in-clojure/</guid>
      <description>Original article http://gigasquidsoftware.com/blog/2021/03/15/breakfast-with-zero-shot-nlp/ Code http://github.com/mullikine/zero-shot-nlp   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  (ns zero-shot-nlp.core (:gen-class) (:require [libpython-clj2.require :refer [require-python]] [libpython-clj2.python :as py :refer [py. py.. py.-]])) (require-python &amp;#39;[transformers :bind-ns]) (require &amp;#39;[clojure.pprint :as p]) (use &amp;#39;[clojure.java.shell :only [sh]]) ;; (in-ns &amp;#39;clojure.pprint) (defn -main &amp;#34;I classify stuff.&amp;#34; [&amp;amp; args] ;; import transformers; transformers.</description>
    </item>
    
    <item>
      <title>Building a Clojure environment in emacs</title>
      <link>https://mullikine.github.io/posts/building-a-clojure-environment-in-emacs/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/building-a-clojure-environment-in-emacs/</guid>
      <description>Summary  I install/learn some existing tooling I create some tools for missing functionality  Missing functionality  Google (semantic) search for clojure libaries / versions  clj-refactor.el lists all libraries on clojars, but you have to lexically select from that &amp;ldquo;web framework&amp;rdquo; should yield lists of web framework libraries   Require a library into a source file from the dependencies imported in project.clj  Install tools  https://github.com/clojure-emacs/clj-refactor.el  clj-refactor.</description>
    </item>
    
    <item>
      <title>Review of &#39;Goodbye YAML: Infrastructure as Code in Clojure - Eno Compton &amp; Tyler van Hensbergen - YouTube&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-goodbye-yaml-infrastructure-as-code-in-clojure-eno-compton-tyler-van-hensbergen-youtube/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-goodbye-yaml-infrastructure-as-code-in-clojure-eno-compton-tyler-van-hensbergen-youtube/</guid>
      <description>Original article Goodbye YAML: Infrastructure as Code in Clojure - Eno Compton &amp;amp; Tyler van Hensbergen - YouTube CDK Source https://github.com/aws/aws-cdk CDK Guide https://github.com/awsdocs/aws-cdk-guide CDK CLJ cdk-clj/examples at master Stedi/cdk-clj GitHub  Install 1  npm install -g aws-cdk   npm wrapper script additions  npm install -g should not be run as sudo, so with this I can install without breaking npm.   1 2 3 4 5 6 7 8  # https://stackoverflow.</description>
    </item>
    
    <item>
      <title>An exposition of racket languages</title>
      <link>https://mullikine.github.io/posts/an-exposition-of-racket-languages/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/an-exposition-of-racket-languages/</guid>
      <description>Firstly, add to emacs a way of selecting the racket language  Languages to add:  racket rackjure hackett sicp rash    Emacs lisp code 1  (&amp;#34;L&amp;#34; (hot-expand &amp;#34;&amp;lt;s&amp;#34; &amp;#34;racket-sublang&amp;#34;) &amp;#34;racket&amp;#34;)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  (defun hot-expand (str &amp;amp;optional mod header) &amp;#34;Expand org template. STR is a structure template string recognised by org like &amp;lt;s.</description>
    </item>
    
  </channel>
</rss>
