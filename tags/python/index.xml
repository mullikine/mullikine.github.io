<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/python/</link>
    <description>Recent content in python on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Nov 2020 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Suggesting new words for the glossary with KeyBERT and pytextrank</title>
      <link>https://mullikine.github.io/posts/suggesting-new-words-for-the-glossary-with-keybert-and-pytextrank/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/suggesting-new-words-for-the-glossary-with-keybert-and-pytextrank/</guid>
      <description>Demo: Adding to the glossary using suggested keyphrases 
Code Python pytextrank turned out to be more fit for purpose than KeyBERT.
The issue with KeyBERT is that it is more abstractive in creating keywords, suggesting keywords omitting stopwords, etc.. KeyBERT is good for finding topic keywords, but not great at finding extractive (as opposed to abstractive) keywords.
pytextrank
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  #!</description>
    </item>
    
    <item>
      <title>make-it-run, an expect script to automate fixing errors from running programs</title>
      <link>https://mullikine.github.io/posts/make-it-run-an-expect-script-to-automate-fixing-errors-from-running-programs/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/make-it-run-an-expect-script-to-automate-fixing-errors-from-running-programs/</guid>
      <description>Demo Run on a loop until the program works 1  while ! make-it-run pti38 &amp;#34;ModuleNotFoundError:.*&amp;#34; &amp;#34;tm -w -te sps -args pip-install-from-error&amp;#34;; do echo &amp;#34;Retrying&amp;#34;; done   
Code The invocation command 1  make-it-run pti38 &amp;#34;ModuleNotFoundError:.*&amp;#34; &amp;#34;sps pip-install-from-error&amp;#34;   shell make-it-run
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null # command c=&amp;#34;$1&amp;#34; # expect bad pattern e=&amp;#34;$2&amp;#34; # fix command fc=&amp;#34;$3&amp;#34; { test -z &amp;#34;$c&amp;#34; || test -z &amp;#34;$e&amp;#34; || test -z &amp;#34;$fc&amp;#34;; } &amp;amp;&amp;amp; exit 1 e=&amp;#34;$(p &amp;#34;$e&amp;#34; | sed &amp;#39;s/\([[`;$&amp;#34;]\)/\\\1/g&amp;#39;)&amp;#34; x -sh &amp;#34;$c&amp;#34; -w &amp;#34;expect {\n-re \&amp;#34;$e\&amp;#34; { set user_input \&amp;#34;\$expect_out(0,string)\&amp;#34;; set ret [exec $fc\&amp;#34;\$user_input\&amp;#34;]; exit 1; } default { interact; }; }&amp;#34;   py-import-to-package Use Google to guess what the pypi package name is from its import.</description>
    </item>
    
    <item>
      <title>Automating cookiecutter in emacs</title>
      <link>https://mullikine.github.io/posts/automating-cookiecutter-in-emacs/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-cookiecutter-in-emacs/</guid>
      <description>Demo 
Code  This does a few things.  It searches Google for a cookiecutter repo on GitHub It downloads the template and files it away nicely. It creates a new project directory. It creates a new project within the new project directory from the template and prompts interactively.     1 2 3 4 5 6 7  (defun my-github-search-and-clone-cookiecutter (query) (interactive (list (read-string-hist &amp;#34;cookiecutter query:&amp;#34;))) (let* ((url (fz (cl-sn (concat &amp;#34;upd glh cookiecutter &amp;#34; (q query) &amp;#34; | cat&amp;#34; ) :chomp t))) (dir (if url (gc url))) (name (if (and url dir) (read-string-hist &amp;#34;project name: &amp;#34; query)))) (if (and dir name) (term-sps (concat &amp;#34;CWD= zrepl cookiecutter &amp;#34; (q dir)) (new-project-dir name)))))   </description>
    </item>
    
    <item>
      <title>Fixing LSP for Python in emacs</title>
      <link>https://mullikine.github.io/posts/fixing-lsp-for-python-in-emacs/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/fixing-lsp-for-python-in-emacs/</guid>
      <description>TL;DR The documentation doesn&amp;rsquo;t appear in python mode.
I was using anaconda-mode to display documentation to alleviate the problem.
I found the problem in the way lsp-mode extracts documentation from the request.
Now it works.
I&amp;rsquo;ve also created a function my-lsp-get- hover-docs to create a new buffer from the documentation for the thing under the cursor.
As a side-effect of all of this, I&amp;rsquo;ve learned to create my own overlays.</description>
    </item>
    
    <item>
      <title>Trying out python libraries in emacs</title>
      <link>https://mullikine.github.io/posts/trying-out-python-libraries-in-emacs/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/trying-out-python-libraries-in-emacs/</guid>
      <description>Create a convenience script for creating temporary directories 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118  #!</description>
    </item>
    
    <item>
      <title>parsing c&#43;&#43; with python</title>
      <link>https://mullikine.github.io/posts/parsing-c-with-python/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/parsing-c-with-python/</guid>
      <description>Example https://pygccxml.readthedocs.io/en/master/examples/templates/example.html  C++ is notoriously difficult to parse.
parse-cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null stdin_exists() { ! [ -t 0 ] &amp;amp;&amp;amp; ! test &amp;#34;$(readlink /proc/$$/fd/0)&amp;#34; = /dev/null } if stdin_exists; then fp=&amp;#34;$(tf cpp)&amp;#34; set -- &amp;#34;$fp&amp;#34; &amp;#34;$@&amp;#34; exec &amp;lt;&amp;amp;1 fi fp=&amp;#34;$1&amp;#34; test -f &amp;#34;$fp&amp;#34; || exit 1 x -sh &amp;#34;parse-cpp.</description>
    </item>
    
    <item>
      <title>Updating Trigger Studio for Age of Empires II: DE</title>
      <link>https://mullikine.github.io/posts/ts-aoe2de/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/ts-aoe2de/</guid>
      <description>Credits Without the help of dderevjanik and KSneijders, this update would not be possible.
  dderevjanik
 http://dderevjanik.github.io/agescx/formatscx/#format    KSneijders
 https://github.com/KSneijders/AoE2ScenarioParser    Update: &amp;lt;2020-06-27 Sat&amp;gt; Using AoE2ScenarioParser by KSneijders Extract a trigger into JSON using the python library.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152  { &amp;#34;_TriggerObject__description&amp;#34;: &amp;#34;\u0000&amp;#34;, &amp;#34;_TriggerObject__short_description&amp;#34;: &amp;#34;\u0000&amp;#34;, &amp;#34;_name&amp;#34;: &amp;#34;StartYearCountdown\u0000&amp;#34;, &amp;#34;condition_order&amp;#34;: [ 0 ], &amp;#34;conditions&amp;#34;: [ { &amp;#34;ai_signal&amp;#34;: -1, &amp;#34;amount_or_quantity&amp;#34;: 0, &amp;#34;area_1_x&amp;#34;: -1, &amp;#34;area_1_y&amp;#34;: -1, &amp;#34;area_2_x&amp;#34;: -1, &amp;#34;area_2_y&amp;#34;: -1, &amp;#34;comparison&amp;#34;: -1, &amp;#34;condition_type&amp;#34;: 4, &amp;#34;inverted&amp;#34;: -1, &amp;#34;next_object&amp;#34;: -1, &amp;#34;object_group&amp;#34;: -1, &amp;#34;object_list&amp;#34;: 826, &amp;#34;object_type&amp;#34;: -1, &amp;#34;player&amp;#34;: 0, &amp;#34;py/object&amp;#34;: &amp;#34;AoE2ScenarioParser.</description>
    </item>
    
    <item>
      <title>Python property</title>
      <link>https://mullikine.github.io/posts/python-property/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-property/</guid>
      <description>Using regular attributes 1 2 3 4 5 6 7 8 9 10 11 12  class Student: def __init__(self, name, marks): self.name = name self.marks = marks self.gotmarks = self.name + &amp;#39; obtained &amp;#39; + self.marks + &amp;#39; marks&amp;#39; st = Student(&amp;#34;Jaki&amp;#34;, &amp;#34;25&amp;#34;) print(st.name) print(st.marks) print(st.gotmarks)   Using functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  class Student: def __init__(self, name, marks): self.</description>
    </item>
    
    <item>
      <title>management.py</title>
      <link>https://mullikine.github.io/posts/management-py/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/management-py/</guid>
      <description>Premise I was looking at this pastebin clone when I wanted to know what management.py was.
 Source code GitHub - HongyiFu/django-pastebin-clone: A pastebin clone done in Python with Django framework (no frontend)  Searching for management.py  Tools used  LSP emacs google stackoverflow     1  v +/&amp;#34;Encapsulate the logic of the django-admin and manage.py utilities.&amp;#34; &amp;#34;/usr/local/lib/python3.5/dist-packages/django/core/management/__init__.py&amp;#34;   These are handed off to a ManagementUtility instance, which has a .</description>
    </item>
    
    <item>
      <title>Review of &#39;Overview of python dependency management tools | model.predict&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-overview-of-python-dependency-management-tools-model-predict/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-overview-of-python-dependency-management-tools-model-predict/</guid>
      <description>Original article Overview of python dependency management tools | model.predict       Installing python packages Installing non-python packages Managing python versions Managing virtual environments Environment reproducibility     pip ✓ ✖*         venv       ✓     pyenv     ✓       conda ✓ ✓ ✓* ✓     pipenv (+pyenv) ✓ ✓   ✓ ✓   poetry (+pyenv) ✓ ✓   ✓ ✓   Docker * * * * ✓    Docker There&amp;rsquo;s no need for any virtual environment management since apps are isolated by design.</description>
    </item>
    
    <item>
      <title>Review of &#39;GitHub - DataBiosphere/toil: A scalable, efficient, cross-platform (Linux/macOS) and easy-to-use workflow engine in pure Python.&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-github-databiosphere-toil-a-scalable-efficient-cross-platform-linux-macos-and-easy-to-use-workflow-engine-in-pure-python/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-github-databiosphere-toil-a-scalable-efficient-cross-platform-linux-macos-and-easy-to-use-workflow-engine-in-pure-python/</guid>
      <description> Original article https://github.com/DataBiosphere/toil  </description>
    </item>
    
    <item>
      <title>Creating FUSE filesystems in Python</title>
      <link>https://mullikine.github.io/posts/fuse-filesystem-in-python/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/fuse-filesystem-in-python/</guid>
      <description>Options Python2 Python 2 is obsolete, so no.
https://gist.github.com/wettenhj/7019100
python-fuse $MYGIT/libfuse/python-fuse
fusepy Python3+ pyfilesystem2 + fusefs pyfilesystem2 does NOT create a virtual filesystem on its own.
You need fusefs to mount a pyfilesystem2 extension.
  https://pypi.org/project/fusefs/
  https://github.com/mirekys/fusefs
  https://pypi.org/project/fs/2.4.11/
  https://github.com/PyFilesystem/pyfilesystem2
  pyfuse https://github.com/nrclark/pyfuse
Install pyfilesystem2 and fusefs 1 2  py i fs py i fusefs   Using fusefs 1  fusefs &amp;lt;url&amp;gt; &amp;lt;mountpoint&amp;gt;   url is the pyFilesystem2 resource to be mounted, and may contain placeholders for such values as username, host, password, etc.</description>
    </item>
    
    <item>
      <title>Creating Infinitely Generated Text Adventures with DL LMs</title>
      <link>https://mullikine.github.io/posts/infinitely-generated-text-adventures/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/infinitely-generated-text-adventures/</guid>
      <description>Original article AI Dungeon 2: Creating Infinitely Generated Text Adventures with Deep Learning Language Models - Perception, Control, Cognition  For each action you type the model is fed the context sentence as well as the past N action- result pairs in its memory to generate the result.
We found N=8 to be a good amount of memory to feed the model.
Other times the model has difficulty keeping track of who is who, especially in dialogue.</description>
    </item>
    
    <item>
      <title>Setting up LSP with emacs (Go, Java, Python, Rust, C&#43;&#43;, Haskell, JS, TS, Ruby…)</title>
      <link>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description>Guides used https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/ https://github.com/emacs-lsp/lsp-java  1 2 3 4 5  Debug Adaptor Protocol DAP The LSP of debugging. https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website    State of languages with LSP in my own environment    Language LSP Working Fallback working Current user experience TabNine enabled REPL / Playground DAP (debug) Working Static analysis Complaints Custom LSP improvements     Go ✓ ✓ Amazing ✓ ✓  ✓ Go toolchain changes too quickly    Python ✓ ✓ Amazing ✓ ✓ ✓ ✓     Racket ✓ ✓ racket-mode Amazing  ✓  ✓     Java ✓ ✓ eclim Good ✓ ✓ (default) ✓ ✓ A little slow.</description>
    </item>
    
    <item>
      <title>Named Entity Recognition</title>
      <link>https://mullikine.github.io/posts/named-entity-recognition/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/named-entity-recognition/</guid>
      <description>Original article Named Entity Recognition with NLTK and SpaCy - Towards Data Science Code https://github.com/susanli2016/NLP-with-Python/blob/master/NER%5FNLTK%5FSpacy.ipynb My fork https://github.com/mullikine/NLP-with-Python/blob/master/NER%5FNLTK%5FSpacy.py Related articles Part of Speech Labels // Bodacious Blog  1  sp $MYGIT/susanli2016/NLP-with-Python/NER_NLTK_Spacy.py   Missing libraries 1 2 3 4 5  Resource averaged_perceptron_tagger not found. Please use the NLTK Downloader to obtain the resource: &amp;gt;&amp;gt;&amp;gt; import nltk &amp;gt;&amp;gt;&amp;gt; nltk.download(&amp;#39;averaged_perceptron_tagger&amp;#39;)   1 2 3  import nltk nltk.download(&amp;#39;averaged_perceptron_tagger&amp;#39;) # and then type &amp;#39;d&amp;#39; for download and install &amp;#39;punkt&amp;#39;   I had to do it again for this 1 2  import nltk nltk.</description>
    </item>
    
    <item>
      <title>click, a CLI library for python &#43; extending babel a bit more</title>
      <link>https://mullikine.github.io/posts/python-click/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-click/</guid>
      <description>Do I really need to learn yet another CLI library?
There are plenty of them.
https://codeburst.io/building-beautiful-command-line-interfaces-with-python-26c7e1bb54df
Click is actually very simple and straight forward.
It uses decorations to get things done.
Summary https://click.palletsprojects.com/en/7.x/
Click is a Python package for creating beautiful command line interfaces in a composable way with as little code as necessary.
It’s the “Command Line Interface Creation Kit”.
It’s highly configurable but comes with sensible defaults out of the box.</description>
    </item>
    
    <item>
      <title>Overview of Flask, Jinja2, templating engine</title>
      <link>https://mullikine.github.io/posts/jinja2/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/jinja2/</guid>
      <description>Original reading Jinja2 Explained in 5 Minutes! - codeburst  Demonstration working with a simple flask app 
Flask Example apps  https://github.com/greyli/flask-examples (4 months old) https://github.com/miguelgrinberg/flask-examples (6 years old)  greyli/flask-examples Hello world
$MYGIT/greyli/flask-examples/hello/app.py
https://github.com/greyli/flask-examples/blob/master/hello/app.py
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  # -*- coding: utf-8 -*- &amp;#34;&amp;#34;&amp;#34; :author: Grey Li (李辉) :url: http://greyli.</description>
    </item>
    
    <item>
      <title>Python environment</title>
      <link>https://mullikine.github.io/posts/python-environment/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-environment/</guid>
      <description>https://pipxproject.github.io/pipx/comparisons/
pyenv Makes it easy to install, manage, and switch between multiple Pythons.
1 2 3 4 5 6 7 8 9  # install a bunch of pythons pyenv install 3.8.0 pyenv install 3.7.4 pyenv install 3.6.9 pyenv install 2.7.16 pyenv install pypy3.6-7.1.1 # set the default python pyenv global 3.8.0   using pyenv Check which version is set and which are available 1  pyenv versions   * system (set by /home/shane/.</description>
    </item>
    
    <item>
      <title>Python library wordcloud, emacs library wordcloud</title>
      <link>https://mullikine.github.io/posts/python-library-wordcloud/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-library-wordcloud/</guid>
      <description>python wordcloud 
  emacs wordcloud   1375 emacs packages &amp;lt;emacs-packages.txt&amp;gt;</description>
    </item>
    
    <item>
      <title>Lispifying indent-based code</title>
      <link>https://mullikine.github.io/posts/lispify-indents/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/lispify-indents/</guid>
      <description>I would like to be able to take indent-based code and turn it into parenthesis-based code.
 Target languages:  YAML Python C++    Prototype in racket 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91  #lang racket ;; (require racket) ; or match individually.</description>
    </item>
    
    <item>
      <title>Golang slices vs Python slices</title>
      <link>https://mullikine.github.io/posts/golang-slices-vs-python-slices/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/golang-slices-vs-python-slices/</guid>
      <description>Golang slices are very limited.
Apart from its syntactic limitations, golang slice syntax also lacks in generics due to only being able to operate on golang slices.
Python, with its duck-typing is able to use slices on anything that&amp;rsquo;s a collection.
Demonstrate golang slices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import &amp;#34;fmt&amp;#34; func main() { intSlice := []int{1, 2, 3, 4, 5} fmt.</description>
    </item>
    
    <item>
      <title>Scalable Python and bottlenecks</title>
      <link>https://mullikine.github.io/posts/scalable-python-and-bottlenecks/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/scalable-python-and-bottlenecks/</guid>
      <description>Original article https://instagram-engineering.com/python-at-scale-strict-modules-c0bb9245c834     term description see     import-time when imports are executed     Sources of slowness import re from mywebframework import db, route VALID_NAME_RE = re.compile(&amp;#34;^[a-zA-Z0-9]+$&amp;#34;) @route(&amp;#39;/&amp;#39;) def home(): return &amp;#34;Hello World!&amp;#34; class Person(db.Model): name: str  top level scope defines &amp;ndash; regex compilation decorator with unknown behaviour class definition: runs code contained within base class may have a meta-class or __init_subclass__ method.</description>
    </item>
    
    <item>
      <title>Keyword extraction to analyse articles</title>
      <link>https://mullikine.github.io/posts/keyword-extraction/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/keyword-extraction/</guid>
      <description>sparsity [#text mining] Huge matrices are created based on word frequencies with many cells having zero values. This problem is called sparsity and is minimized using various techniques. Articles keyword extraction: nltk, sklearn Automated Keyword Extraction from Articles using NLP
kag datasets download benhamner/nips-papers textrank: numpy, spacy towardsdatascience.com/textrank-for-keyword-extraction-by-python-c0bae21bcec0
ngram, modified skip-gram, spacy Keywords Extraction with Ngram and Modified Skip-gram based on spaCy
TODO Turn the math4IQB lectures into keywords readsubs &amp;#34;https://www.</description>
    </item>
    
    <item>
      <title>Python data structures</title>
      <link>https://mullikine.github.io/posts/python-data-structures/</link>
      <pubDate>Fri, 12 Oct 2012 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-data-structures/</guid>
      <description>bidict https://bidict.readthedocs.io/en/master/basic-usage.html
ordereddict 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  import collections print(&amp;#39;dict :&amp;#39;, end=&amp;#39; &amp;#39;) d1 = {} d1[&amp;#39;a&amp;#39;] = &amp;#39;A&amp;#39; d1[&amp;#39;b&amp;#39;] = &amp;#39;B&amp;#39; d1[&amp;#39;c&amp;#39;] = &amp;#39;C&amp;#39; d1[&amp;#39;d&amp;#39;] = &amp;#39;D&amp;#39; d1[&amp;#39;e&amp;#39;] = &amp;#39;E&amp;#39; d2 = {} d2[&amp;#39;e&amp;#39;] = &amp;#39;E&amp;#39; d2[&amp;#39;d&amp;#39;] = &amp;#39;D&amp;#39; d2[&amp;#39;c&amp;#39;] = &amp;#39;C&amp;#39; d2[&amp;#39;b&amp;#39;] = &amp;#39;B&amp;#39; d2[&amp;#39;a&amp;#39;] = &amp;#39;A&amp;#39; print(d1 == d2) print(&amp;#39;OrderedDict:&amp;#39;, end=&amp;#39; &amp;#39;) d1 = collections.</description>
    </item>
    
  </channel>
</rss>