<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/python/</link>
    <description>Recent content in python on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang slices vs Python slices</title>
      <link>https://mullikine.github.io/posts/golang-slices-vs-python-slices/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/golang-slices-vs-python-slices/</guid>
      <description>Golang slices are very limited.
Apart from having syntactic limitations, I also think golang slices are severely lacking due to only being able to operate on golang slices.
Python, with its duck-typing is able to use slices on anything that&amp;rsquo;s a collection.
Demonstrate golang slices package main import &amp;#34;fmt&amp;#34; func main() { intSlice := []int{1, 2, 3, 4, 5} fmt.Printf(&amp;#34;Slice: %v\n&amp;#34;, intSlice) last := intSlice[len(intSlice)-1] fmt.Printf(&amp;#34;Last element: %v\n&amp;#34;, last) // Slices are inclusive:exclusive and unspecified LHS is 0  // This is 0 exclude 0  first := intSlice[:0] fmt.</description>
    </item>
    
    <item>
      <title>Lispifying indented-based code</title>
      <link>https://mullikine.github.io/posts/lispify-indents/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/lispify-indents/</guid>
      <description>I would like to be able to take indented-based code and turn it into parenthesis-based code.
 Target languages:  YAML Python C++   prototype in racket #lang racket ;; (require racket) ; or match individually. I think this is needed if I do not do C-c C-c. That&amp;#39;s correct ;; (require racket/match) ;; (require racket/list) (define (non-empty-string? s) (not (string=? s &amp;#34;&amp;#34;))) (define (string-&amp;gt;lines s) (filter non-empty-string? (regexp-match* #rx&amp;#34;[^\n]*&amp;#34; s))) (define (indentation-level s) (for/first ([c s] [i (in-naturals)] #:unless (char=\?</description>
    </item>
    
    <item>
      <title>Setting up LSP with emacs (2nd attempt)</title>
      <link>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description> guide https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/  </description>
    </item>
    
    <item>
      <title>Scalable Python and bottlenecks</title>
      <link>https://mullikine.github.io/posts/scalable-python-and-bottlenecks/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/scalable-python-and-bottlenecks/</guid>
      <description>Original article https://instagram-engineering.com/python-at-scale-strict-modules-c0bb9245c834     term description see     import-time when imports are executed     Sources of slowness import re from mywebframework import db, route VALID_NAME_RE = re.compile(&amp;#34;^[a-zA-Z0-9]+$&amp;#34;) @route(&amp;#39;/&amp;#39;) def home(): return &amp;#34;Hello World!&amp;#34; class Person(db.Model): name: str  top level scope defines &amp;ndash; regex compilation decorator with unknown behaviour class definition: runs code contained within base class may have a meta-class or __init_subclass__ method.</description>
    </item>
    
    <item>
      <title>Keyword extraction to analyse articles</title>
      <link>https://mullikine.github.io/posts/keyword-extraction/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/keyword-extraction/</guid>
      <description>sparsity [#text mining] Huge matrices are created based on word frequencies with many cells having zero values. This problem is called sparsity and is minimized using various techniques. Articles keyword extraction: nltk, sklearn Automated Keyword Extraction from Articles using NLP
kag datasets download benhamner/nips-papers textrank: numpy, spacy towardsdatascience.com/textrank-for-keyword-extraction-by-python-c0bae21bcec0
ngram, modified skip-gram, spacy Keywords Extraction with Ngram and Modified Skip-gram based on spaCy
TODO Turn the math4IQB lectures into keywords readsubs &amp;#34;https://www.</description>
    </item>
    
  </channel>
</rss>