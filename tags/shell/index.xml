<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/shell/</link>
    <description>Recent content in shell on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 02 Jun 2021 00:00:00 +1200</lastBuildDate><atom:link href="https://mullikine.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Useful POSIX shell functions: cmd and myeval</title>
      <link>https://mullikine.github.io/posts/missing-posix-shell-functions-cmd-and-myeval/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/missing-posix-shell-functions-cmd-and-myeval/</guid>
      <description>Summary I talk about two shell scripts I frequently use to simplify the handling of arguments, quotations, spaces and escape codes within shell scripts.
They are POSIX-compliant and are so useful I think they should be a builtins.
 See also https://mullikine.github.io/posts/string-quoting-utility/  The string-quoting utility is used to make a script that handles double quotes. That is out of scope of this article.
Demo cmd 1  cmd echo &amp;#34;hello &amp;#39;&amp;#39;&amp;#39;&amp;#39;\&amp;#34;simon&amp;#34; thanks for lunch   &amp;#39;echo&amp;#39; &amp;#39;hello &amp;#39;\&amp;#39;&amp;#39;&amp;#39;\&amp;#39;&amp;#39;&amp;#39;\&amp;#39;&amp;#39;&amp;#39;\&amp;#39;&amp;#39;&amp;#34;simon&amp;#39; &amp;#39;thanks&amp;#39; &amp;#39;for&amp;#39; &amp;#39;lunch&amp;#39; myeval has the inverse action to cmd 1  myeval cmd cmd &amp;#34;hello &amp;#39;&amp;#39;&amp;#39;&amp;#39;\&amp;#34;simon&amp;#34; thanks for lunch   &amp;#39;cmd&amp;#39; &amp;#39;hello &amp;#39;\&amp;#39;&amp;#39;&amp;#39;\&amp;#39;&amp;#39;&amp;#39;\&amp;#39;&amp;#39;&amp;#39;\&amp;#39;&amp;#39;&amp;#34;simon&amp;#39; &amp;#39;thanks&amp;#39; &amp;#39;for&amp;#39; &amp;#39;lunch&amp;#39; On the first round, the double quotes are converted to single quotes.</description>
    </item>
    
    <item>
      <title>Cartesian Product</title>
      <link>https://mullikine.github.io/posts/cartesian-product/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/cartesian-product/</guid>
      <description>Summary Generating the Cartesian Product of multiple lists is very useful for iteration and exhausting their combinations.
One might use the Cartesian Product when constructing a test matrix, or when generating code.
I will generate the Cartesian Product in as many languages as I can.
Plan  Add implementations for more languages Make it optionally recursive  Implement nested lists (not just multi-list) for each language Treat a non-list as a list of length 1 Sometimes you don&amp;rsquo;t want the Cartesian Product to be recursive because you may want to deal in lists rather than merely strings or ints.</description>
    </item>
    
    <item>
      <title>make-it-run, an expect script to automate fixing errors from running programs</title>
      <link>https://mullikine.github.io/posts/make-it-run-an-expect-script-to-automate-fixing-errors-from-running-programs/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/make-it-run-an-expect-script-to-automate-fixing-errors-from-running-programs/</guid>
      <description>Demo Run on a loop until the program works 1  while ! make-it-run pti38 &amp;#34;ModuleNotFoundError:.*&amp;#34; &amp;#34;tm -w -te sps -args pip-install-from-error&amp;#34;; do echo &amp;#34;Retrying&amp;#34;; done   
Code The invocation command 1  make-it-run pti38 &amp;#34;ModuleNotFoundError:.*&amp;#34; &amp;#34;sps pip-install-from-error&amp;#34;   shell make-it-run
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null # command c=&amp;#34;$1&amp;#34; # expect bad pattern e=&amp;#34;$2&amp;#34; # fix command fc=&amp;#34;$3&amp;#34; { test -z &amp;#34;$c&amp;#34; || test -z &amp;#34;$e&amp;#34; || test -z &amp;#34;$fc&amp;#34;; } &amp;amp;&amp;amp; exit 1 e=&amp;#34;$(p &amp;#34;$e&amp;#34; | sed &amp;#39;s/\([[`;$&amp;#34;]\)/\\\1/g&amp;#39;)&amp;#34; x -sh &amp;#34;$c&amp;#34; -w &amp;#34;expect {\n-re \&amp;#34;$e\&amp;#34; { set user_input \&amp;#34;\$expect_out(0,string)\&amp;#34;; set ret [exec $fc\&amp;#34;\$user_input\&amp;#34;]; exit 1; } default { interact; }; }&amp;#34;   py-import-to-package Use Google to guess what the pypi package name is from its import.</description>
    </item>
    
    <item>
      <title>Generating elisp functions interactively to wrap shell commands</title>
      <link>https://mullikine.github.io/posts/generating-elisp-functions-interactively-to-wrap-shell-commands/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/generating-elisp-functions-interactively-to-wrap-shell-commands/</guid>
      <description>Required functions This is needed to provide history and to allow you to enter the empty string to completing-read.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  (defun completing-read-hist (prompt &amp;amp;optional histvar initial-input) &amp;#34;read-string but with history.&amp;#34; (if (not histvar) (setq histvar (str2sym (concat &amp;#34;completing-read-hist-&amp;#34; (slugify prompt) (if initial-input (concat &amp;#34;-&amp;#34; initial-input) &amp;#34;&amp;#34;))))) (initvar histvar) (if (and (not initial-input) (listp histvar)) (setq initial-input (first histvar))) (eval `(progn ;; (str (completing-read ,prompt ,histvar nil nil initial-input &amp;#39;,histvar nil)) (let ((inhibit-quit t)) (or (with-local-quit (let ((completion-styles ;; &amp;#39;(basic partial-completion emacs22) &amp;#39;(basic))) (str (ivy-completing-read-with-empty-string-def ,prompt ,histvar nil nil initial-input &amp;#39;,histvar nil))) ;; (str (helm-comp-read ,prompt ,histvar :initial-input ,initial-input :must-match nil :history ,histvar :input-history &amp;#39;,histvar)) ) &amp;#34;&amp;#34;)))))   Generator code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  (defun join-args-for-command (args &amp;amp;optional forcequotes) (s-join &amp;#34; &amp;#34; (mapcar (if forcequotes &amp;#39;q &amp;#39;s/q) args))) (defun gen-command-from-shell-command (command &amp;amp;rest arguments-defaults) &amp;#34;Generates an interactive command from a list of argument names of an external command&amp;#34; (interactive (let* ((exe (fz (list-executables))) (args-defaults-string (read-string-hist (concat &amp;#34;gencom: &amp;#34; exe &amp;#34; &amp;#34;))) (args-defaults-list-string (str2list (cl-sn (concat &amp;#34;cmd2lines &amp;#34; args-defaults-string) :chomp t)))) `(,exe ,@args-defaults-list-string))) (let* ( ;; Construct/Reconstruct args-string (args-defaults-string (join-args-for-command arguments-defaults)) (args-defaults-list-tuples (mapcar (lambda (s) (let ((ss (s-split &amp;#34;=&amp;#34; s))) (cons (first ss) (second ss)))) arguments-defaults)) (args-list (mapcar &amp;#39;car args-defaults-list-tuples)) (defaults-list (mapcar &amp;#39;cdr args-defaults-list-tuples)) (slug-list (mapcar &amp;#39;slugify args-list)) (slug-defaults-tuples-list (mapcar* &amp;#39;cons slug-list defaults-list)) ;; These are defaults for an interactive invocation, not for a normal function invocation (defaults-list (cl-loop for s in slug-defaults-tuples-list collect (cons (car s) (or (cdr s) (read-string-hist (concat &amp;#34;gencom: &amp;#34; command &amp;#34;.</description>
    </item>
    
    <item>
      <title>An exposition of racket languages</title>
      <link>https://mullikine.github.io/posts/an-exposition-of-racket-languages/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/an-exposition-of-racket-languages/</guid>
      <description>Firstly, add to emacs a way of selecting the racket language  Languages to add:  racket rackjure hackett sicp rash    Emacs lisp code 1  (&amp;#34;L&amp;#34; (hot-expand &amp;#34;&amp;lt;s&amp;#34; &amp;#34;racket-sublang&amp;#34;) &amp;#34;racket&amp;#34;)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  (defun hot-expand (str &amp;amp;optional mod header) &amp;#34;Expand org template. STR is a structure template string recognised by org like &amp;lt;s.</description>
    </item>
    
    <item>
      <title>Browsing GNU less without killing tail: tail, using unbuffer and trap</title>
      <link>https://mullikine.github.io/posts/tail-unbuffer-and-trap/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/tail-unbuffer-and-trap/</guid>
      <description>tail, unbuffer and trap are 3 things which are useful together.
tail usually stops reading if it receives SIGINT, which is created by pressing C-c.
C-c is useful to be pressed inside less to prevent it from reading so you can navigate what has entered so far.
unbuffer -p disables output buffering for grep.
You can also use sed -u instead of grep but then you have to consider escaping.</description>
    </item>
    
    <item>
      <title>Pipifying interactive programs</title>
      <link>https://mullikine.github.io/posts/pipifying-programs/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/pipifying-programs/</guid>
      <description>Related articles semi-automated interactive stream editing: piping through expect and emacs // Bodacious Blog Complex Dwarf Fortress macros with tcl/expect, emacs and tmux // Bodacious Blog  Glossary of made-up words 1 2 3 4 5 6 7 8 9 10 11  pipable pipability The ability of a CLI program to accept stdin and emit stdout. pipifying pipification Adding pipability to a CLI program; particularly, ones which by having a TUI are seemingly precluded from being pipable.</description>
    </item>
    
    <item>
      <title>★ semi-automated interactive stream editing: piping through expect and emacs ★</title>
      <link>https://mullikine.github.io/posts/semi-automated-stream-editing-piping-through-expect-and-emacs/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/semi-automated-stream-editing-piping-through-expect-and-emacs/</guid>
      <description>Here, the eipe2 script wraps around emacsclient to enable myself to intercept the traffic of a bash pipeline and edit it mid-command. It&amp;rsquo;s modelled after vipe.
But that is only half the trick. I then do the same for tcl/expect. On its own, expect can&amp;rsquo;t edit the stream, but by placing an eipe2 within the expect script I can complete the pipeline, automating emacs with expect.
But that is not the most awesome part.</description>
    </item>
    
    <item>
      <title>Keyboard macros in GNU Ranger</title>
      <link>https://mullikine.github.io/posts/macros-in-gnu-ranger/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/macros-in-gnu-ranger/</guid>
      <description>Ranger does not have a build-in keyboard macro mechanism, but you can use tmux for this.
Create the tm-send-slow command 1 2 3 4 5 6 7 8  #!/bin/bash export TTY string=&amp;#34;$1&amp;#34; grep -o . &amp;lt;&amp;lt;&amp;lt; &amp;#34;$string&amp;#34; | while IFS=$&amp;#39;\n&amp;#39; read -r char; do tmux send -l &amp;#34;$char&amp;#34; done   Create the mapping 1  map F. shell -f tm-send-slow FFf   Demonstration</description>
    </item>
    
    <item>
      <title>Review of &#39;Haskell for all: Use Haskell for shell scripting&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-haskell-for-all-use-haskell-for-shell-scripting-/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-haskell-for-all-use-haskell-for-shell-scripting-/</guid>
      <description>Original article Haskell for all: Use Haskell for shell scripting   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #!/usr/bin/env runhaskell {-# LANGUAGE OverloadedStrings #-} import Turtle main = do cd &amp;#34;/tmp&amp;#34; mkdir &amp;#34;test&amp;#34; output &amp;#34;test/foo&amp;#34; &amp;#34;Hello, world!&amp;#34; -- Write &amp;#34;Hello, world!&amp;#34; to &amp;#34;test/foo&amp;#34; stdout (input &amp;#34;test/foo&amp;#34;) -- Stream &amp;#34;test/foo&amp;#34; to stdout rm &amp;#34;test/foo&amp;#34; rmdir &amp;#34;test&amp;#34; sleep 1 die &amp;#34;Urk!&amp;#34;   Hello, world!</description>
    </item>
    
    <item>
      <title>A makeshift template processor in bash</title>
      <link>https://mullikine.github.io/posts/makeshift-template-processor/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/makeshift-template-processor/</guid>
      <description>1  echo -n &amp;#34;Hi &amp;lt;name&amp;gt;. How are you?&amp;#34; | tl -name Shane   This is similar to python f-strings 1 2 3  name = &amp;#34;Eric&amp;#34; age = 74 print(f&amp;#34;Hello, {name}. You are {age}.&amp;#34;)   Hello, Eric. You are 74. In fact, I should make an f-strings-based utility.
Build the replace-substring script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!</description>
    </item>
    
    <item>
      <title>Generating combinations with zsh and common lisp</title>
      <link>https://mullikine.github.io/posts/combinations-in-common-lisp/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/combinations-in-common-lisp/</guid>
      <description>I will create a script named co that can be used to generate shell commands from lists, conveniently.
Demonstration 
Build the script combinations.cldescription>
    </item>
    
    <item>
      <title>Generating help for bash scripts</title>
      <link>https://mullikine.github.io/posts/help-for-bash-scripts/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/help-for-bash-scripts/</guid>
      <description>The point of creating the help command in this way is that you may enter you command, add a -h, and help will be displayed for the parameters entered.
When ready to run the command properly, you simply re-run without the -h.
Help function, scrapes the script for help arguments and presents them 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  help() { # Run help for argument # For each argument, gen the full argument line while [ $# -gt 0 ]; do opt=&amp;#34;$1&amp;#34;; case &amp;#34;$opt&amp;#34; in &amp;#34;&amp;#34;) { shift; }; ;; -*) { cat &amp;#34;$0&amp;#34; | sed -n &amp;#34;/^\(\s\+$opt\b\|.</description>
    </item>
    
    <item>
      <title>List IPs with SSH port on the current network</title>
      <link>https://mullikine.github.io/posts/list-ips-for-current-network/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/list-ips-for-current-network/</guid>
      <description>While demonstrating for the DCBC School of CS, somebody often asks me what their IP address is for their Raspberry Pi.
I will run a script to scan for IP addresses with an SSH port and then log into the RBP one by one with the default password until I find one that has their files.
Recap: CIDR Glossary 1 2 3 4 5 6 7 8 9  Classless inter-domain routing CIDR A set of Internet protocol (IP) standards that is used to create unique identifiers for networks and individual devices.</description>
    </item>
    
    <item>
      <title>Generate emacs functions from CLI commands</title>
      <link>https://mullikine.github.io/posts/generate-emacs-functions-from-cli-commands/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/generate-emacs-functions-from-cli-commands/</guid>
      <description>Prerequisite reading Didactic emacs-lisp macro example (ie. a tutorial) // Bodacious Blog  Define the commands 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  (defmacro defshellfilter (&amp;amp;rest body) &amp;#34;Define a new string filter function based on a shell command&amp;#34; (let* (;; (s (str2sym (concat &amp;#34;sh/&amp;#34; (sym2str (first body))))) (base (slugify (list2string body) t)) (sm (str2sym (concat &amp;#34;sh/m/&amp;#34; base))) (sf (str2sym (concat &amp;#34;sh/&amp;#34; base))) (sfptw (str2sym (concat &amp;#34;sh/ptw/&amp;#34; base)))) `(progn (defmacro ,sm (&amp;amp;rest body) `(bp ,@&amp;#39;,body ,@body)) (defun ,sf (&amp;amp;rest body) (eval `(bp ,@&amp;#39;,body ,@body))) ;; This last one is the thing the function returns.</description>
    </item>
    
    <item>
      <title>Generic paths for toolchains</title>
      <link>https://mullikine.github.io/posts/generic-path-for-blockchains/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/generic-path-for-blockchains/</guid>
      <description>I downloaded the latest version of the clang compiler today and I didn&amp;rsquo;t know where to put it.
I didn&amp;rsquo;t want to set up paths for a single toolchain and have to do it again in the future.
This was my hack. It works. Use this 1 2 3 4 5 6 7 8  for d in /usr/local/toolchains/*; do export PATH=$d/bin:${PATH} export LIBRARY_PATH=$d/lib:${LIBRARY_PATH} export LD_LIBRARY_PATH=$d/lib:${LD_LIBRARY_PATH} export C_INCLUDE_PATH=$d/include:${C_INCLUDE_PATH} export CPLUS_INCLUDE_PATH=$d/include:${CPLUS_INCLUDE_PATH} export MANPATH=&amp;#34;$d/share/man:$MANPATH&amp;#34; done   I extracted clang+llvm-9.</description>
    </item>
    
    <item>
      <title>Automating tcl/expect</title>
      <link>https://mullikine.github.io/posts/automating-expect/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-expect/</guid>
      <description>Using tmux, expect and bash I made a script which you can use to automate practically anything on the command line in an easy way.
 Related articles semi-automated interactive stream editing: piping through expect and emacs // Bodacious Blog Complex Dwarf Fortress macros with tcl/expect, emacs and tmux // Bodacious Blog Automating TOR and TPB // Bodacious Blog  Build the x scriptdescription>
    </item>
    
    <item>
      <title>Searching awesome lists for curated web browsing</title>
      <link>https://mullikine.github.io/posts/curated-surfing/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/curated-surfing/</guid>
      <description>Here I demonstrate searching through and reading lists of things from the command line.
I ran into some issues with the googlesearch pip module It seems to have been taken down from pip.
I changed my script to use emacs&#39; eww browser to scrape the results instead eww is pretty reliable.
Demonstration Please be patient as I bypass the problem above.

Some search results from the demonstration above 1 2 3 4 5 6 7 8  http://linear.</description>
    </item>
    
    <item>
      <title>Searching hacker news</title>
      <link>https://mullikine.github.io/posts/searching-hacker-news/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/searching-hacker-news/</guid>
      <description>I create a script which can be used to search hacker news (or other sites) conveniently with title and contents queries.
1 2 3 4 5 6 7  eww &amp;#34;http://news.ycombinator.com&amp;#34; # How to search hacker news egr emacs site:news.ycombinator.com intitle:&amp;#34;email client&amp;#34; # terms -- title terms hn emacs -- email   Create the script hn 1 2 3 4 5 6  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null SITE=news.</description>
    </item>
    
    <item>
      <title>Best emacs tetris in emacs 26&#43;</title>
      <link>https://mullikine.github.io/posts/emacs-tetris-nice/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-tetris-nice/</guid>
      <description>emacs 27 has an update to emacs&#39; tetris mode which makes the glyphs display larger on higher DPI screens.
This script will download that update from git.savannah.gnu.org and display tetris in a distraction free environment for the ultimate productivity.
Symlinks If you symlink this script to etetris-vt100 and run that instead, you will get the animated and striking black and white terminal version.
1  ln -s etetris etetris-vt100   If you symlink this script to etetris-xterm and run that instead, you will get the vivid color terminal version.</description>
    </item>
    
    <item>
      <title>Curling the paged GitHub API</title>
      <link>https://mullikine.github.io/posts/curling-the-paged-github-api/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/curling-the-paged-github-api/</guid>
      <description>The GitHub API The GitHub API is useful for many things including running searches on issues, repositories and contributors.
It makes use of pagination and rate limiting.
We like the convenience of curl on the command line and don&amp;rsquo;t wish to learn another tool.
Therefore we make a wrapper script around curl to take care of authentication and pagination.
Tools used to build the gh-curl script:    Program Purpose     jq wrangling json   yq wrangling yaml   curl making http requests   grep matching PCRE in the URL    The gh-curl script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140  #!</description>
    </item>
    
    <item>
      <title>Didactic emacs-lisp macro example (ie. a tutorial)</title>
      <link>https://mullikine.github.io/posts/macro-tutorial/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/macro-tutorial/</guid>
      <description>In this tutorial we build a function b which allows you to run shell code within elisp syntax (it looks like emacs lisp).
This tutorial is useful for learning to write emacs-lisp macros but is also useful for understanding macros of any language.
First some prerequisite functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  (defmacro shut-up-c (&amp;amp;rest body) &amp;#34;This works for c functions where shut-up does not.</description>
    </item>
    
    <item>
      <title>Getting arxiv in the terminal</title>
      <link>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</guid>
      <description>It all starts with this emacs plugin 1  (require &amp;#39;biblio-arxiv)   We create a bash script We name it arxiv-summary.
Cant name this &amp;lsquo;as&amp;rsquo; because it interferes with pip.
Sometimes packages installed wtih pip need the assembler.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!</description>
    </item>
    
    <item>
      <title>Reading YouTube rather than watching it</title>
      <link>https://mullikine.github.io/posts/reading-youtube-rather-than-watching-it/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-youtube-rather-than-watching-it/</guid>
      <description>It all starts with youtube-dl youtube-dl is a YouTube video downloader. You can install it with sudo pip install youtube-dl.
Let&amp;rsquo;s make some scripts Use the spaCy NLP library to semantically segregate sentences.
Segment-sentences 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #!/usr/bin/env python3.5 #!/usr/bin/env python3.6 # -*- coding: utf-8 -*- # python3.6 -m spacy download en import sys import spacy text = sys.</description>
    </item>
    
  </channel>
</rss>
