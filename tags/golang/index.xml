<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/golang/</link>
    <description>Recent content in golang on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang slices vs Python slices</title>
      <link>https://mullikine.github.io/posts/golang-slices-vs-python-slices/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/golang-slices-vs-python-slices/</guid>
      <description>Golang slices are very limited.
Apart from having syntactic limitations, I also think golang slices are severely lacking due to only being able to operate on golang slices.
Python, with its duck-typing is able to use slices on anything that&amp;rsquo;s a collection.
Demonstrate golang slices package main import &amp;#34;fmt&amp;#34; func main() { intSlice := []int{1, 2, 3, 4, 5} fmt.Printf(&amp;#34;Slice: %v\n&amp;#34;, intSlice) last := intSlice[len(intSlice)-1] fmt.Printf(&amp;#34;Last element: %v\n&amp;#34;, last) // Slices are inclusive:exclusive and unspecified LHS is 0  // This is 0 exclude 0  first := intSlice[:0] fmt.</description>
    </item>
    
  </channel>
</rss>