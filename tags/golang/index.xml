<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Bodacious Blog</title>
    <link>http://mullikine.github.io/tags/golang/</link>
    <description>Recent content in golang on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 00:00:00 +1300</lastBuildDate><atom:link href="http://mullikine.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang slices vs Python slices</title>
      <link>http://mullikine.github.io/posts/golang-slices-vs-python-slices/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>http://mullikine.github.io/posts/golang-slices-vs-python-slices/</guid>
      <description>Golang slices are very limited.
Apart from its syntactic limitations, golang slice syntax also lacks in generics due to only being able to operate on golang slices.
Python, with its duck-typing is able to use slices on anything that&amp;rsquo;s a collection.
Demonstrate golang slices 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  package main import &amp;#34;fmt&amp;#34; func main() { intSlice := []int{1, 2, 3, 4, 5} fmt.</description>
    </item>
    
  </channel>
</rss>
