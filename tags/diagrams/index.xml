<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>diagrams on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/diagrams/</link>
    <description>Recent content in diagrams on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 Mar 2021 00:00:00 +1300</lastBuildDate><atom:link href="https://mullikine.github.io/tags/diagrams/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Templating mermaid diagrams</title>
      <link>https://mullikine.github.io/posts/templating-mermaid-diagrams/</link>
      <pubDate>Thu, 11 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/templating-mermaid-diagrams/</guid>
      <description>Related mustache templating processor // Bodacious Blog  Summary I would like to place lengthy strings into mermaid diagram nodes, but I don&amp;rsquo;t want to worry about escaping characters or formatting the text.
I design a simple templating pipeline for automatically escaping text and inserting it into mermaid diagrams and also for working with mermaid graphs within emacs&#39; babel.
This is intended to make it trivial for me to develop large flowcharts with large amounts of text and special characters.</description>
    </item>
    
    <item>
      <title>Updating Trigger Studio for Age of Empires II: DE</title>
      <link>https://mullikine.github.io/posts/ts-aoe2de/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/ts-aoe2de/</guid>
      <description>Credits Without the help of dderevjanik and KSneijders, this update would not be possible.
  dderevjanik
 http://dderevjanik.github.io/agescx/formatscx/#format    KSneijders
 https://github.com/KSneijders/AoE2ScenarioParser    Update: &amp;lt;2020-06-27 Sat&amp;gt; Using AoE2ScenarioParser by KSneijders Extract a trigger into JSON using the python library.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152  { &amp;#34;_TriggerObject__description&amp;#34;: &amp;#34;\u0000&amp;#34;, &amp;#34;_TriggerObject__short_description&amp;#34;: &amp;#34;\u0000&amp;#34;, &amp;#34;_name&amp;#34;: &amp;#34;StartYearCountdown\u0000&amp;#34;, &amp;#34;condition_order&amp;#34;: [ 0 ], &amp;#34;conditions&amp;#34;: [ { &amp;#34;ai_signal&amp;#34;: -1, &amp;#34;amount_or_quantity&amp;#34;: 0, &amp;#34;area_1_x&amp;#34;: -1, &amp;#34;area_1_y&amp;#34;: -1, &amp;#34;area_2_x&amp;#34;: -1, &amp;#34;area_2_y&amp;#34;: -1, &amp;#34;comparison&amp;#34;: -1, &amp;#34;condition_type&amp;#34;: 4, &amp;#34;inverted&amp;#34;: -1, &amp;#34;next_object&amp;#34;: -1, &amp;#34;object_group&amp;#34;: -1, &amp;#34;object_list&amp;#34;: 826, &amp;#34;object_type&amp;#34;: -1, &amp;#34;player&amp;#34;: 0, &amp;#34;py/object&amp;#34;: &amp;#34;AoE2ScenarioParser.</description>
    </item>
    
    <item>
      <title>PlantUML</title>
      <link>https://mullikine.github.io/posts/plantuml/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/plantuml/</guid>
      <description>docker wrapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null stdin_exists() { ! [ -t 0 ] &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>Review of &#39;Tools for better thinking | Untools&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-tools-for-better-thinking-untools/</link>
      <pubDate>Fri, 29 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-tools-for-better-thinking-untools/</guid>
      <description>Original article Tools for better thinking | Untools  Issue trees - Problem solving https://untools.co/issue-trees
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  Issue trees Basically maps of problems. They give you a clear and systematic way of looking at the problem you need to solve. They help you break down a big problem into smaller, more manageable ones, and prioritize certain parts of the problem.</description>
    </item>
    
    <item>
      <title>Facebook initial interview prep</title>
      <link>https://mullikine.github.io/posts/facebook-interview-prep/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/facebook-interview-prep/</guid>
      <description>Interviews Coding Design Systems design Product design Behavioural Focus  5 core values   Be bold. Building great things means taking risks. We have a saying: “The riskiest thing is to take no risks.” In a world that’s changing so quickly, you’re guaranteed to fail if you don’t take any risks. We encourage everyone to make bold decisions, even if that means being wrong some of the time.
  Focus on impact.</description>
    </item>
    
    <item>
      <title>Review of &#39;mermaid - flowcharts, diagrams, etc.&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-mermaid-markdownish-syntax-for-generating-flowcharts-digrams/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-mermaid-markdownish-syntax-for-generating-flowcharts-digrams/</guid>
      <description>mermaid GitHub repo mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs. Online editor https://mermaid-js.github.io/mermaid-live-editor/ Cheat sheet Mermaid Cheat Sheet @ http://jojozhuang.github.io  Setup docker image I compiled this docker image myself as existing images on dockerhub were outdated.
https://github.com/matthewfeickert/mermaid-CLI
I bumped the mermaid version up from 8.2.6 to 8.4.4 because some of the examples were not working but I&amp;rsquo;m still not able to build some of the diagrams.</description>
    </item>
    
    <item>
      <title>Review of &#39;Control system network testing and verification - DNV GL&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-control-system-network-testing-and-verification-dnv-gl/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-control-system-network-testing-and-verification-dnv-gl/</guid>
      <description>Original article https://www.dnvgl.com/services/hil-testing-concept-explanation--83385  Instead of being connected to the actual equipment on the vessel, the control system is connected to a HIL simulator with sophisticated models of the vessel and its equipment.
This enables systematic and comprehensive testing of control system functionality and failure handling without risk to people, equipment or environment.
Accomplished by Facilitate systematic testing of control system:
 design philosophy, functionality, performance, and failure handling capability, both in normal and off-design operating conditions.</description>
    </item>
    
    <item>
      <title>introhaskell</title>
      <link>https://mullikine.github.io/posts/introhaskell/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/introhaskell/</guid>
      <description>Original article introhaskell  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  type variable Example: Given the type: a -&amp;gt; a -&amp;gt; a &amp;#39;a&amp;#39; is a type variable. ewwlinks +/&amp;#34;Type Variables&amp;#34; &amp;#34;https://cs.lmu.edu/~ray/notes/introhaskell/&amp;#34; We know [Char] and [Float] are two different types. So how do we speak about, or write functions that work on, lists of ANY type? Or tuples of any size, or any component type?</description>
    </item>
    
    <item>
      <title>Deconstructing the Cocomel search engine</title>
      <link>https://mullikine.github.io/posts/deconstructing-cocomel/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/deconstructing-cocomel/</guid>
      <description>This is my attempt to understand Vaughan Kitchen&amp;rsquo;s search engine.
 Source code https://github.com/vkitchen/cocomel Related articles Entropy, Cross-Entropy and KL-Divergence // Bodacious Blog \
An example information retrieval problem  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  red-black tree RBT [self-balancing binary search tree] Each node of the binary tree has an extra bit, and that bit is often interpreted as the color of the node.</description>
    </item>
    
    <item>
      <title>Graphviz and Hugo</title>
      <link>https://mullikine.github.io/posts/graphviz/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/graphviz/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph-ascii :async :results verbatim code  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ s1 ┃ ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ v ∘━━━━∘ #================================# ∘━━━━∘ ┃ s5 ┃ &amp;lt;━┄┄H low-priority H &amp;lt;━┄┄┃ s2 ┃ ∘━━━━∘ #================================# ∘━━━━∘ ^ ┃ ┃ ^ ┃ ┃ wait-time exceeded ┃ ┃ ┃ v ┃ ┃ ┃ #=====================# ┃ ∘━━━━∘ ∘━━━━━━┄┄H high-priority H ┃ ┃ s3 ┃ #=====================# ┃ ∘━━━━∘ ┃ ┃ ┃ ┃ v ┃ ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ s4 ┃ &amp;lt;∘ ∘━━━━━━━━━━━━━━━━━━━━━∘   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph priority :async :results raw drawer  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph-ascii-lr :async :results verbatim code  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ∘━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ ┃ ∘━━━━∘ #==============# wait-time exceeded #===============# ∘━━━━∘ ┃ ┃ s1 ┃ ━━&amp;gt; H H ━━━━━━━━━━━━━━━━━━━━&amp;gt; H high-priority H ━━&amp;gt; ┃ s4 ┃ ┃ ∘━━━━∘ H H #===============# ∘━━━━∘ ┃ H H ^ ┃ H low-priority H ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━∘ ┃ H H ┃ ∘━━━━∘ H H ∘━━━━━━━━━━━━━━━∘ ┃ ┃ s2 ┃ ━━&amp;gt; H H &amp;lt;━━━━━━━━━━━━━━━━━━━┄┄┃ s3 ┃ ┃ ∘━━━━∘ #==============# ∘━━━━━━━━━━━━━━━∘ ┃ ┃ ┃ ┃ ┃ v ┃ ∘━━━━━━━━━━━━━━∘ ∘━━━━━━━━━━-&amp;gt; ┃ s5 ┃ ∘━━━━━━━━━━━━━━∘   1 2 3 4 5 6 7 8 9  &amp;#34;Back&amp;#34; [shape=&amp;#34;egg&amp;#34; color=&amp;#34;green&amp;#34; style=&amp;#34;filled&amp;#34; fillcolor=&amp;#34;yellow&amp;#34;]; &amp;#34;Forth&amp;#34; [shape=&amp;#34;house&amp;#34; color=&amp;#34;red&amp;#34;]; &amp;#34;Other&amp;#34; [shape=&amp;#34;invtriangle&amp;#34; color=&amp;#34;blue&amp;#34;]; &amp;#34;Back&amp;#34; -&amp;gt; &amp;#34;Forth&amp;#34; [color=&amp;#34;orange&amp;#34; label=&amp;#34;weee&amp;#34;]; &amp;#34;Forth&amp;#34; -&amp;gt; &amp;#34;Back&amp;#34; [color=&amp;#34;purple&amp;#34; label=&amp;#34;eeew&amp;#34;]; &amp;#34;Other&amp;#34; -&amp;gt; &amp;#34;Forth&amp;#34; &amp;#34;Other&amp;#34; -&amp;gt; &amp;#34;Back&amp;#34;     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  subgraph clusterEncoders { style = filled fillcolor = lightgrey node [style=filled,fillcolor=lightgrey,shape=circle]; label = &amp;#34;Set of encoders&amp;#34; subgraph clusterEncoder1 { fillcolor = white label = &amp;#34;Encoder 1&amp;#34;; f1[label=&amp;#34;FFNN&amp;#34;] a1[label=&amp;#34;Self-Attention layer&amp;#34;] a1 -&amp;gt; f1 } subgraph clusterEncoder2 { fillcolor = white label = &amp;#34;Encoder 2&amp;#34;; f2[label=&amp;#34;FFNN&amp;#34;] a2[label=&amp;#34;Self-Attention layer&amp;#34;] a2 -&amp;gt; f2 } subgraph clusterEncoderN { fillcolor = white label = &amp;#34;Encoder N&amp;#34;; etc [label=&amp;#34;.</description>
    </item>
    
    <item>
      <title>Compounding Confoundment: arbitrary interpreters for Babel</title>
      <link>https://mullikine.github.io/posts/arbitrary-interpreters-for-babel/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/arbitrary-interpreters-for-babel/</guid>
      <description>Genesis 11:7 “&amp;hellip;Come, let us go down and confuse their language so they will not understand each other.” If supporting many languages in Babel was not confounding enough, lets support arbitrary interpreters too!  The need to specify a custom interpreter arose when I needed to provide my own interpreter for generating an ASCII graph from a dot script.
Objective Specify an :interpreter and/or :filter command to override the execute behaviour.</description>
    </item>
    
    <item>
      <title>The Illustrated Transformer</title>
      <link>https://mullikine.github.io/posts/review-of-the-illustrated-transformer/</link>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-the-illustrated-transformer/</guid>
      <description>Original article https://jalammar.github.io/illustrated-transformer/ Source https://github.com/tensorflow/tensor2tensor  Prereading https://jalammar.github.io/illustrated-word2vec/
Helpful glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  Multilayer perceptron Feed-Forward Neural Network FFNN Basically, these are multi-level logistic regression classifiers.</description>
    </item>
    
    <item>
      <title>Kalman Filter</title>
      <link>https://mullikine.github.io/posts/sp-kalman-filter/</link>
      <pubDate>Sun, 20 Jan 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/sp-kalman-filter/</guid>
      <description>Components of a Kalman Filter    Term Rank Describes Description     \(A_t\) Matrix \((n × n)\) state change Describes how the state evolves from \(t - 1\) to \(t\) without controls or noise.   \(B_t\) Matrix \((n × l)\) control change Describes how the control \(u_t\) changes the state from \(t - 1\) to \(t\).   \(C_t\) Matrix \((k × n)\) maps state to observation Describes how to map the state \(x_t\), to an observation \(z_t\).</description>
    </item>
    
  </channel>
</rss>
