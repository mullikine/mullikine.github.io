<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>automation on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/automation/</link>
    <description>Recent content in automation on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Jan 2020 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/automation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>★ Automating rat, a powerful productivity tool ★</title>
      <link>https://mullikine.github.io/posts/rat/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/rat/</guid>
      <description>Source https://github.com/ericfreese/rat Tweaks :: https://github.com/mullikine/rat  I remember seeing this a few years ago but at the time I was too much of a noob.
Just recently I was playing around with docker commands when I realised it would be perfectly suited for rapidly putting together a TUI.
Update rat to use go modules The project was a little too old to build without some tweaking.

Create the rap wrapper script Setting TERM is important because rat does not recognise eterm-256color.</description>
    </item>
    
    <item>
      <title>Creating an emacs mode for asciinema.org</title>
      <link>https://mullikine.github.io/posts/an-emacs-mode-for-asciinema-playback/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/an-emacs-mode-for-asciinema-playback/</guid>
      <description>Related articles Hacker News mode and minor modes for websites // Bodacious Blog  This blog is about creating a minor mode for browsing asciinema.org and extending eww-mode to handle the video links.
I use tmux from emacs to spawn a new window that starts the playback when a link is clicked.
Demonstration Here, I use the asciinema mode for browsing and opening asciinema recordings from my blog.</description>
    </item>
    
    <item>
      <title>★ semi-automated interactive stream editing: piping through expect and emacs ★</title>
      <link>https://mullikine.github.io/posts/semi-automated-stream-editing-piping-through-expect-and-emacs/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/semi-automated-stream-editing-piping-through-expect-and-emacs/</guid>
      <description>Here, the eipe2 script wraps around emacsclient to enable myself to intercept the traffic of a bash pipeline and edit it mid-command. It&amp;rsquo;s modelled after vipe.
But that is only half the trick. I then do the same for tcl/expect. On its own, expect can&amp;rsquo;t edit the stream, but by placing an eipe2 within the expect script I can complete the pipeline, automating emacs with expect.
But that is not the most awesome part.</description>
    </item>
    
    <item>
      <title>Permalinks for substrings in various documents</title>
      <link>https://mullikine.github.io/posts/getting-permalinks-for-substrings-in-man-pages-urls-and-other-files/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/getting-permalinks-for-substrings-in-man-pages-urls-and-other-files/</guid>
      <description>The idea is I select some text and press g y and emacs or vim will provide me with a command to go to that section of that file.
example usage of results 1  emacshelp +/&amp;#34;Major modes specialize Emacs for editing or interacting with particular&amp;#34; &amp;#34;(elisp) Major Modes&amp;#34;   1  ewwlinks +/&amp;#34;\* When ~~ is pressed, the Expect interpreter runs interactively.\&amp;#34;&amp;#34; &amp;#34;https://wiki.tcl-lang.org/page/interact&amp;#34;   1  man +/&amp;#34;For example, here are some things Expect can do:&amp;#34; &amp;#34;expect(1)&amp;#34;   emacs functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  (defun get-path (&amp;amp;optional soft) (interactive) ;; (xc-m (s/rp (buffer-file-name))) (or (and (eq major-mode &amp;#39;Info-mode) (if soft (concat &amp;#34;(&amp;#34; (basename Info-current-file) &amp;#34;) &amp;#34; Info-current-node) (concat Info-current-file &amp;#34;.</description>
    </item>
    
    <item>
      <title>Automating build systems for many languages</title>
      <link>https://mullikine.github.io/posts/build-systems/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/build-systems/</guid>
      <description>Related reading (more information) Languages supported by my development environment // Bodacious Blog  I have automated my interaction with these build tools.
This list does not include my emacs environment; it&amp;rsquo;s not even close to being exhaustive.
   name language example     aribtrary dotfiles (many) * .compton.conf. Kill and restart compton   make * list and fuzzy select targets then run them   pip, setup.</description>
    </item>
    
    <item>
      <title>★ Complex Dwarf Fortress macros with tcl/expect, emacs and tmux ★</title>
      <link>https://mullikine.github.io/posts/dwarf-fortress-macros-with-emacs-and-tmux/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dwarf-fortress-macros-with-emacs-and-tmux/</guid>
      <description>Related articles minor mode wrappers for shell commands // Bodacious Blog  Here I make an emacs mode for Dwarf Fortress and create some keybindings in emacs which runs a generated tcl/expect script over Dwarf Fortress using tmux to attach itself to the tty inside term- mode.
Write the emacs lisp This macro creates minor modes from a list of shell command names.
These shell commands may be arbitrary terminal programs.</description>
    </item>
    
    <item>
      <title>minor mode wrappers for shell commands</title>
      <link>https://mullikine.github.io/posts/minor-mode-wrappers-for-shell-commands/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/minor-mode-wrappers-for-shell-commands/</guid>
      <description>Related article Taming term-mode // Bodacious Blog  Summary Basically, I am creating a program-agnostic method of rebinding keys.
Given an arbitrary shell command, such as mc (midnight commander), I can create my own keybindings and macros for this program as if I was customising an emacs mode.
It&amp;rsquo;s all part of trying to control everything from emacs.
More specifically, this article is about creating buffer-local minor modes which are enabled only for specific commands started through term-mode.</description>
    </item>
    
    <item>
      <title>Using vim as a stream editor</title>
      <link>https://mullikine.github.io/posts/vim-as-a-stream-editor/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/vim-as-a-stream-editor/</guid>
      <description>vim is considered to be more of a language than an editor.
Why not use all those vim bindings as macros for a stream editor? Then you can play out the motions in your head, which is more natural than formulating an awk script.
For example 1 2  ci -t 86400 elinks-dump &amp;#34;https://next-episode.net/supernatural&amp;#34; | edm -m &amp;#34;/Countdown:\&amp;lt;CR&amp;gt;jj\&amp;#34;ayyGdgg\&amp;#34;aP&amp;#34; | s efs   1 day 19 hours Demonstration</description>
    </item>
    
    <item>
      <title>Interactively loading GHCi commands</title>
      <link>https://mullikine.github.io/posts/interactively-loading-ghci-commands/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/interactively-loading-ghci-commands/</guid>
      <description>I&amp;rsquo;d like to be able to load commands into ghci and have the commands verbosely printed.
Likely you have a lot of .ghci files 1  locate .ghci   Case in point This file is actually a .ghci file as it contains commands such as :t (&amp;gt;)
https://github.com/bishboria/learnyouahaskell/blob/master/02/2%5Ftypes.hs
I created an expect script for this purpose using my expect-generation script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  hs|ghci) { cmd=&amp;#34;$1&amp;#34; shift if stdin_exists; then tfin=&amp;#34;$(cat | tf txt)&amp;#34; inpara=&amp;#34;-sf $(aqf &amp;#34;$tfin&amp;#34;)&amp;#34; else : ${cmd:=&amp;#34;foldl (/) 64 [4,2,4]&amp;#34;} fi # x -cd &amp;#34;$(pwd)&amp;#34; -sh &amp;#34;ghci&amp;#34; -r &amp;#34;^.</description>
    </item>
    
    <item>
      <title>Coding faster with Deep TabNine</title>
      <link>https://mullikine.github.io/posts/using-deep-tabnine/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-deep-tabnine/</guid>
      <description>Example of using Deep TabNine to write with example code</description>
    </item>
    
    <item>
      <title>Automating tcl/expect</title>
      <link>https://mullikine.github.io/posts/automating-expect/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-expect/</guid>
      <description>Using tmux, expect and bash I made a script which you can use to automate practically anything on the command line in an easy way.
 Related articles semi-automated interactive stream editing: piping through expect and emacs // Bodacious Blog Complex Dwarf Fortress macros with tcl/expect, emacs and tmux // Bodacious Blog Automating TOR and TPB // Bodacious Blog  Build the x scriptdescription>
    </item>
    
  </channel>
</rss>