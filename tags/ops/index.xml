<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ops on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/ops/</link>
    <description>Recent content in ops on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Dec 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/ops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>minor mode wrappers for shell commands</title>
      <link>https://mullikine.github.io/posts/minor-mode-wrappers-for-shell-commands/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/minor-mode-wrappers-for-shell-commands/</guid>
      <description>Related article Taming term-mode // Bodacious Blog  Summary Basically, I am creating a program-agnostic method of rebinding keys.
Given an arbitrary shell command, such as mc (midnight commander), I can create my own keybindings and macros for this program as if I was customising an emacs mode.
It&amp;rsquo;s all part of trying to control everything from emacs.
More specifically, this article is about creating buffer-local minor modes which are enabled only for specific commands started through term-mode.</description>
    </item>
    
    <item>
      <title>Nix language</title>
      <link>https://mullikine.github.io/posts/nix-language/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/nix-language/</guid>
      <description>Original article Nix Pills - basics-of-language Nix Expression Language - NixOS Wiki  1 2 3 4 5 6 7 8 9 10 11 12 13 14  Nix language Nix expression language A pure, lazy, functional language. Not a full-featured, general purpose language. Functions are “normal” values that can be passed around and manipulated in interesting ways. Its main job is to describe packages, compositions of packages, and the variability within packages.</description>
    </item>
    
    <item>
      <title>Review of &#39;BPF: A New Type of Software&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-bpf-a-new-type-of-software/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-bpf-a-new-type-of-software/</guid>
      <description>Original article BPF: A New Type of Software  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  KProbes A debugging mechanism for the Linux kernel which can also be used for monitoring events inside a production system.</description>
    </item>
    
    <item>
      <title>Creating FUSE filesystems in Python</title>
      <link>https://mullikine.github.io/posts/fuse-filesystem-in-python/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/fuse-filesystem-in-python/</guid>
      <description>Options Python2 Python 2 is obsolete, so no.
https://gist.github.com/wettenhj/7019100
python-fuse $MYGIT/libfuse/python-fuse
fusepy Python3+ pyfilesystem2 + fusefs pyfilesystem2 does NOT create a virtual filesystem on its own.
You need fusefs to mount a pyfilesystem2 extension.
 https://pypi.org/project/fusefs/ https://github.com/mirekys/fusefs
 https://pypi.org/project/fs/2.4.11/
 https://github.com/PyFilesystem/pyfilesystem2
  pyfuse https://github.com/nrclark/pyfuse
Install pyfilesystem2 and fusefs 1 2  py i fs py i fusefs   Using fusefs 1  fusefs &amp;lt;url&amp;gt; &amp;lt;mountpoint&amp;gt;   url is the pyFilesystem2 resource to be mounted, and may contain placeholders for such values as username, host, password, etc.</description>
    </item>
    
    <item>
      <title>Access logging for systemd service file command</title>
      <link>https://mullikine.github.io/posts/log-service-command/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/log-service-command/</guid>
      <description>Find a service file 1  le service | v   1  v /etc/systemd/system/multi-user.target.wants/ssh.service   It&amp;rsquo;s aliased to:
1  v /etc/systemd/system/sshd.service   nvi 1  v /etc/systemd/system/multi-user.target.wants/nvi.service   1  journalctl -u nvi   -- Logs begin at Thu 2019-12-12 21:51:53 NZDT, end at Fri 2019-12-13 18:25:01 NZDT. -- Dec 12 21:51:54 morgan systemd[1]: Starting Recover nvi edit sessions.... Dec 12 21:51:54 morgan recover[1085]: Recovering nvi editor sessions.</description>
    </item>
    
  </channel>
</rss>