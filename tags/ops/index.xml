<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ops on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/ops/</link>
    <description>Recent content in ops on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Nov 2020 00:00:00 +1300</lastBuildDate><atom:link href="https://mullikine.github.io/tags/ops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Automating a little bit of termshark and htop using tcl/expect</title>
      <link>https://mullikine.github.io/posts/automating-a-little-bit-of-termshark-and-htop/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-a-little-bit-of-termshark-and-htop/</guid>
      <description>Synopsis I want to be able to start a search from the command line. This will be faster than remembering the obscure bindings for both terminal user interfaces.
Demonstration htop 
termshark 
Code htop The last parameter will be considered to be a search filter, if it is doesn&amp;rsquo;t look like an option.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #!</description>
    </item>
    
    <item>
      <title>Using mitmproxy with proxychains to inspect http traffic</title>
      <link>https://mullikine.github.io/posts/using-mitmproxy-with-proxychains-to-inspect-http-traffic/</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-mitmproxy-with-proxychains-to-inspect-http-traffic/</guid>
      <description>Synopsis With mitmproxy it is possible to inspect live applications for their http traffic. This is useful for reverse-engineering APIs, among other purposes. Proxychains allows you to run an application through a proxy, even if the applications doesn&amp;rsquo;t directly support proxies. It doesn&amp;rsquo;t work for every application you might try, but it&amp;rsquo;s still quite handy.
Demonstration 
Automate the process further mitm
1 2 3 4 5 6 7 8  #!</description>
    </item>
    
    <item>
      <title>Review of &#39;Highly available Kubernetes with batteries for small business - CINAQ&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-highly-available-kubernetes-with-batteries-for-small-business-cinaq/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-highly-available-kubernetes-with-batteries-for-small-business-cinaq/</guid>
      <description>Original article Highly available Kubernetes with batteries for small business - CINAQ  Plan  Build this:  Highly available (where possible) Ingress with LetsEncrypt NFS central storage Cluster that scales Monitoring with Prometheus, Grafana and Loki    Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  ingress https://kubernetes.</description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>https://mullikine.github.io/posts/ansible/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/ansible/</guid>
      <description>Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  task role Tower Red Hat Ansible Tower Extend Ansible Automation.</description>
    </item>
    
    <item>
      <title>Browsing GNU less without killing tail: tail, using unbuffer and trap</title>
      <link>https://mullikine.github.io/posts/tail-unbuffer-and-trap/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/tail-unbuffer-and-trap/</guid>
      <description>tail, unbuffer and trap are 3 things which are useful together.
tail usually stops reading if it receives SIGINT, which is created by pressing C-c.
C-c is useful to be pressed inside less to prevent it from reading so you can navigate what has entered so far.
unbuffer -p disables output buffering for grep.
You can also use sed -u instead of grep but then you have to consider escaping.</description>
    </item>
    
    <item>
      <title>Reading 23.12.19</title>
      <link>https://mullikine.github.io/posts/reading-23.12.19/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-23.12.19/</guid>
      <description>AI NLP  Language Engineering; Harnessing the Power of Language Google AI Blog: ALBERT: A Lite BERT for Self-Supervised Learning of Language Representations  Computer Vision  ObjectNet  Automated testing  Cucumber | Tools &amp;amp; techniques that elevate teams to greatness Writing Features - Gherkin Language - Behat 2.5.3 documentation  Information Retrieval  Why databases use ordered indexes but programming uses hash tables (evanjones.ca)  Programming languages haskell parsers  An introduction to parsing text in Haskell with Parsec - Nick.</description>
    </item>
    
    <item>
      <title>minor mode wrappers for shell commands</title>
      <link>https://mullikine.github.io/posts/minor-mode-wrappers-for-shell-commands/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/minor-mode-wrappers-for-shell-commands/</guid>
      <description>Related article Taming term-mode // Bodacious Blog  Summary Basically, I am creating a program-agnostic method of rebinding keys.
Given an arbitrary shell command, such as mc (midnight commander), I can create my own keybindings and macros for this program as if I was customising an emacs mode.
It&amp;rsquo;s all part of trying to control everything from emacs.
More specifically, this article is about creating buffer-local minor modes which are enabled only for specific commands started through term-mode.</description>
    </item>
    
    <item>
      <title>Nix language</title>
      <link>https://mullikine.github.io/posts/nix-language/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/nix-language/</guid>
      <description>Original article Nix Pills - basics-of-language Nix Expression Language - NixOS Wiki  1 2 3 4 5 6 7 8 9 10 11 12 13 14  Nix language Nix expression language A pure, lazy, functional language. Not a full-featured, general purpose language. Functions are “normal” values that can be passed around and manipulated in interesting ways. Its main job is to describe packages, compositions of packages, and the variability within packages.</description>
    </item>
    
    <item>
      <title>Review of &#39;BPF: A New Type of Software&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-bpf-a-new-type-of-software/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-bpf-a-new-type-of-software/</guid>
      <description>Original article BPF: A New Type of Software  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53  KProbes A debugging mechanism for the Linux kernel which can also be used for monitoring events inside a production system.</description>
    </item>
    
    <item>
      <title>Creating FUSE filesystems in Python</title>
      <link>https://mullikine.github.io/posts/fuse-filesystem-in-python/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/fuse-filesystem-in-python/</guid>
      <description>Python3+ Option 1: pyfilesystem2 + fusefs pyfilesystem2 does NOT create a virtual filesystem on its own.
You need fusefs to mount a pyfilesystem2 extension.
  https://pypi.org/project/fusefs/
  https://github.com/mirekys/fusefs
  https://pypi.org/project/fs/2.4.11/
  https://github.com/PyFilesystem/pyfilesystem2
   1  sudo pip install fs fusefs   1 2  # Usage fusefs &amp;lt;url&amp;gt; &amp;lt;mountpoint&amp;gt;   url is the pyFilesystem2 resource to be mounted, and may contain placeholders for such values as username, host, password, etc.</description>
    </item>
    
    <item>
      <title>Access logging for systemd service file command</title>
      <link>https://mullikine.github.io/posts/log-service-command/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/log-service-command/</guid>
      <description>Find a service file 1  le service | v   1  v /etc/systemd/system/multi-user.target.wants/ssh.service   It&amp;rsquo;s aliased to:
1  v /etc/systemd/system/sshd.service   nvi 1  v /etc/systemd/system/multi-user.target.wants/nvi.service   1  journalctl -u nvi   -- Logs begin at Thu 2019-12-12 21:51:53 NZDT, end at Fri 2019-12-13 18:25:01 NZDT. -- Dec 12 21:51:54 morgan systemd[1]: Starting Recover nvi edit sessions.... Dec 12 21:51:54 morgan recover[1085]: Recovering nvi editor sessions.</description>
    </item>
    
    <item>
      <title>Monitoring tools</title>
      <link>https://mullikine.github.io/posts/monitoring-tools/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/monitoring-tools/</guid>
      <description>This is an exposé of a few monitoring tools I commonly use.
htop    kb f     e show environment   l show open files (lsof)    
what 1  cargo install what   what shows you what applications are taking up your bandwidth.

Is stack running? Yes it&amp;rsquo;s downloading 
iotop - simple top-like I/O monitor    kb f      and  change the sorting   r reverse the sorting order   o toggle the &amp;ndash;only option   p toggle the &amp;ndash;processes option   a toggle the &amp;ndash;accumulated option   q quit   i change the priority of a thread or a process&#39; thread(s)</description>
    </item>
    
  </channel>
</rss>
