<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/testing/</link>
    <description>Recent content in testing on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 May 2020 00:00:00 +1200</lastBuildDate><atom:link href="https://mullikine.github.io/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing CLI and TUI programs</title>
      <link>https://mullikine.github.io/posts/testing-cli-and-tui-programs/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/testing-cli-and-tui-programs/</guid>
      <description>cmdtest https://liw.fi/cmdtest/
Black box tests Unix command line tools. Roughly, it is given a a script, its input files, and its expected output files. cmdtest runs the script, and checks the output is as expected.
1  apt show cmdtest   Package: cmdtest Version: 0.22-1 Priority: optional Section: universe/python Origin: Ubuntu Maintainer: Ubuntu Developers &amp;lt;ubuntu-devel-discuss@lists.ubuntu.com&amp;gt; Original-Maintainer: Lars Wirzenius &amp;lt;liw@liw.fi&amp;gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 78.8 kB Depends: python (&amp;gt;= 2.7), python (&amp;lt;&amp;lt; 2.</description>
    </item>
    
    <item>
      <title>Review of &#39;Testing Autonomous Vehicles | LogiGear Blog&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-testing-autonomous-vehicles-logigear-blog/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-testing-autonomous-vehicles-logigear-blog/</guid>
      <description>Original article Testing Autonomous Vehicles | LogiGear Blog  Sensor feedback Sensors are providing the correct feedback, so the AI can be sure to have the correct information to process.
Input giving bad results The architecture of the NN should also be under scrutiny in the testing process.
If input data is consistently giving bad results, the designed models might need a new direction, and we must be willing to adjust it accordingly.</description>
    </item>
    
    <item>
      <title>Review of &#39;Testing strategy for a real time embedded C application&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-testing-strategy-for-a-real-time-embedded-c-application/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-testing-strategy-for-a-real-time-embedded-c-application/</guid>
      <description>Original article Testing strategy for a real time embedded C application  Need portability testing acceptance test characterization tests Technical assessment of the code  visual inspection, running analysis tools, and interviewing the team members  Example result As a result of the assessment, it was established that the code was well written, the only issue being that inter-process communication was inconsistently implemented.
strategy Instead of writing programs, developers write so-called “tasks”, which run according to various policies.</description>
    </item>
    
    <item>
      <title>Review of &#39;The Practical Test Pyramid&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-the-practical-test-pyramid/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-the-practical-test-pyramid/</guid>
      <description>Original article The Practical Test Pyramid   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  interface Two parties involved: - publisher - subscriber In a REST world a provider builds a REST API with all required endpoints; a consumer makes calls to this REST API to fetch data or trigger changes in the other service.</description>
    </item>
    
    <item>
      <title>Testing Strategy</title>
      <link>https://mullikine.github.io/posts/testing-strategy/</link>
      <pubDate>Fri, 07 Feb 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/testing-strategy/</guid>
      <description>Plan Technical assessment of the code  visual inspection, running analysis tools, and interviewing the team members  What tests exist already? How extensive is the bottom of the pyramid?
For each task / team member  Questions to ask  - Where do errors creep in currently? - What are the critical components we need to ensure are working?  Example result As a result of the assessment, it was established that the code was well written, the only issue being that inter-process communication was inconsistently implemented.</description>
    </item>
    
    <item>
      <title>Hydra - CI and release management for NixOS</title>
      <link>https://mullikine.github.io/posts/nix-hydra-ci/</link>
      <pubDate>Thu, 09 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/nix-hydra-ci/</guid>
      <description>Original article https://nixos.org/hydra/manual/  1 2 3 4  big bang integration The phenomenon where components are only tested together near the end of the development process.   Background Continuous Integration An automated system continuously or periodically:
 check out the source code of a project, build it, run tests, and produce reports for the developers.  CI Tools enable Lenthy tests Many projects have very large test sets (e.</description>
    </item>
    
    <item>
      <title>CodeQL by GitHub and Semmle</title>
      <link>https://mullikine.github.io/posts/codeql-by-github-and-semmle/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/codeql-by-github-and-semmle/</guid>
      <description>Reference material Getting started with the CodeQL CLI - CodeQL QL packs - CodeQL Related articles CodeLingo vs Linters: TLDR // Bodacious Blog  Glossary 1 2 3  QL pack Contains important metadata that tells the CodeQL CLI how to process the query files.   Step 1) Install the CLI Releases github/codeql-cli-binaries GitHub
Step 2) Obtain a local copy of the CodeQL queries 1 2 3 4 5 6 7  # Download the following repositories git clone https://github.</description>
    </item>
    
  </channel>
</rss>
