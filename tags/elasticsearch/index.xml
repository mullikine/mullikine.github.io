<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elasticsearch on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/elasticsearch/</link>
    <description>Recent content in elasticsearch on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jul 2020 00:00:00 +1200</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Review of &#39;Search Benchmarking: RediSearch vs. Elasticsearch | Redis Labs&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-search-benchmarking-redisearch-vs-elasticsearch-redis-labs/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-search-benchmarking-redisearch-vs-elasticsearch-redis-labs/</guid>
      <description>Original article Search Benchmarking: RediSearch vs. Elasticsearch | Redis Labs  Search Benchmarking: RediSearch vs. Elasticsearch by Keren Ouaknine
Background RediSearch is a distributed full-text search and aggregation engine built as a module on top of Redis. It enables users to execute complex search queries on their Redis dataset in an extremely fast manner. The unique architecture of RediSearch, which was written in C and built from the ground up on optimized data structures, makes it a true alternative to other search engines in the market.</description>
    </item>
    
    <item>
      <title>ElasticSearch and emacs</title>
      <link>https://mullikine.github.io/posts/elasticsearch-and-emacs/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/elasticsearch-and-emacs/</guid>
      <description>babel https://github.com/dakrone/es-mode
The built-in babel interpreter for ES query DSL targets http://localhost:9200/.
POST /_search?pretty { &amp;#34;query&amp;#34;: { &amp;#34;match_all&amp;#34;: {} } } { &amp;#34;took&amp;#34; : 0, &amp;#34;timed_out&amp;#34; : false, &amp;#34;_shards&amp;#34; : { &amp;#34;total&amp;#34; : 0, &amp;#34;successful&amp;#34; : 0, &amp;#34;skipped&amp;#34; : 0, &amp;#34;failed&amp;#34; : 0 }, &amp;#34;hits&amp;#34; : { &amp;#34;total&amp;#34; : 0, &amp;#34;max_score&amp;#34; : 0.0, &amp;#34;hits&amp;#34; : [ ] } } tablify POST /test/doc/_search { &amp;#34;aggs&amp;#34; : { &amp;#34;my_terms_agg&amp;#34; : { &amp;#34;terms&amp;#34; : { &amp;#34;field&amp;#34; : &amp;#34;type&amp;#34; } } }, &amp;#34;size&amp;#34;: 0 } </description>
    </item>
    
    <item>
      <title>Elasticsearch concepts</title>
      <link>https://mullikine.github.io/posts/elasticsearch-concepts/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/elasticsearch-concepts/</guid>
      <description>search  Original article https://icij.gitbook.io/datashare/all/search-with-operators Original article https://www.elastic.co/guide/en/elasticsearch/reference/7.x/query-dsl-query-string-query.html   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60  Fuzziness Character-level edit-distance.</description>
    </item>
    
  </channel>
</rss>