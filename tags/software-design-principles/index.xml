<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Design Principles on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/software-design-principles/</link>
    <description>Recent content in Software Design Principles on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 15 Oct 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/software-design-principles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Software Design Principles – Scalability</title>
      <link>https://mullikine.github.io/posts/software-design-principles/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/software-design-principles/</guid>
      <description>Types of scalability https://elastisys.com/2015/09/10/scalability-design-principles/
Performance Parallelism and asynchronism is good.
Amdahl’s Law Performance does not scale perfectly linearly.
Some problems are simply better suited for tackling with a parallel approach.
Speedup of a program using multiple processors in parallel computing is limited by the sequential fraction of the program.
A limit to how much benefit we can get from increasing capacity.
Intended for parallel computing, not distributed systems.
Conclusion Try use components designed with parallelism and asynchronism in mind.</description>
    </item>
    
  </channel>
</rss>