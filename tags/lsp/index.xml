<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lsp on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/lsp/</link>
    <description>Recent content in lsp on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Nov 2020 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/lsp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shorten long paths in lsp-mode sideline</title>
      <link>https://mullikine.github.io/posts/shorten-long-paths-in-lsp-mode-sideline/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/shorten-long-paths-in-lsp-mode-sideline/</guid>
      <description>Premise As I was reading some haskell, I was bothered by the long lsp-ui-sideline strings, which were encroaching upon my code.
Demo: Before and after 
LSP string format There is a file in lsp-mode, lsp- protocol.el which contains code to generate functions for reading and writing to lsp formatted strings.
https://github.com/emacs-lsp/lsp-mode/blob/master/lsp-protocol.el
Code Before 1 2 3 4 5 6 7 8 9 10 11 12 13 14  (defun lsp-ui-sideline--extract-info (contents) &amp;#34;Extract the line to print from CONTENTS.</description>
    </item>
    
    <item>
      <title>Updates and demonstrations of the glossary system</title>
      <link>https://mullikine.github.io/posts/updates-and-demonstrations-of-the-glossary-system/</link>
      <pubDate>Sat, 24 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/updates-and-demonstrations-of-the-glossary-system/</guid>
      <description>Demonstrations Learning clojure Here I demonstrate how easy it is to see and navigate glossary items highlighted across code, documentation and websites.

Learning the language of Lord of the Rings 
Learning archaic English from the KJV Bible</description>
    </item>
    
    <item>
      <title>Fixing LSP for Python in emacs</title>
      <link>https://mullikine.github.io/posts/fixing-lsp-for-python-in-emacs/</link>
      <pubDate>Sun, 05 Jul 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/fixing-lsp-for-python-in-emacs/</guid>
      <description>TL;DR The documentation doesn&amp;rsquo;t appear in python mode.
I was using anaconda-mode to display documentation to alleviate the problem.
I found the problem in the way lsp-mode extracts documentation from the request.
Now it works.
I&amp;rsquo;ve also created a function my-lsp-get- hover-docs to create a new buffer from the documentation for the thing under the cursor.
As a side-effect of all of this, I&amp;rsquo;ve learned to create my own overlays.</description>
    </item>
    
    <item>
      <title>Creating an LSP mode for racket</title>
      <link>https://mullikine.github.io/posts/creating-a-lsp-mode-for-racket/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/creating-a-lsp-mode-for-racket/</guid>
      <description>It turns out to be very easy to connect a language server to emacs where a plugin is not available.
 Emacs plugin https://github.com/mullikine/lsp-racket-el  Firstly, install the language server 1  raco pkg install racket-langserver   Then make the plugin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  ;;; lsp-racket.</description>
    </item>
    
    <item>
      <title>DAP mode for emacs</title>
      <link>https://mullikine.github.io/posts/dap-mode/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dap-mode/</guid>
      <description>Related reading Setting up LSP with emacs (Go, Java, Python, Rust, C++, Haskell) // Bodacious Blog Official page for Debug Adapter Protocol Python environment // Bodacious Blog  DAP mode is like LSP for debugging.
bindings 1 2 3  (define-key my-mode-map (kbd &amp;#34;M-m a b&amp;#34;) #&amp;#39;dap-hydra/body) (define-key my-mode-map (kbd &amp;#34;M-m a a&amp;#34;) #&amp;#39;dap-ui-breakpoints) (define-key prog-mode-map (kbd &amp;#34;M-\&amp;#34;&amp;#34;) &amp;#39;handle-debug)   State of languages with DAP in my own environment    Language DAP Working LSP Working Fallback working Current user experience     Python ✓ ✓ ✓ pdb Good   Java ✓ ✓ ✓ eclim Good    Java Here is an example of me creating a breakpoint with a condition and running the debugger.</description>
    </item>
    
    <item>
      <title>Setting up LSP with emacs (Go, Java, Python, Rust, C&#43;&#43;, Haskell, JS, TS, Ruby…)</title>
      <link>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description>Guides used https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/ https://github.com/emacs-lsp/lsp-java  1 2 3 4 5  Debug Adaptor Protocol DAP The LSP of debugging. https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website    State of languages with LSP in my own environment    Language LSP Working Fallback working Current user experience TabNine enabled REPL / Playground DAP (debug) Working Static analysis Complaints Custom LSP improvements     Go ✓ ✓ Amazing ✓ ✓  ✓ Go toolchain changes too quickly    Python ✓ ✓ Amazing ✓ ✓ ✓ ✓     Racket ✓ ✓ racket-mode Amazing  ✓  ✓     Java ✓ ✓ eclim Good ✓ ✓ (default) ✓ ✓ A little slow.</description>
    </item>
    
  </channel>
</rss>