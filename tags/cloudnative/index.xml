<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloudnative on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/cloudnative/</link>
    <description>Recent content in cloudnative on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 May 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/cloudnative/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Provisioning with IaC</title>
      <link>https://mullikine.github.io/posts/provisioning/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/provisioning/</guid>
      <description>Related articles HashiCorp: Terraform, Vault, Vagrant, Packer // Bodacious Blog  Gut Feeling  Lean towards Hashicorp products.  Infrastructure as Code (IaC)  Terraform Ansible  Terraform 1 2 3 4 5 6 7  Terraform [hashicorp product] Infrastructure as Code. Provision and manage any cloud, infrastructure, or service.    create AMI using hashicorp packer provision using hashicorp terraform  Ansible   Create AMI using hashicorp packer</description>
    </item>
    
    <item>
      <title>Deployment with IaC and Octopus</title>
      <link>https://mullikine.github.io/posts/deployment/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/deployment/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  OTA deployment over-the-air deployment Over-the-Air programming OTA Refers to various methods of distributing new software, configuration settings, and even updating encryption keys to devices like mobile phones, set-top boxes or secure voice communication equipment (encrypted 2-way radios). codeship A fast and secure hosted CI service that scales with your needs. It supports GitHub, Bitbucket, and Gitlab projects.</description>
    </item>
    
    <item>
      <title>Review of &#39;Runners autoscale configuration | GitLab&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-runners-autoscale-configuration-gitlab/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-runners-autoscale-configuration-gitlab/</guid>
      <description> Original article Runners autoscale configuration | GitLab  </description>
    </item>
    
    <item>
      <title>CodeQL by GitHub and Semmle</title>
      <link>https://mullikine.github.io/posts/codeql-by-github-and-semmle/</link>
      <pubDate>Tue, 07 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/codeql-by-github-and-semmle/</guid>
      <description>Reference material Getting started with the CodeQL CLI - CodeQL QL packs - CodeQL Related articles CodeLingo vs Linters: TLDR // Bodacious Blog  Glossary 1 2 3  QL pack Contains important metadata that tells the CodeQL CLI how to process the query files.   Install the CLI Releases github/codeql-cli-binaries GitHub
Obtain a local copy of the CodeQL queries Using my xsh script, which is like bash but works over interactive subshells.</description>
    </item>
    
    <item>
      <title>Overview of modern Continuous Integration tools</title>
      <link>https://mullikine.github.io/posts/review-of-continuous-integration-tools/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-continuous-integration-tools/</guid>
      <description>Circle CI Trust your CI/CD pipeline. Push code with confidence.
Automate your development process quickly, safely, and at scale.
Codeship Check in your code. Let us handle the rest. We provide a simple, turn-key SaaS CI/CD platform that is fast and flexible so that you can hit the ground running and build stuff that matters.
Runs the tests and deploys.
It replaces Circle CI.
Travis Easily sync your GitHub projects with Travis CI and youâ€™ll be testing your code in minutes!</description>
    </item>
    
    <item>
      <title>CodeLingo vs Linters</title>
      <link>https://mullikine.github.io/codelingo-vs-linters/main/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/codelingo-vs-linters/main/</guid>
      <description>Making tenets with CLQL that do the job of existing linters I started learning Go and CodeLingo / CLQL at the same time, so while I have found it generally easy and straightforward to create these tenets, I feel like I could&amp;rsquo;ve knocked them out even faster if I didn&amp;rsquo;t need to look up answers to questions such as &amp;lsquo;what is an interface in golang?&#39;, for example. The process has been intuitive; I think in part to having a good naming convention.</description>
    </item>
    
    <item>
      <title>CodeLingo vs Linters: TLDR</title>
      <link>https://mullikine.github.io/codelingo-vs-linters/summary/</link>
      <pubDate>Fri, 05 Oct 2018 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/codelingo-vs-linters/summary/</guid>
      <description>Tenet&amp;rsquo;s are 10x shorter and faster to write than Linters Comparison of size in code
   Lines (CL) Lines (L) Words (CL) Words (L) Bytes (CL) Bytes (L) Byte % (CL/L) Tenet name (CL) linter name (L)     18 681 49 2084 524 15616 3.36% unconvert unconvert   19 110 64 275 580 2198 26.39% init gochecknoinits   18 136 67 353 623 2307 27.</description>
    </item>
    
  </channel>
</rss>