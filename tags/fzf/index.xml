<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fzf on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/fzf/</link>
    <description>Recent content in fzf on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Jul 2020 00:00:00 +1200</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/fzf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>M-SPC for running commands in zsh</title>
      <link>https://mullikine.github.io/posts/m-spc-for-running-commands-in-zsh/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/m-spc-for-running-commands-in-zsh/</guid>
      <description>Original article https://asciinema.org/a/3EiPWJHHtwSzS3Zp3UKwwaipV  zshrc config modifications 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  # # fz command # bindkey -s &amp;#34;^[ &amp;#34; &amp;#34;^A^Kslmenu\r&amp;#34; function zsh-slmenu() { trap func_trap EXIT func_trap() { tput rc } tput sc exec &amp;lt;/dev/tty slmenu } # M-SPC autoload -z zsh-slmenu zle -N zsh-slmenu bindkey &amp;#34;\e &amp;#34; zsh-slmenu   slmenu script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  #!</description>
    </item>
    
    <item>
      <title>Browsing sqlite3 databases with edbi for emacs</title>
      <link>https://mullikine.github.io/posts/browsing-databases-with-emacs-edbi/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/browsing-databases-with-emacs-edbi/</guid>
      <description>Set up edbi 1 2  # for emacs edbi cpan install DBD::SQLite   Create the scripts select-database 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } is_tty istty=$?</description>
    </item>
    
    <item>
      <title>Browsing git repos</title>
      <link>https://mullikine.github.io/posts/browsing-git-repos/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/browsing-git-repos/</guid>
      <description>1  browse-git-repos</description>
    </item>
    
    <item>
      <title>Real-time interactive documentation lookup for haskell type-declarative search</title>
      <link>https://mullikine.github.io/posts/doc-lookup-for-haskell-type-declarative-search/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/doc-lookup-for-haskell-type-declarative-search/</guid>
      <description>I make a tool for real-time fuzzy documentation lookup for haskell type- declarative search.
Demonstration; the final result 
Create the script hs-type-declarative-search This uses stack.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65  #!</description>
    </item>
    
  </channel>
</rss>