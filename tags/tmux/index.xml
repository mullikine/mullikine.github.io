<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tmux on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/tmux/</link>
    <description>Recent content in tmux on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Dec 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/tmux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Efficiently getting emacs keyboard macros from string literals using expect/tmux</title>
      <link>https://mullikine.github.io/posts/emacs-macros-from-string-literals-using-invisible-emacs/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-macros-from-string-literals-using-invisible-emacs/</guid>
      <description>{´◕ ◡ ◕｀} This requires both expect and tmux to be installed. They are only used in the background. You can use this function with GUI emacs fine. No other dependencies are required for this elisp function to work. The bash/tcl/expect script is embedded in elisp.  ++ Update :: The builtin `edmacro-format-keys` gives me the functionality I want without the rigmarole.
make-kbd-from-string is a function that takes a string literal and gives you a keyboard macro.</description>
    </item>
    
    <item>
      <title>Creating an emacs mode for asciinema.org</title>
      <link>https://mullikine.github.io/posts/an-emacs-mode-for-asciinema-playback/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/an-emacs-mode-for-asciinema-playback/</guid>
      <description>Related articles Hacker News mode and minor modes for websites // Bodacious Blog  This blog is about creating a minor mode for browsing asciinema.org and extending eww-mode to handle the video links.
I use tmux from emacs to spawn a new window that starts the playback when a link is clicked.
Demonstration Here, I use the asciinema mode for browsing and opening asciinema recordings from my blog.</description>
    </item>
    
    <item>
      <title>★ semi-automated interactive stream editing: piping through expect and emacs ★</title>
      <link>https://mullikine.github.io/posts/semi-automated-stream-editing-piping-through-expect-and-emacs/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/semi-automated-stream-editing-piping-through-expect-and-emacs/</guid>
      <description>Here, the eipe2 script wraps around emacsclient to enable myself to intercept the traffic of a bash pipeline and edit it mid-command. It&amp;rsquo;s modelled after vipe.
But that is only half the trick. I then do the same for tcl/expect. On its own, expect can&amp;rsquo;t edit the stream, but by placing an eipe2 within the expect script I can complete the pipeline, automating emacs with expect.
But that is not the most awesome part.</description>
    </item>
    
    <item>
      <title>★ Complex Dwarf Fortress macros with tcl/expect, emacs and tmux ★</title>
      <link>https://mullikine.github.io/posts/dwarf-fortress-macros-with-emacs-and-tmux/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dwarf-fortress-macros-with-emacs-and-tmux/</guid>
      <description>Related articles minor mode wrappers for shell commands // Bodacious Blog  Here I make an emacs mode for Dwarf Fortress and create some keybindings in emacs which runs a generated tcl/expect script over Dwarf Fortress using tmux to attach itself to the tty inside term- mode.
Write the emacs lisp This macro creates minor modes from a list of shell command names.
These shell commands may be arbitrary terminal programs.</description>
    </item>
    
    <item>
      <title>Keyboard macros in GNU Ranger</title>
      <link>https://mullikine.github.io/posts/macros-in-gnu-ranger/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/macros-in-gnu-ranger/</guid>
      <description>Ranger does not have a build-in keyboard macro mechanism, but you can use tmux for this.
Create the tm-send-slow command 1 2 3 4 5 6 7 8  #!/bin/bash export TTY string=&amp;#34;$1&amp;#34; grep -o . &amp;lt;&amp;lt;&amp;lt; &amp;#34;$string&amp;#34; | while IFS=$&amp;#39;\n&amp;#39; read -r char; do tmux send -l &amp;#34;$char&amp;#34; done   Create the mapping 1  map F. shell -f tm-send-slow FFf   Demonstration</description>
    </item>
    
    <item>
      <title>Simulating mouse clicks in emacs</title>
      <link>https://mullikine.github.io/posts/simulating-mouse-clicks-in-emacs/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/simulating-mouse-clicks-in-emacs/</guid>
      <description>Using tmux, emacs and vim, I create some bindings to allow you to send mouse clicks to the terminal programmatically.
I had attempted to do this with emacs lisp but it was overly complicated and had I succeeded only emacs would be able to understand the mouse codes.
Click at the cursor location Make the tmux bindings 1 2  bind -n C-M-x run -b &amp;#34;tm mousedown&amp;#34; bind -n C-M-z run -b &amp;#34;tm mouseup&amp;#34;   Make the tm script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  mousedown|mouseup) { while [ $# -gt 0 ]; do opt=&amp;#34;$1&amp;#34;; case &amp;#34;$opt&amp;#34; in -t) { TMUX_PANE=&amp;#34;$2&amp;#34; shift shift } ;; *) break; esac; done [ -n &amp;#34;$1&amp;#34; ] &amp;amp;&amp;amp; x=&amp;#34;$1&amp;#34; &amp;amp;&amp;amp; shift [ -n &amp;#34;$1&amp;#34; ] &amp;amp;&amp;amp; y=&amp;#34;$1&amp;#34; &amp;amp;&amp;amp; shift : ${TMUX_PANE:=&amp;#34;$CALLER_PANE&amp;#34;} # tm cursor if test -z &amp;#34;$x&amp;#34;; then x=&amp;#34;$(tmux display -t &amp;#34;$TMUX_PANE&amp;#34; -p &amp;#34;#{cursor_x}&amp;#34;)&amp;#34; fi if test -z &amp;#34;$y&amp;#34;; then y=&amp;#34;$(tmux display -t &amp;#34;$TMUX_PANE&amp;#34; -p &amp;#34;#{cursor_y}&amp;#34;)&amp;#34; fi # ns &amp;#34;$f $TMUX_PANE $x $y&amp;#34; &amp;amp;&amp;gt;/dev/null if [ -n &amp;#34;$TMUX_PANE&amp;#34; ] &amp;amp;&amp;amp; [ -n &amp;#34;$x&amp;#34; ] &amp;amp;&amp;amp; [ -n &amp;#34;$y&amp;#34; ]; then case &amp;#34;$f&amp;#34; in mousedown) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -d $x $y)&amp;#34; } ;; mouseup) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -u $x $y)&amp;#34; } ;; click) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -d $x $y)&amp;#34; sleep 0.</description>
    </item>
    
    <item>
      <title>Automating tcl/expect</title>
      <link>https://mullikine.github.io/posts/automating-expect/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-expect/</guid>
      <description>Using tmux, expect and bash I made a script which you can use to automate practically anything on the command line in an easy way.
 Related articles semi-automated interactive stream editing: piping through expect and emacs // Bodacious Blog Complex Dwarf Fortress macros with tcl/expect, emacs and tmux // Bodacious Blog Automating TOR and TPB // Bodacious Blog  Build the x scriptdescription>
    </item>
    
    <item>
      <title>Searching awesome lists for curated web browsing</title>
      <link>https://mullikine.github.io/posts/curated-surfing/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/curated-surfing/</guid>
      <description>Here I demonstrate searching through and reading lists of things from the command line.
I ran into some issues with the googlesearch pip module It seems to have been taken down from pip.
I changed my script to use emacs&amp;rsquo; eww browser to scrape the results instead eww is pretty reliable.
Demonstration Please be patient as I bypass the problem above.

Some search results from the demonstration above 1 2 3 4 5 6 7 8  http://linear.</description>
    </item>
    
    <item>
      <title>Meta &amp; Inception</title>
      <link>https://mullikine.github.io/posts/meta-inception/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/meta-inception/</guid>
      <description>This is a blog article about writing a blog article about recording myself recording myself playing tetris inside emacs inside tmux inside neovim inside spacemacs, inside the 5 nested tmux sessions seen at the bottom of the screen.
DONE tetris inside of emacs 1  etetris-vt100   DONE tetris inside of neovim terminal inside of tmux 1  nvt etetris-vt100   DONE tetris inside of neovim terminal inside of tmux inside of spacemacs 1  sp -sh nvt etetris-vt100   DONE asciinema recording of an asciinema recording of tetris inside of neovim terminal inside of tmux inside of spacemacs Meta inception</description>
    </item>
    
  </channel>
</rss>