<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software-design on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/software-design/</link>
    <description>Recent content in software-design on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Oct 2019 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/software-design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Decentralised workforce; the human cloud</title>
      <link>https://mullikine.github.io/posts/decentralised-workforce-human-cloud/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/decentralised-workforce-human-cloud/</guid>
      <description>Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  asynchronous communication https://doist.com/blog/asynchronous-communication/ When you send a message without expecting an immediate response. For example, you send an email. I open and respond to the email several hours later. synchronous communication https://doist.com/blog/asynchronous-communication/ When you send a message and the recipient processes the information and responds immediately.</description>
    </item>
    
    <item>
      <title>Software Design Principles – Scalability</title>
      <link>https://mullikine.github.io/posts/software-design-principles/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/software-design-principles/</guid>
      <description>Types of scalability https://elastisys.com/2015/09/10/scalability-design-principles/
Performance Parallelism and asynchronism is good.
Amdahl’s Law Performance does not scale perfectly linearly.
Some problems are simply better suited for tackling with a parallel approach.
Speedup of a program using multiple processors in parallel computing is limited by the sequential fraction of the program.
A limit to how much benefit we can get from increasing capacity.
Intended for parallel computing, not distributed systems.
Conclusion Try use components designed with parallelism and asynchronism in mind.</description>
    </item>
    
  </channel>
</rss>