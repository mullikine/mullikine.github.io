<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/docker/</link>
    <description>Recent content in docker on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Nov 2020 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Preview docker-compose.yml as an svg</title>
      <link>https://mullikine.github.io/posts/view-docker-compose-yml-as-an-svg/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/view-docker-compose-yml-as-an-svg/</guid>
      <description>Demo 
Code for managing plantuml scope.sh Preview a file as plain text.
1 2 3 4 5 6 7 8  case &amp;#34;$bn&amp;#34; in docker-compose.yml) { cat &amp;#34;$rp&amp;#34; | docker-compose-plantuml --link-graph &amp;amp;&amp;amp; exit 4 } ;; *) esac   cr Compile and run a file.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  docker-compose.</description>
    </item>
    
    <item>
      <title>Setting up opensemanticsearch, fixing a docker-compose bug, making a PR</title>
      <link>https://mullikine.github.io/posts/setting-up-opensemanticsearch-fixing-a-docker-compose-bug-making-a-pr/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-opensemanticsearch-fixing-a-docker-compose-bug-making-a-pr/</guid>
      <description>Synopsis I&amp;rsquo;d like to use opensemanticsearch to index my own filesystem.
I&amp;rsquo;d like to use Apache Tika to create a text mirror of my file system in place of my own, makeshift text mirroring software.
I&amp;rsquo;d like to make use of opensemanticsearch&#39;s spacy-services module.
Demo: Running Solr, Tika and spacy-services servers 
A bug in starting the docker composure It appears that somebody else has also encountered this.
https://github.com/opensemanticsearch/open-semantic-search/issues/329
Error 1 2 3  x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -D__LITTLE_ENDIAN__=1 -I/usr/include/python3.</description>
    </item>
    
    <item>
      <title>CodeCraft: Creating UIs for CLI programs with Docker and Emacs</title>
      <link>https://mullikine.github.io/posts/codecraft-creating-uis-for-cli-programs-with-docker-and-emacs/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/codecraft-creating-uis-for-cli-programs-with-docker-and-emacs/</guid>
      <description>Speaker URL     Shane Mulligan (Myself) https://github.com/mullikine/     Similar presentation Conquering Kubernetes with Emacs - YouTube  Creating standalone UI applications for CLI tools using emacs and docker emacs (editor macros) Macros could be automated key input. This works for almost all CLI programs.
tmux Years ago NickM, the creator of tmux gave a talk at St Davids lecture theatre. I didn&amp;rsquo;t go, but I was distraught when I found out I had missed the event.</description>
    </item>
    
    <item>
      <title>Automatic, interactive handling of build files and IaC</title>
      <link>https://mullikine.github.io/posts/automatic-interactive-handling-of-build-files-and-iac/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automatic-interactive-handling-of-build-files-and-iac/</guid>
      <description>Premise I do not want to need to remember how to build certain projects.
I would like to self-document in code which types of build files I have encountered.
 Effortless Explorative Extensible  Demonstration 
Code zsh binding 1 2 3 4 5 6 7 8 9 10 11 12 13 14  function zsh-cr() { trap func_trap EXIT func_trap() { tput rc } tput sc exec &amp;lt;/dev/tty cr } # M-TAB bindkey -s &amp;#34;\e[2~&amp;#34; &amp;#34;^A^Kcr\n&amp;#34;   cr (bash)  Capabilities:  Interactively prioritise and suggest which build files to run Compile/run a specific build/source file, if specified Specify which type of file I&amp;rsquo;d like to treat this file as When one build file is unable to compile the project, or advance the build process, try the next one.</description>
    </item>
    
    <item>
      <title>Convert docker-compose to kubernetes</title>
      <link>https://mullikine.github.io/posts/convert-docker-compose-to-kubernetes/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/convert-docker-compose-to-kubernetes/</guid>
      <description>Source code https://github.com/kubernetes/kompose  kompose A tool to help users who are familiar with docker-compose move to k8s.
kompose takes a Docker Compose file and translates it into k8s resources.
kompose is a convenience tool to go from local Docker development to managing your application with k8s.
Transformation of the Docker Compose format to k8s resources manifest may not be exact, but it helps tremendously when first deploying an application on k8s.</description>
    </item>
    
    <item>
      <title>Review of &#39;Overview of Docker Compose | Docker Documentation&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-overview-of-docker-compose-docker-documentation/</link>
      <pubDate>Tue, 16 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-overview-of-docker-compose-docker-documentation/</guid>
      <description>Original article Overview of Docker Compose | Docker Documentation  Define and run multi-container Docker applications.
Use a YAML file to configure your application&amp;rsquo;s services.
Works in all environments: - production, - staging, - development, - testing, - CI
3 steps: - Define your app&amp;rsquo;s environment with a Dockerfile so it can be reproduced anywhere. - Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.</description>
    </item>
    
    <item>
      <title>Review of &#39;Overview of python dependency management tools | model.predict&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-overview-of-python-dependency-management-tools-model-predict/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-overview-of-python-dependency-management-tools-model-predict/</guid>
      <description>Original article Overview of python dependency management tools | model.predict       Installing python packages Installing non-python packages Managing python versions Managing virtual environments Environment reproducibility     pip ✓ ✖*         venv       ✓     pyenv     ✓       conda ✓ ✓ ✓* ✓     pipenv (+pyenv) ✓ ✓   ✓ ✓   poetry (+pyenv) ✓ ✓   ✓ ✓   Docker * * * * ✓    Docker There&amp;rsquo;s no need for any virtual environment management since apps are isolated by design.</description>
    </item>
    
    <item>
      <title>NixOS vs Docker</title>
      <link>https://mullikine.github.io/posts/nixos-vs-docker/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/nixos-vs-docker/</guid>
      <description>Docker &amp;gt; NixOS but it&amp;rsquo;s in its infancy https://hands-on.cloud/why-you-should-never-ever-use-nixos/
I actually agree with this article.
  I need a functional package manager based on docker or other containerisation software.
  I want access to the registry metadata so I can:
 Use NLP parsers on descriptions. Connect requirements directly to the provisioning pipeline.    </description>
    </item>
    
    <item>
      <title>Using Facebook&#39;s Duckling parser</title>
      <link>https://mullikine.github.io/posts/using-facebook-s-duckling-parser/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-facebook-s-duckling-parser/</guid>
      <description>Demonstration 
Obtain the docker image 1  docker pull rasa/duckling   Create duckling-parse script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  #!/bin/bash export TTY input=&amp;#34;$(urlencode)&amp;#34; set -m ( unbuffer docker \  run \  --name duckling-container \  --rm \  --network=host \  --entrypoint= \  rasa/duckling:latest \  duckling-example-exe -p 8000 --no-access-log --no-error-log ) &amp;amp;&amp;gt;/dev/null &amp;amp; sleep 2 /usr/bin/curl -XPOST http://0.</description>
    </item>
    
    <item>
      <title>Using GitHub&#39;s Semantic parser</title>
      <link>https://mullikine.github.io/posts/using-github-semantic-parser/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-github-semantic-parser/</guid>
      <description>Links https://github.com/github/semantic#usage Related articles Overview of the semantic parser // Bodacious Blog  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  github semantic =semantic= is a Haskell library and command line tool for parsing, analyzing, and comparing source code. - Reads blobs. - Generates parse trees for those blobs with tree-sitter. - Assigns those trees into a generalized representation of syntax.</description>
    </item>
    
    <item>
      <title>Review of &#39;mermaid - flowcharts, diagrams, etc.&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-mermaid-markdownish-syntax-for-generating-flowcharts-digrams/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-mermaid-markdownish-syntax-for-generating-flowcharts-digrams/</guid>
      <description>mermaid GitHub repo mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs. Online editor https://mermaid-js.github.io/mermaid-live-editor/ Cheat sheet Mermaid Cheat Sheet @ http://jojozhuang.github.io  Setup docker image I compiled this docker image myself as existing images on dockerhub were outdated.
https://github.com/matthewfeickert/mermaid-CLI
I bumped the mermaid version up from 8.2.6 to 8.4.4 because some of the examples were not working but I&amp;rsquo;m still not able to build some of the diagrams.</description>
    </item>
    
    <item>
      <title>docker-mode.el</title>
      <link>https://mullikine.github.io/posts/docker-mode-el/</link>
      <pubDate>Thu, 26 Mar 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/docker-mode-el/</guid>
      <description>Source code https://github.com/Silex/docker.el  Docker mode allows you to manage docker images, containers and machines, using emacs.
Given it&amp;rsquo;s emacs, you may customize and extend it to fit your needs. That&amp;rsquo;s what I&amp;rsquo;ll demonstrate.
Example 1: I have extended docker-mode to allow you to get a shell to the docker machine. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  (defun docker-machine-ssh-one (name) &amp;#34;Start an ssh shell on machine.</description>
    </item>
    
    <item>
      <title>Dockerfile syntax</title>
      <link>https://mullikine.github.io/posts/dockerfile-syntax/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dockerfile-syntax/</guid>
      <description>Original article https://devhints.io/dockerfile  Inheritance 1  FROMruby:2.2.2   Variables 1 2 3 4  ENV APP_HOME /myappRUN mkdir $APP_HOMEARG APP_HOME=&amp;#34;&amp;#34;RUN mkdir $APP_HOME   Initialization 1 2 3 4 5 6  RUN bundle installWORKDIR/myappVOLUME [&amp;#34;/data&amp;#34;]# Specification for mount pointADD file.xyz /file.xyzCOPY --chown=user:group host_file.xyz /path/container_file.xyz   Onbuild 1 2  ONBUILD RUN bundle install# when used with another file   Commands 1 2  EXPOSE5900CMD [&amp;#34;bundle&amp;#34;, &amp;#34;exec&amp;#34;, &amp;#34;rails&amp;#34;, &amp;#34;server&amp;#34;]   Entrypoint Configure a container that will run as an executable.</description>
    </item>
    
    <item>
      <title>Docker FZF</title>
      <link>https://mullikine.github.io/posts/sp-docker-fzf/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/sp-docker-fzf/</guid>
      <description>Make docker-select-image 1 2 3 4  #!/bin/bash export TTY docker image ls --format=&amp;#34;{{json .}}&amp;#34; | jq -r &amp;#34;.Repository&amp;#34; | fzf -0   Make docker-run-command 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  #!/bin/bash export TTY image=&amp;#34;$1&amp;#34; command=&amp;#34;$2&amp;#34; if test -z &amp;#34;$image&amp;#34;; then image=&amp;#34;$(docker-select-image)&amp;#34; fi if test -z &amp;#34;$image&amp;#34;; then exit 1 fi if test -z &amp;#34;$command&amp;#34;; then # command=&amp;#34;$(docker image inspect &amp;#34;$image&amp;#34; | jq -r &amp;#34;.</description>
    </item>
    
  </channel>
</rss>