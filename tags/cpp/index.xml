<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/cpp/</link>
    <description>Recent content in cpp on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Jun 2020 00:00:00 +0800</lastBuildDate><atom:link href="https://mullikine.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>parsing c&#43;&#43; with python</title>
      <link>https://mullikine.github.io/posts/parsing-c-with-python/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/parsing-c-with-python/</guid>
      <description>Example https://pygccxml.readthedocs.io/en/master/examples/templates/example.html  C++ is notoriously difficult to parse.
parse-cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null stdin_exists() { ! [ -t 0 ] &amp;amp;&amp;amp; ! test &amp;#34;$(readlink /proc/$$/fd/0)&amp;#34; = /dev/null } if stdin_exists; then fp=&amp;#34;$(tf cpp)&amp;#34; set -- &amp;#34;$fp&amp;#34; &amp;#34;$@&amp;#34; exec &amp;lt;&amp;amp;1 fi fp=&amp;#34;$1&amp;#34; test -f &amp;#34;$fp&amp;#34; || exit 1 x -sh &amp;#34;parse-cpp.</description>
    </item>
    
    <item>
      <title>Updating Trigger Studio for Age of Empires II: DE</title>
      <link>https://mullikine.github.io/posts/ts-aoe2de/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/ts-aoe2de/</guid>
      <description>Credits Without the help of dderevjanik and KSneijders, this update would not be possible.
  dderevjanik
 http://dderevjanik.github.io/agescx/formatscx/#format    KSneijders
 https://github.com/KSneijders/AoE2ScenarioParser    Update: &amp;lt;2020-06-27 Sat&amp;gt; Using AoE2ScenarioParser by KSneijders Extract a trigger into JSON using the python library.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152  { &amp;#34;_TriggerObject__description&amp;#34;: &amp;#34;\u0000&amp;#34;, &amp;#34;_TriggerObject__short_description&amp;#34;: &amp;#34;\u0000&amp;#34;, &amp;#34;_name&amp;#34;: &amp;#34;StartYearCountdown\u0000&amp;#34;, &amp;#34;condition_order&amp;#34;: [ 0 ], &amp;#34;conditions&amp;#34;: [ { &amp;#34;ai_signal&amp;#34;: -1, &amp;#34;amount_or_quantity&amp;#34;: 0, &amp;#34;area_1_x&amp;#34;: -1, &amp;#34;area_1_y&amp;#34;: -1, &amp;#34;area_2_x&amp;#34;: -1, &amp;#34;area_2_y&amp;#34;: -1, &amp;#34;comparison&amp;#34;: -1, &amp;#34;condition_type&amp;#34;: 4, &amp;#34;inverted&amp;#34;: -1, &amp;#34;next_object&amp;#34;: -1, &amp;#34;object_group&amp;#34;: -1, &amp;#34;object_list&amp;#34;: 826, &amp;#34;object_type&amp;#34;: -1, &amp;#34;player&amp;#34;: 0, &amp;#34;py/object&amp;#34;: &amp;#34;AoE2ScenarioParser.</description>
    </item>
    
    <item>
      <title>Review of emacs distributions</title>
      <link>https://mullikine.github.io/posts/emacs-distributions/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-distributions/</guid>
      <description>All the distributions I use are overlaid with my own customisations to make them very similar to each other by making my own key bindings and hydras layer. They still retain their own peculiarities, but I have taken a decent portion of code from each distribution to form a common functionality layer.
I have over 1300 emacs plugins which all distributions share.
Spacemacs  Very good default keybindings. Great support for LSP.</description>
    </item>
    
    <item>
      <title>Plan9 Mk vs UNIX/BSD Make vs GNU Make</title>
      <link>https://mullikine.github.io/posts/plan9-mk-vs-make/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/plan9-mk-vs-make/</guid>
      <description>source material Maintaining Files on Plan 9 with Mk Mk: A Successor to Make gnu make - The difference between .mk file and Makefile - Stack Overflow build - What is the difference between gmake and make? - Stack Overflow  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  Mkfile The makefile of Plan9 Mk. rule A rule appears in the makefile and says when and how to remake certain files, called the rule’s targets (most often only one per rule).</description>
    </item>
    
    <item>
      <title>Setting up LSP with emacs (Go, Java, Python, Rust, C&#43;&#43;, Haskell, JS, TS, Ruby…)</title>
      <link>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description>Guides used https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/ https://github.com/emacs-lsp/lsp-java  1 2 3 4 5  Debug Adaptor Protocol DAP The LSP of debugging. https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website    State of languages with LSP in my own environment    Language LSP Working Fallback working Current user experience TabNine enabled REPL / Playground DAP (debug) Working Static analysis Complaints Custom LSP improvements     Go ✓ ✓ Amazing ✓ ✓  ✓ Go toolchain changes too quickly    Python ✓ ✓ Amazing ✓ ✓ ✓ ✓     Racket ✓ ✓ racket-mode Amazing  ✓  ✓     Java ✓ ✓ eclim Good ✓ ✓ (default) ✓ ✓ A little slow.</description>
    </item>
    
    <item>
      <title>Deconstructing the Cocomel search engine</title>
      <link>https://mullikine.github.io/posts/deconstructing-cocomel/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/deconstructing-cocomel/</guid>
      <description>This is my attempt to understand Vaughan Kitchen&amp;rsquo;s search engine.
 Source code https://github.com/vkitchen/cocomel Related articles Entropy, Cross-Entropy and KL-Divergence // Bodacious Blog \
An example information retrieval problem  Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  red-black tree RBT [self-balancing binary search tree] Each node of the binary tree has an extra bit, and that bit is often interpreted as the color of the node.</description>
    </item>
    
    <item>
      <title>Generic paths for toolchains</title>
      <link>https://mullikine.github.io/posts/generic-path-for-blockchains/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/generic-path-for-blockchains/</guid>
      <description>I downloaded the latest version of the clang compiler today and I didn&amp;rsquo;t know where to put it.
I didn&amp;rsquo;t want to set up paths for a single toolchain and have to do it again in the future.
This was my hack. It works. Use this 1 2 3 4 5 6 7 8  for d in /usr/local/toolchains/*; do export PATH=$d/bin:${PATH} export LIBRARY_PATH=$d/lib:${LIBRARY_PATH} export LD_LIBRARY_PATH=$d/lib:${LD_LIBRARY_PATH} export C_INCLUDE_PATH=$d/include:${C_INCLUDE_PATH} export CPLUS_INCLUDE_PATH=$d/include:${CPLUS_INCLUDE_PATH} export MANPATH=&amp;#34;$d/share/man:$MANPATH&amp;#34; done   I extracted clang+llvm-9.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; template metaprogramming with Racket</title>
      <link>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #lang fulmar (require fulmar/meta) (definitions (define/meta zero) (define/meta succ (n)) (define/meta (add m n) [((succ n-minus-one) m) (add n-minus-one (succ m))] [((zero) m) m]) (define/meta (m-equal a b) [(v v) v])) #&amp;lt;&amp;lt;tests-section-end int main(int argc, const char *argv[]) { Add&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero &amp;gt; &amp;gt;, Succ&amp;lt;Zero&amp;gt; &amp;gt;::result typedef result; MEqual&amp;lt;result, Succ&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero&amp;gt; &amp;gt; &amp;gt; &amp;gt;::result typedef assert; return 0; } tests-section-end   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  /* This file was generated by fulmar version 0.</description>
    </item>
    
  </channel>
</rss>
