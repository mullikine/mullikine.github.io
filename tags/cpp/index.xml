<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/cpp/</link>
    <description>Recent content in cpp on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Nov 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deconstructing the Cocomel search engine</title>
      <link>https://mullikine.github.io/posts/deconstructing-cocomel/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/deconstructing-cocomel/</guid>
      <description>This is my attempt to understand Vaughan Kitchen&amp;rsquo;s search engine.
 Source code https://github.com/vkitchen/cocomel  Headers    header     bst.h   dynamic_array.h   hash_table.h   str.h    building the index functions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  size_t file_slurp(char const *filename, char **into) { FILE *fh; struct stat details; size_t file_length = 0; if ((fh = fopen(filename, &amp;#34;rb&amp;#34;)) !</description>
    </item>
    
    <item>
      <title>Generic paths for toolchains</title>
      <link>https://mullikine.github.io/posts/generic-path-for-blockchains/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/generic-path-for-blockchains/</guid>
      <description>I downloaded the latest version of the clang compiler today and I didn&amp;rsquo;t know where to put it.
I didn&amp;rsquo;t want to set up paths for a single toolchain and have to do it again in the future.
This was my hack. It works. Use this 1 2 3 4 5 6 7 8  for d in /usr/local/toolchains/*; do export PATH=$d/bin:${PATH} export LIBRARY_PATH=$d/lib:${LIBRARY_PATH} export LD_LIBRARY_PATH=$d/lib:${LD_LIBRARY_PATH} export C_INCLUDE_PATH=$d/include:${C_INCLUDE_PATH} export CPLUS_INCLUDE_PATH=$d/include:${CPLUS_INCLUDE_PATH} export MANPATH=&amp;#34;$d/share/man:$MANPATH&amp;#34; done   I extracted clang+llvm-9.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; template metaprogramming with Racket</title>
      <link>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #lang fulmar (require fulmar/meta) (definitions (define/meta zero) (define/meta succ (n)) (define/meta (add m n) [((succ n-minus-one) m) (add n-minus-one (succ m))] [((zero) m) m]) (define/meta (m-equal a b) [(v v) v])) #&amp;lt;&amp;lt;tests-section-end int main(int argc, const char *argv[]) { Add&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero &amp;gt; &amp;gt;, Succ&amp;lt;Zero&amp;gt; &amp;gt;::result typedef result; MEqual&amp;lt;result, Succ&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero&amp;gt; &amp;gt; &amp;gt; &amp;gt;::result typedef assert; return 0; } tests-section-end   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  /* This file was generated by fulmar version 0.</description>
    </item>
    
    <item>
      <title>Setting up LSP with emacs (2nd attempt)</title>
      <link>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description>guides used https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/  State of languages with LSP in my own environment    Language LSP Working Fallback working Current user experience     Go ✗ ✓ Great   Python ✓ ✓ Amazing   Rust ✗ ✓ Good   C++ ✓ ✓ clang Great   Haskell ✓ ✓ intero Good    Python The python editing experience in emacs is second to none.</description>
    </item>
    
  </channel>
</rss>