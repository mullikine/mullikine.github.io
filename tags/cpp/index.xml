<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cpp on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/cpp/</link>
    <description>Recent content in cpp on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Nov 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; template metaprogramming with Racket</title>
      <link>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</guid>
      <description>#lang fulmar (require fulmar/meta) (definitions (define/meta zero) (define/meta succ (n)) (define/meta (add m n) [((succ n-minus-one) m) (add n-minus-one (succ m))] [((zero) m) m]) (define/meta (m-equal a b) [(v v) v])) #&amp;lt;&amp;lt;tests-section-end int main(int argc, const char *argv[]) { Add&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero &amp;gt; &amp;gt;, Succ&amp;lt;Zero&amp;gt; &amp;gt;::result typedef result; MEqual&amp;lt;result, Succ&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero&amp;gt; &amp;gt; &amp;gt; &amp;gt;::result typedef assert; return 0; } tests-section-end/* This file was generated by fulmar version 0.9.2. */ struct Zero {}; template&amp;lt;typename N&amp;gt; struct Succ {}; template&amp;lt;typename M, typename N&amp;gt; struct Add; template&amp;lt;typename A, typename B&amp;gt; struct MEqual; template&amp;lt;typename NMinusOne, typename M&amp;gt; struct Add&amp;lt;Succ&amp;lt;NMinusOne&amp;gt;, M&amp;gt; { typename Add&amp;lt;NMinusOne, Succ&amp;lt;M&amp;gt; &amp;gt;::result typedef result; }; template&amp;lt;typename M&amp;gt; struct Add&amp;lt;Zero, M&amp;gt; { M typedef result; }; template&amp;lt;typename V&amp;gt; struct MEqual&amp;lt;V, V&amp;gt; { V typedef result; }; int main(int argc, const char *argv[]) { Add&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero &amp;gt; &amp;gt;, Succ&amp;lt;Zero&amp;gt; &amp;gt;::result typedef result; MEqual&amp;lt;result, Succ&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero&amp;gt; &amp;gt; &amp;gt; &amp;gt;::result typedef assert; return 0; }</description>
    </item>
    
    <item>
      <title>Setting up LSP with emacs (2nd attempt)</title>
      <link>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description> guide https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/  </description>
    </item>
    
  </channel>
</rss>