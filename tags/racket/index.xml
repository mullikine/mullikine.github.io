<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>racket on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/racket/</link>
    <description>Recent content in racket on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Oct 2019 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/racket/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generating C with racket</title>
      <link>https://mullikine.github.io/posts/generating-c-with-racket/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/generating-c-with-racket/</guid>
      <description>related reading Practical macros in Racket // Bodacious Blog  #+BEGIN_SRC racket:async :results verbatim code  #!/usr/local/racket/bin/racket #lang racket (require syntax/parse/define (for-syntax racket)) (define-syntax-parser Cstat ([_ ((~datum +) x ...)] #:with x* (string-join (map (lambda (x) (writeln x) (if (symbol? (syntax-e x)) (symbol-&amp;gt;string (syntax-e x)) (number-&amp;gt;string (syntax-e x)))) (attribute x)) &amp;#34; + &amp;#34;) #&amp;#39;(string-append &amp;#39;x*))) (define-syntax-parser Cfun ([_ name:id ((type:expr param:id) ...) (return:expr ...) body ...+] #&amp;#39;(string-append ;; Here, return needs to be a symbol (symbol-&amp;gt;string &amp;#39;return) .</description>
    </item>
    
    <item>
      <title>Asking for help: methods</title>
      <link>https://mullikine.github.io/posts/asking-for-help-irc-asciinema/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/asking-for-help-irc-asciinema/</guid>
      <description>IRC and asciinema I will usually create a recording of my terminal and ask over IRC.
Recordings 

&amp;lt;2019-10-30 Wed&amp;gt;  #racket 20:03 &amp;lt; libertyprime&amp;gt; hey guys. how would i hide the output of the sexps being evaluated? https://asciinema.org/a/qZolO6uyMFvCma8RvYNI0k9YK I can&amp;#39;t wrap in (void (begin ...)) because it will complain 20:04 &amp;lt; libertyprime&amp;gt; http://ix.io/20jR/rkt</description>
    </item>
    
    <item>
      <title>Practical macros in Racket</title>
      <link>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</guid>
      <description>Original article Practical macros in Racket and how to work with them  This is a copy of Kevin R. Stravers article above, formatted in org-mode with some minor changes.
 TLDR You can ignore everything except define-syntax-parser if you&amp;rsquo;re new.
In essence it&amp;rsquo;s a way to define macros in a clean manner.
define-syntax-parser = define-syntax âˆ˜ syntax-parser
define-syntax-parser example
  Practical macros in Racket and how to work with them A macro is central in any Lisp and must be mastered in order to master the language.</description>
    </item>
    
  </channel>
</rss>