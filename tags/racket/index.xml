<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>racket on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/racket/</link>
    <description>Recent content in racket on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/racket/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>racket</title>
      <link>https://mullikine.github.io/posts/racket/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/racket/</guid>
      <description>Work in progress
1  (build-path (find-system-path &amp;#39;home-dir) &amp;#34;**&amp;#34; &amp;#34;*.rkt&amp;#34;)   #&amp;lt;path:/home/shane/**/*.rkt&amp;gt; Some functions  symbol-&amp;gt;string path-&amp;gt;string     1 2 3 4 5 6 7 8  (require file/glob) (display (string-join (take (map path-&amp;gt;string (glob (build-path (find-system-path &amp;#39;home-dir) &amp;#34;notes/**&amp;#34; &amp;#34;*.rkt&amp;#34;))) 5) &amp;#34;\n&amp;#34;))   /home/shane/notes/ws/codelingo/racket/c-code-generator.rkt /home/shane/notes/ws/codelingo/read-yaml.rkt /home/shane/notes/ws/dcbc-school-of-computer-science/db.rkt /home/shane/notes/ws/dcbc-school-of-computer-science/presentation.rkt /home/shane/notes/ws/learn/racket/functional.rkt1  find $NOTES -type f | glob-grep &amp;#34;*.rkt&amp;#34; | head -n 10   /home/shane/notes/test.rkt /home/shane/notes/test-format.rkt /home/shane/notes/ws/racket/scratch.rkt /home/shane/notes/ws/racket/scratch/scratch.</description>
    </item>
    
    <item>
      <title>hackerrank racket</title>
      <link>https://mullikine.github.io/posts/hackerrank-racket/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/hackerrank-racket/</guid>
      <description>Original code https://github.com/atharvashukla/racket-hackerrank-solutions  I will make an attempt to chain together all of the hackerrank puzzles using racket, bash and babel.
 1 2  10 5  
 1 2 3 4 5 6  (define (sum-of-two-integers a b) (+ a b)) (let ([a (read)] [b (read)]) (printf &amp;#34;~a~%&amp;#34; (sum-of-two-integers a b)))  
15 1 2 3 4 5 6 7  (define (hello-world-n n) (cond [(= 0 n) (display &amp;#34;&amp;#34;)] [else (displayln &amp;#34;Hello World&amp;#34;) (hello-world-n (- n 1))])) (let ([n (read)]) (hello-world-n n))</description>
    </item>
    
    <item>
      <title>Racket ports</title>
      <link>https://mullikine.github.io/posts/racket-ports/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/racket-ports/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  Ports ewwlinks +/&amp;#34;13.1 Ports&amp;#34; &amp;#34;https://docs.racket-lang.org/reference/ports.html&amp;#34; Ports produce and/or consume bytes. An input port produces bytes, while an output port consumes bytes (and some ports are both input ports and output ports). When an input port is provided to a character-based operation, the bytes are decoded to a character, and character- based output operations similarly encode the character to bytes; see Encodings and Locales.</description>
    </item>
    
    <item>
      <title>An exposition of racket languages</title>
      <link>https://mullikine.github.io/posts/an-exposition-of-racket-languages/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/an-exposition-of-racket-languages/</guid>
      <description>Firstly, add to emacs a way of selecting the racket language  Languages to add:  racket rackjure hackett sicp rash    Emacs lisp code 1  (&amp;#34;L&amp;#34; (hot-expand &amp;#34;&amp;lt;s&amp;#34; &amp;#34;racket-sublang&amp;#34;) &amp;#34;racket&amp;#34;)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  (defun hot-expand (str &amp;amp;optional mod header) &amp;#34;Expand org template. STR is a structure template string recognised by org like &amp;lt;s.</description>
    </item>
    
    <item>
      <title>Creating an LSP mode for racket</title>
      <link>https://mullikine.github.io/posts/creating-a-lsp-mode-for-racket/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/creating-a-lsp-mode-for-racket/</guid>
      <description>It turns out to be very easy to connect a language server to emacs where a plugin is not available.
 Emacs plugin https://github.com/mullikine/lsp-racket-el  Firstly, install the language server 1  raco pkg install racket-langserver   Then make the plugin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  ;;; lsp-racket.</description>
    </item>
    
    <item>
      <title>Review of &#39;Beautiful Racket: Make a language in one hour: stacker&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-beautiful-racket-make-a-language-in-one-hour-stacker/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-beautiful-racket-make-a-language-in-one-hour-stacker/</guid>
      <description>Original article Beautiful Racket: Make a language in one hour: stacker GitHub - mbutterick/beautiful-racket: Resources for the Beautiful Racket book  Files  $MYGIT/mbutterick/beautiful-racket/beautiful-racket-demo/stacker-demo/info.rkt $MYGIT/mbutterick/beautiful-racket/beautiful-racket-demo/stacker-demo/stacker-test.rkt $MYGIT/mbutterick/beautiful-racket/beautiful-racket-demo/stacker-demo/stacker.rkt $MYGIT/mbutterick/beautiful-racket/beautiful-racket-demo/stacker-demo/test-sources.rkt  This is about making a linewise reverse polish calculator By convention, the top of our stack will correspond to the left side of a Racket list.
   enter a line push to list apply operation, compact list      (list)    4 (list 4)    8 (list 8 4)    + (list + 8 4) (list 12)   3 (list 3 12)    * (list * 3 12) (list 36)    Final results 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #lang br/quicklang (define (read-syntax path port) (define src-lines (port-&amp;gt;lines port)) (define src-datums (format-datums &amp;#39;(handle ~a) src-lines)) (define module-datum `(module stacker-mod stacker-demo/stacker ,@src-datums)) (datum-&amp;gt;syntax #f module-datlum)) (provide read-syntax) (define-macro (stacker-module-begin HANDLE-EXPR .</description>
    </item>
    
    <item>
      <title>CSE 341 Autumn 2012 - Racket Macros</title>
      <link>https://mullikine.github.io/posts/racket-macros/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/racket-macros/</guid>
      <description>To oversimplify, a macro is just a rule for rewriting programs as a prepass to evaluation.
So it’s very syntactic.
The “level” at which macros are defined affects their usefulness.
No macro system is sublexical  Sublexical Replace car with hd would turn cart into hdt.  A macro-expander must know how to break programs into tokens.
• “Pre-parsing” e.g.: Replace add(x,y) with x + y (where x and y stand for expressions) would turn add(x,y) * z into x + y * z.</description>
    </item>
    
    <item>
      <title>Lispifying indent-based code</title>
      <link>https://mullikine.github.io/posts/lispify-indents/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/lispify-indents/</guid>
      <description>I would like to be able to take indent-based code and turn it into parenthesis-based code.
 Target languages:  YAML Python C++    Prototype in racket 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91  #lang racket ;; (require racket) ; or match individually.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; template metaprogramming with Racket</title>
      <link>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #lang fulmar (require fulmar/meta) (definitions (define/meta zero) (define/meta succ (n)) (define/meta (add m n) [((succ n-minus-one) m) (add n-minus-one (succ m))] [((zero) m) m]) (define/meta (m-equal a b) [(v v) v])) #&amp;lt;&amp;lt;tests-section-end int main(int argc, const char *argv[]) { Add&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero &amp;gt; &amp;gt;, Succ&amp;lt;Zero&amp;gt; &amp;gt;::result typedef result; MEqual&amp;lt;result, Succ&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero&amp;gt; &amp;gt; &amp;gt; &amp;gt;::result typedef assert; return 0; } tests-section-end   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  /* This file was generated by fulmar version 0.</description>
    </item>
    
    <item>
      <title>Generating C with racket</title>
      <link>https://mullikine.github.io/posts/generating-c-with-racket/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/generating-c-with-racket/</guid>
      <description>related reading Practical macros in Racket // Bodacious Blog   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  #!/usr/local/racket/bin/racket #lang racket (require syntax/parse/define (for-syntax racket)) (define-syntax-parser Cstat ([_ ((~datum +) x ...)] #:with x* (string-join (map (lambda (x) (writeln x) (if (symbol?</description>
    </item>
    
    <item>
      <title>Asking for help: methods</title>
      <link>https://mullikine.github.io/posts/asking-for-help-irc-asciinema/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/asking-for-help-irc-asciinema/</guid>
      <description>IRC and asciinema I will usually create a recording of my terminal and ask over IRC.
Recordings 

&amp;lt;2019-10-30 Wed&amp;gt;  #racket 20:03 &amp;lt; libertyprime&amp;gt; hey guys. how would i hide the output of the sexps being evaluated? https://asciinema.org/a/qZolO6uyMFvCma8RvYNI0k9YK I can&amp;#39;t wrap in (void (begin ...)) because it will complain 20:04 &amp;lt; libertyprime&amp;gt; http://ix.io/20jR/rkt</description>
    </item>
    
    <item>
      <title>Practical macros in Racket</title>
      <link>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/practical-macros-in-racket-and-how-to-work-with-them/</guid>
      <description>Original article Practical macros in Racket and how to work with them  This is a copy of Kevin R. Stravers article above, formatted in org-mode with some minor changes.
 TLDR You can ignore everything except define-syntax-parser if you&amp;rsquo;re new. In essence it&amp;rsquo;s a way to define macros in a clean manner.
Explanation of syntax: define-syntax-parser
An example of define-syntax-parser: Generating C with racket // Bodacious Blog
  Practical macros in Racket and how to work with them A macro is central in any Lisp and must be mastered in order to master the language.</description>
    </item>
    
  </channel>
</rss>