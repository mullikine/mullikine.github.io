<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>babel on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/babel/</link>
    <description>Recent content in babel on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/babel/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>haskell</title>
      <link>https://mullikine.github.io/posts/haskell/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskell/</guid>
      <description>1  :t interact   interact :: (String -&amp;gt; String) -&amp;gt; IO () This is treated as part of the program 1  words &amp;#34;foo bar baz&amp;#34;   [&amp;#34;foo&amp;#34;,&amp;#34;bar&amp;#34;,&amp;#34;baz&amp;#34;] Convert strings to numbers You must also specify the type.
1  (read &amp;#34;5&amp;#34;) :: Int   5 Use map It applies a function to a list and results in a new list.
1  :t map   map :: (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b] The result should be list of integer 1  (map read $ words &amp;#34;1 2&amp;#34;) :: [Int]   [1,2] Without specifying the result, read will not work.</description>
    </item>
    
    <item>
      <title>Create binding to add arguments to org babel block</title>
      <link>https://mullikine.github.io/posts/create-binding-to-add-arguments-to-org-babel-block/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/create-binding-to-add-arguments-to-org-babel-block/</guid>
      <description>Make a keybinding that adds CLI arguments 1 2 3 4 5 6 7 8 9 10  (defun org-babel-change-block-type () (interactive) (if (or (org-in-src-block-p) (org-in-block-p &amp;#39;(&amp;#34;src&amp;#34; &amp;#34;example&amp;#34; &amp;#34;verbatim&amp;#34; &amp;#34;clocktable&amp;#34;))) (progn (call-interactively &amp;#39;org-babel-raise) (call-interactively &amp;#39;hydra-org-template/body)) (self-insert-command 1))) (define-key org-mode-map (kbd &amp;#34;M-.&amp;#34;) &amp;#39;org-babel-change-block-type)   1  (org-babel-insert-header-arg &amp;#34;args&amp;#34; (read &amp;#34;arguments:&amp;#34;))   1 2 3 4 5 6  (defun org-babel-add-src-args () (interactive) (if (org-in-src-block-p) (org-babel-insert-header-arg &amp;#34;args&amp;#34; (read-string &amp;#34;arguments:&amp;#34;)))) (define-key org-mode-map (kbd &amp;#34;M-@&amp;#34;) &amp;#39;org-babel-add-src-args)</description>
    </item>
    
    <item>
      <title>Add stdin to babel src blocks. Pipe one block into the next</title>
      <link>https://mullikine.github.io/posts/add-stdin-to-babel-src-blocks-pipe-one-block-into-the-next/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/add-stdin-to-babel-src-blocks-pipe-one-block-into-the-next/</guid>
      <description>The plan:  Do some research into existing emacs lisp code  Figure out how to get the contents of a named block and use it as the stdin to a babel block.   Extend babel so that I can chain scripts of multiple languages together in babel  Here are some named blocks I&amp;rsquo;ll use for testing 1  (org-babel-goto-named-src-block &amp;#34;mycode&amp;#34;)   1 2  (org-babel-goto-named-result) (org-babel-goto-named-src-block)    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  (defun org-copy-thing-here () (interactive) (if (or (org-in-src-block-p) (org-in-block-p &amp;#39;(&amp;#34;src&amp;#34; &amp;#34;example&amp;#34; &amp;#34;verbatim&amp;#34; &amp;#34;clocktable&amp;#34;))) (org-copy-src-block) (self-insert-command 1))) (defun org-copy-src-block () (interactive) (shut-up (my-copy org-get-src-block-here))) (defun org-get-src-block-here () (interactive) (org-edit-src-code) (mark-whole-buffer) (let ((contents (sh/chomp (selection)))) ;; (easy-kill 1) (org-edit-src-abort) contents))</description>
    </item>
    
    <item>
      <title>hackerrank racket</title>
      <link>https://mullikine.github.io/posts/hackerrank-racket/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/hackerrank-racket/</guid>
      <description>Original code https://github.com/atharvashukla/racket-hackerrank-solutions  I will make an attempt to chain together all of the hackerrank puzzles using racket, bash and babel.
 1 2  10 5  
 1 2 3 4 5 6  (define (sum-of-two-integers a b) (+ a b)) (let ([a (read)] [b (read)]) (printf &amp;#34;~a~%&amp;#34; (sum-of-two-integers a b)))  
15 1 2 3 4 5 6 7  (define (hello-world-n n) (cond [(= 0 n) (display &amp;#34;&amp;#34;)] [else (displayln &amp;#34;Hello World&amp;#34;) (hello-world-n (- n 1))])) (let ([n (read)]) (hello-world-n n))</description>
    </item>
    
    <item>
      <title>GHCi and Haskell code intermixed in babel</title>
      <link>https://mullikine.github.io/posts/babel-ghci-and-haskell/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/babel-ghci-and-haskell/</guid>
      <description>Demonstration Running ghcih inside neovim inside emacs 
Create the ghcih script 1 2 3 4 5 6  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null xs ghci -H &amp;#34;$@&amp;#34;   Create the ghci case in xs When -H is provided, it will split the input code by assuming that the initial part is a haskell module and anything from the first ghci : command and onwards is ghci code.</description>
    </item>
    
    <item>
      <title>Extending Babel</title>
      <link>https://mullikine.github.io/posts/extending-babel/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-babel/</guid>
      <description>previous article Compounding Confoundment: arbitrary interpreters for Babel // Bodacious Blog  Automate the process of changing the babel block wrapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  (defun org-babel-raise () &amp;#34;Move the interior of a babel to the outside: remove the babel block chrome and keep only the source code.</description>
    </item>
    
    <item>
      <title>Compounding Confoundment: arbitrary interpreters for Babel</title>
      <link>https://mullikine.github.io/posts/arbitrary-interpreters-for-babel/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/arbitrary-interpreters-for-babel/</guid>
      <description>Genesis 11:7 “&amp;hellip;Come, let us go down and confuse their language so they will not understand each other.” If supporting many languages in Babel was not confounding enough, lets support arbitrary interpreters too!  The need to specify a custom interpreter arose when I needed to provide my own interpreter for generating an ASCII graph from a dot script.
Objective Specify an :interpreter and/or :filter command to override the execute behaviour.</description>
    </item>
    
    <item>
      <title>haskellrank – hackerrank haskell</title>
      <link>https://mullikine.github.io/posts/haskellrank/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/haskellrank/</guid>
      <description>Tsoding HackerRank in Haskell &amp;ndash; HaskellRank #01 - YouTube  Imperative style (wrong) Haskell is about declarative programming, not imperative.
 1 2  10 5  
1 2 3 4 5 6 7 8  solveMeFirst a b = a + b main :: IO () main = do val1 &amp;lt;- readLn val2 &amp;lt;- readLn let sum = solveMeFirst val1 val2 print sum   15 interact function Takes a function that takes string and returns a string and applies a side-effect to the output (typically, printing to screen).</description>
    </item>
    
  </channel>
</rss>