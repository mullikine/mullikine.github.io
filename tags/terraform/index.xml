<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>terraform on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/terraform/</link>
    <description>Recent content in terraform on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using the terraform linter</title>
      <link>https://mullikine.github.io/posts/using-the-terraform-linter/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-the-terraform-linter/</guid>
      <description>TLDR  Create a wrapper script for tflint Search for terraform files Lint them  The point of this blog post is to demonstrate that this process is very quick.jj
Wrapper script#!/bin/bash 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null last_arg=&amp;#34;${@: -1}&amp;#34; fp=&amp;#34;$last_arg&amp;#34; if test -f &amp;#34;$fp&amp;#34;; then rp=&amp;#34;$(realpath &amp;#34;$fp&amp;#34;)&amp;#34; bn=&amp;#34;$(basename &amp;#34;$fp&amp;#34;)&amp;#34; dn=&amp;#34;$(dirname &amp;#34;$rp&amp;#34;)&amp;#34; cd &amp;#34;$dn&amp;#34; test &amp;#34;$#&amp;#34; -gt 0 &amp;amp;&amp;amp; set -- &amp;#34;${@:1:$(($#-1))}&amp;#34; # shift last arg set -- &amp;#34;$@&amp;#34; &amp;#34;$bn&amp;#34; fi docker run --rm -v &amp;#34;$(pwd):/$(pwd | slugify)&amp;#34; -w &amp;#34;/$(pwd | slugify)&amp;#34; -ti --entrypoint= wata727/tflint:latest tflint &amp;#34;$@&amp;#34;   Demonstration</description>
    </item>
    
    <item>
      <title>hcl2json</title>
      <link>https://mullikine.github.io/posts/hcl2json/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/hcl2json/</guid>
      <description>Install hcltoo 1  docker pull mycujoo/hcltool   hcl2json (wrapper for hcltool) This tool converts hcl files into a json representation
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null # Example # hcltool $HOME/.</description>
    </item>
    
    <item>
      <title>Terraform</title>
      <link>https://mullikine.github.io/posts/terraform/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/terraform/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  Execution Plan Terraform has a &amp;#34;planning&amp;#34; step where it generates an execution plan. The execution plan shows what Terraform will do when you call apply. This lets you avoid any surprises when Terraform manipulates infrastructure.</description>
    </item>
    
  </channel>
</rss>