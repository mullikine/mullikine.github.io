<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tooling on Bodacious Blog</title>
    <link>https://mullikine.github.io/tags/tooling/</link>
    <description>Recent content in tooling on Bodacious Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Oct 2020 00:00:00 +1300</lastBuildDate>
    
	<atom:link href="https://mullikine.github.io/tags/tooling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Glossaries for learning in emacs</title>
      <link>https://mullikine.github.io/posts/glossaries-for-learning-in-emacs/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/glossaries-for-learning-in-emacs/</guid>
      <description>Overview of the glossary system Purpose The glossary system is like a wiki system, but more dynamic.
Glossaries can be overlain onto anything &amp;ndash; books, websites, Facebook conversations, code, etc.
The glossary system provides the following abilities:
 Document-specific glossaries Topic-specific glossaries Visual set functions (Union and difference) for glossaries Highlighting to see what has been entered into the glossary already  The glossary system allows me to read, ingest and learn from documents, seeing what I know from a glance.</description>
    </item>
    
    <item>
      <title>Automatic, interactive handling of build files and IaC</title>
      <link>https://mullikine.github.io/posts/automatic-interactive-handling-of-build-files-and-iac/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/automatic-interactive-handling-of-build-files-and-iac/</guid>
      <description>Premise I do not want to need to remember how to build certain projects.
I would like to self-document in code which types of build files I have encountered.
 Effortless Explorative Extensible  Demonstration 
Code zsh binding 1 2 3 4 5 6 7 8 9 10 11 12 13 14  function zsh-cr() { trap func_trap EXIT func_trap() { tput rc } tput sc exec &amp;lt;/dev/tty cr } # M-TAB bindkey -s &amp;#34;\e[2~&amp;#34; &amp;#34;^A^Kcr\n&amp;#34;   cr (bash)  Capabilities:  Interactively prioritise and suggest which build files to run Compile/run a specific build/source file, if specified Specify which type of file I&amp;rsquo;d like to treat this file as When one build file is unable to compile the project, or advance the build process, try the next one.</description>
    </item>
    
    <item>
      <title>searching for libraries in emacs with libraries.io</title>
      <link>https://mullikine.github.io/posts/searching-for-libraries-in-emacs-with-libraries-io/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/searching-for-libraries-in-emacs-with-libraries-io/</guid>
      <description>Summary I&amp;rsquo;d like to search for libraries using libraries.io, but not have to leave emacs.
Demonstration 
Add to eww&amp;rsquo;s URL handling hook to download the actual code 
Code Define an engine-mode engine 1 2 3  (defengine libraries &amp;#34;https://libraries.io/search?q=%s&amp;#34; :keybinding &amp;#34;/&amp;#34;)   Create the function to clean up the page after loading in eww 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  (defun clean-up-libraries-io () (interactive) (beginning-of-buffer) (toggle-read-only) (cua-set-mark) (search-forward &amp;#34;------&amp;#34;) (forward-line) (forward-char) (delete-selected) (end-of-buffer) (cua-set-mark) (re-search-backward &amp;#34;^License&amp;#34;) (previous-line) (delete-selected) (beginning-of-buffer) (toggle-read-only)) (add-to-list &amp;#39;eww-patchup-url-alist &amp;#39;(&amp;#34;://libraries.</description>
    </item>
    
    <item>
      <title>Navigating code language-agnostically with ctags</title>
      <link>https://mullikine.github.io/posts/navigating-code-language-agnostically-with-ctags/</link>
      <pubDate>Sat, 27 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/navigating-code-language-agnostically-with-ctags/</guid>
      <description>required tools  cscope pycscope cqmakedb ctags-exuberant tags2uml  supported languages Basically, as many as ctags supports.
 I have utilised only the following:  python php java c++ go rust javascript typescript     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  find -L -O3 $CWD \  -true \  -and \  \( \  -name &amp;#39;*.</description>
    </item>
    
    <item>
      <title>Automating Google vs via the terminal</title>
      <link>https://mullikine.github.io/posts/automating-google-vs-via-the-terminal/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-google-vs-via-the-terminal/</guid>
      <description>Original article https://medium.com/applied-data-science/the-google-vs-trick-618c8fd5359f   1 2 3 4 5 6 7 8 9 10 11  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null term=&amp;#34;$@&amp;#34; term=&amp;#34;$(p &amp;#34;$term&amp;#34; | urlencode)&amp;#34; curl &amp;#34;http://suggestqueries.google.com/complete/search?&amp;amp;output=toolbar&amp;amp;gl=us&amp;amp;hl=en&amp;amp;q=$term%20vs&amp;#34; | xml2json | jq -r &amp;#39;.toplevel.CompleteSuggestion[].suggestion.data&amp;#39; | sed &amp;#34;s/^$termvs \?//&amp;#34; | uniqnosort | sed &amp;#34;/^$/d&amp;#34; | pavs   1  google-vs apple | fzf --sync | xa google-vs | fzf --sync | xa google-vs | fzf --sync | xa google-vs | fzf --sync | xa google-vs   Demonstration: Finding alternatives</description>
    </item>
    
    <item>
      <title>Rosetta stones for commands and code</title>
      <link>https://mullikine.github.io/posts/rosetta-stones-for-commands-and-code/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/rosetta-stones-for-commands-and-code/</guid>
      <description>Setup commands 1 2 3 4 5 6 7 8  cd $NOTES/ws/rosetta-stones/windows-vs-linux url2org &amp;#34;https://www.lemoda.net/windows/windows2unix/windows2unix.html&amp;#34; &amp;gt; lemoda.net.org cd $NOTES/ws/rosetta-stones/shell elinks-dump &amp;#34;https://hyperpolyglot.org/shell&amp;#34; &amp;gt; hyperpolyglot.txt cd $NOTES/ws/rosetta-stones/lisp elinks-dump &amp;#34;https://hyperpolyglot.org/lisp&amp;#34; &amp;gt; hyperpolyglot.txt   TUI 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null topic=&amp;#34;$1&amp;#34; shift cd $NOTES/ws/rosetta-stones test -n &amp;#34;$topic&amp;#34; || topic=&amp;#34;$(find .</description>
    </item>
    
    <item>
      <title>GitHub Super-Linter and emacs</title>
      <link>https://mullikine.github.io/posts/github-super-linter-and-emacs/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/github-super-linter-and-emacs/</guid>
      <description>Article https://github.blog/2020-06-18-introducing-github-super-linter-one-linter-to-rule-them-all/ Source Code https://github.com/github/super-linter TLDR I create a plugin for emacs to use GitHub super linter  Use Super linter locally  Instructions https://github.com/github/super-linter/blob/master/docs/run-linter-locally.md  Create a wrapper script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null if test &amp;#34;$#&amp;#34; -eq 0; then set -- .</description>
    </item>
    
    <item>
      <title>Easily create term-mode wrappers for arbitrary TUI programs</title>
      <link>https://mullikine.github.io/posts/easily-create-term-mode-wrappers-for-arbitrary-tui-programs/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/easily-create-term-mode-wrappers-for-arbitrary-tui-programs/</guid>
      <description>First, create some emacs lisp functions  Create the interactive command make-or-run-etui-cmd which will be run from the terminal Create make-etui-cmd which will create an interactive emacs-lisp command for invoking the program Create defcmdmode which will create a minor mode for the command, allowing me to attach key bindings Create emacs-tui-run script which starts emacs and invokes make-or-run-etui-cmd Create make-etui-wrapper script which allows me to interactively create emacs wrapper scripts for TUI programs   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  (defun make-or-run-etui-cmd (cmd &amp;amp;rest args) (interactive (list (read-string &amp;#34;Command name:&amp;#34;))) (let* ((funname (concat &amp;#34;esh-&amp;#34; cmd)) ;; (fnsym (str2sym funname)) (fnsym ;; Force overwrite (make-etui-cmd cmd t) ;; (if (my/function-exists fnsym) ;; fnsym ;; (make-etui-cmd cmd)) )) (defcmdmode cmd) (eval `(,fnsym ,@args)))) (defun make-etui-cmd (cmd closeframe) &amp;#34;This function expects a one term command (binary name only) and it returns a new interactive function.</description>
    </item>
    
    <item>
      <title>Technologies Facebook is using</title>
      <link>https://mullikine.github.io/posts/technologies-facebook-is-using/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/technologies-facebook-is-using/</guid>
      <description>From Facebook https://opensource.facebook.com/
Hydra  Links https://github.com/facebookresearch/hydra https://hydra.cc/  Powered by Omegaconf.
1 2 3 4 5 6  Hydra [framework] Elegantly configure complex applications. https://hydra.cc   Basic example
 Configuration file config.yaml   1 2 3 4  db: driver: mysql user: omry pass: secret    Python file my_app.py   1 2 3 4 5 6 7 8 9  import hydra from omegaconf import DictConfig @hydra.</description>
    </item>
    
    <item>
      <title>Packaging</title>
      <link>https://mullikine.github.io/posts/packaging/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/packaging/</guid>
      <description>The purpose of packaging You can have a few people who have a lot of knowledge and they can share it so many many people who don&amp;rsquo;t have that knowledge can go use something and that&amp;rsquo;s where package managers are really powerful.
 Reference An Introduction to Helm - Matt Farina, Samsung SDS &amp;amp; Josh Dolitsky, Blood Orange - YouTube  Snapcraft (snap) https://snapcraft.io/docs/snapcraft-yaml-reference
Pros of debs over snaps:  Smaller packages (debs don&amp;rsquo;t need to bundle their dependencies).</description>
    </item>
    
    <item>
      <title>Review of &#39;grex - Rust&#39; - generate regex from test cases</title>
      <link>https://mullikine.github.io/posts/review-of-grex-rust/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-grex-rust/</guid>
      <description>Original article grex - Rust Code GitHub - pemistahl/grex: A command-line tool and library for generating regular expressions from user-provided test cases  Demonstration Fully automated 
Semi automated 
1 2 3  Thomas Bergersen - Avalanche (Female Vocals) - YouTube Thomas Bergersen - Our Destiny (Sun) - YouTube Thomas Bergersen - So Small - YouTube   1  ^Thomas Bergersen \- (?:Avalanche \(Female Vocals\)|(?:Our Destiny \(Sun\)|So Small)) \- YouTube$   emacs has a built-in which is far less powerful 1  (regexp-opt &amp;#39;(&amp;#34;alex&amp;#34; &amp;#34;albert&amp;#34; &amp;#34;alois&amp;#34; &amp;#34;bummer&amp;#34;))   &amp;#34;\&amp;#34;\\\\(?</description>
    </item>
    
    <item>
      <title>Review of &#39;Microsoft: &#34;The future of tech, with Kevin Scott and guests // Microsoft Build&#34;&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-microsoft-the-future-of-tech-with-kevin-scott-and-guests-microsoft-build/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-microsoft-the-future-of-tech-with-kevin-scott-and-guests-microsoft-build/</guid>
      <description>Original video Microsoft: &amp;ldquo;The future of tech, with Kevin Scott and guests // Microsoft Build&amp;rdquo; Original article News OpenAI Model Generates Python Code - YouTube Original video from microsoft https://www.youtube.com/watch?v=fZSFNUT6iY8  Summary At 29 min you can see a demo of code generation from comments.
This is similar to what deep tabnine currently does, though probably uses a more powerful language model.
GitHub CodeSpaces and VSCode will probably have this built-in.</description>
    </item>
    
    <item>
      <title>Review of &#39;mermaid - flowcharts, diagrams, etc.&#39;</title>
      <link>https://mullikine.github.io/posts/review-of-mermaid-markdownish-syntax-for-generating-flowcharts-digrams/</link>
      <pubDate>Mon, 13 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/review-of-mermaid-markdownish-syntax-for-generating-flowcharts-digrams/</guid>
      <description>mermaid GitHub repo mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs. Online editor https://mermaid-js.github.io/mermaid-live-editor/ Cheat sheet Mermaid Cheat Sheet @ http://jojozhuang.github.io  Setup docker image I compiled this docker image myself as existing images on dockerhub were outdated.
https://github.com/matthewfeickert/mermaid-CLI
I bumped the mermaid version up from 8.2.6 to 8.4.4 because some of the examples were not working but I&amp;rsquo;m still not able to build some of the diagrams.</description>
    </item>
    
    <item>
      <title>Converting between ttyrec formats</title>
      <link>https://mullikine.github.io/posts/converting-between-ttyrec-formats/</link>
      <pubDate>Sat, 11 Apr 2020 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/converting-between-ttyrec-formats/</guid>
      <description>Resources Terminal Recorders: A Comprehensive Guide  Recorders    util notes     asciinema rec May save locally. High fidelity. Json (large size).   ttyrec Preservation of original input. Has provenance.   ttystudio Inhouse json output. Long build duration.    Gif converters    util input notes     seq2gif ttyrec Extremely fast converter.   asciicast2gif asciicast runs in docker, uses phantomjs and imagemagic.</description>
    </item>
    
    <item>
      <title>★ Automating rat, a powerful productivity tool ★</title>
      <link>https://mullikine.github.io/posts/rat/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/rat/</guid>
      <description>Source https://github.com/ericfreese/rat Tweaks https://github.com/mullikine/rat/commits/shane See also Creating a rat mode for docker // Splunky Splog Coincidence The moment I finished writing this up, the fireworks for Chinese New Year began. It&amp;rsquo;s the year of the rat! I love it! I had no idea!  I remember seeing this a few years ago but at the time I was too much of a noob.
Just recently I was playing around with docker commands when I realised it would be perfectly suited for rapidly putting together a TUI.</description>
    </item>
    
    <item>
      <title>ludo – login sudo</title>
      <link>https://mullikine.github.io/posts/ludo/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/ludo/</guid>
      <description>Designing ludo. Using it for lazydocker 
Using ludo to pull a container 1  ludo docker pull axarev/parsr   </description>
    </item>
    
    <item>
      <title>Review of emacs distributions</title>
      <link>https://mullikine.github.io/posts/emacs-distributions/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-distributions/</guid>
      <description>All the distributions I use are overlaid with my own customisations to make them very similar to each other by making my own key bindings and hydras layer. They still retain their own peculiarities, but I have taken a decent portion of code from each distribution to form a common functionality layer.
I have over 1300 emacs plugins which all distributions share.
Spacemacs  Very good default keybindings. Great support for LSP.</description>
    </item>
    
    <item>
      <title>Creating an emacs mode for asciinema.org</title>
      <link>https://mullikine.github.io/posts/an-emacs-mode-for-asciinema-playback/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/an-emacs-mode-for-asciinema-playback/</guid>
      <description>Related articles Hacker News mode and minor modes for websites // Bodacious Blog  This blog is about creating a minor mode for browsing asciinema.org and extending eww-mode to handle the video links.
I use tmux from emacs to spawn a new window that starts the playback when a link is clicked.
Demonstration Here, I use the asciinema mode for browsing and opening asciinema recordings from my blog.</description>
    </item>
    
    <item>
      <title>★ semi-automated interactive stream editing: piping through expect and emacs ★</title>
      <link>https://mullikine.github.io/posts/semi-automated-stream-editing-piping-through-expect-and-emacs/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/semi-automated-stream-editing-piping-through-expect-and-emacs/</guid>
      <description>Here, the eipe2 script wraps around emacsclient to enable myself to intercept the traffic of a bash pipeline and edit it mid-command. It&amp;rsquo;s modelled after vipe.
But that is only half the trick. I then do the same for tcl/expect. On its own, expect can&amp;rsquo;t edit the stream, but by placing an eipe2 within the expect script I can complete the pipeline, automating emacs with expect.
But that is not the most awesome part.</description>
    </item>
    
    <item>
      <title>Automating build systems for many languages</title>
      <link>https://mullikine.github.io/posts/build-systems/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/build-systems/</guid>
      <description>Related reading (more information) Languages supported by my development environment // Bodacious Blog  I have automated my interaction with these build tools.
This list does not include my emacs environment; it&amp;rsquo;s not even close to being exhaustive.
   name language example     aribtrary dotfiles (many) * .compton.conf. Kill and restart compton   make * list and fuzzy select targets then run them   pip, setup.</description>
    </item>
    
    <item>
      <title>TensorFlow Debugger (tfdb) and emacs</title>
      <link>https://mullikine.github.io/posts/tensorflow-debugger-tfdb-and-emacs/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/tensorflow-debugger-tfdb-and-emacs/</guid>
      <description>Relevant source material TensorFlow Debugger Screencast - YouTube DebugTFBasics  I plan on building a mode for emacs that includes syntax highlighting and keyboard macros, but I&amp;rsquo;ll have to wait until tfdb is released for TF2.0.
Wrapping TensorFlow Sessions With tfdbg Add the following lines of code to use tfdbg and then contain the Session object using a debugger wrapper.
1  from tensorflow.python import debug as tf_debug    CLI should be called before and after Session.</description>
    </item>
    
    <item>
      <title>★ Complex Dwarf Fortress macros with tcl/expect, emacs and tmux ★</title>
      <link>https://mullikine.github.io/posts/dwarf-fortress-macros-with-emacs-and-tmux/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dwarf-fortress-macros-with-emacs-and-tmux/</guid>
      <description>Related articles minor mode wrappers for shell commands // Bodacious Blog  Here I make an emacs mode for Dwarf Fortress and create some keybindings in emacs which runs a generated tcl/expect script over Dwarf Fortress using tmux to attach itself to the tty inside term- mode.
Write the emacs lisp This macro creates minor modes from a list of shell command names.
These shell commands may be arbitrary terminal programs.</description>
    </item>
    
    <item>
      <title>explainshell in zsh</title>
      <link>https://mullikine.github.io/posts/explainshell/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/explainshell/</guid>
      <description>Create the script 1 2 3 4 5 6 7 8 9 10 11 12 13  #!/bin/bash export TTY IFS= read -rd &amp;#39;&amp;#39; input &amp;lt; &amp;lt;(cat /dev/stdin) query=&amp;#34;$(p &amp;#34;$input&amp;#34; | urlencode)&amp;#34; url=&amp;#34;https://explainshell.com/explain?cmd=$query&amp;#34; # echo &amp;#34;$url&amp;#34; exec &amp;lt;&amp;amp;1 eww &amp;#34;$url&amp;#34;   Create the function 1 2 3 4 5 6 7 8 9  function zshexplainshell { tf_zle=&amp;#34;$(mktemp ${TMPDIR}/tf_zleXXXXXX || echo /dev/null)&amp;#34; print -R - &amp;#34;$PREBUFFER$BUFFER&amp;#34; &amp;gt; $tf_zle exec &amp;lt;&amp;amp;1 print -R - &amp;#34;$PREBUFFER$BUFFER&amp;#34; | explainshell print -Rz - &amp;#34;$(&amp;lt;$tf_zle)&amp;#34; zle send-break	# Force reload from the buffer stack }   Create the binding 1 2 3 4  # M-E autoload -z zshexplainshell zle -N zshexplainshell bindkey &amp;#34;\eE&amp;#34; zshexplainshell   Demonstration 1  x -sh &amp;#34;zcd .</description>
    </item>
    
    <item>
      <title>Browsing sqlite3 databases with edbi for emacs</title>
      <link>https://mullikine.github.io/posts/browsing-databases-with-emacs-edbi/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/browsing-databases-with-emacs-edbi/</guid>
      <description>Set up edbi 1 2  # for emacs edbi cpan install DBD::SQLite   Create the scripts select-database 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } is_tty istty=$?</description>
    </item>
    
    <item>
      <title>DAP mode for emacs</title>
      <link>https://mullikine.github.io/posts/dap-mode/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/dap-mode/</guid>
      <description>Related reading Setting up LSP with emacs (Go, Java, Python, Rust, C++, Haskell) // Bodacious Blog Official page for Debug Adapter Protocol Python environment // Bodacious Blog  DAP mode is like LSP for debugging.
bindings 1 2 3  (define-key my-mode-map (kbd &amp;#34;M-m a b&amp;#34;) #&amp;#39;dap-hydra/body) (define-key my-mode-map (kbd &amp;#34;M-m a a&amp;#34;) #&amp;#39;dap-ui-breakpoints) (define-key prog-mode-map (kbd &amp;#34;M-\&amp;#34;&amp;#34;) &amp;#39;handle-debug)   State of languages with DAP in my own environment    Language DAP Working LSP Working Fallback working Current user experience     Python ✓ ✓ ✓ pdb Good   Java ✓ ✓ ✓ eclim Good    Java Here is an example of me creating a breakpoint with a condition and running the debugger.</description>
    </item>
    
    <item>
      <title>Setting up LSP with emacs (Go, Java, Python, Rust, C&#43;&#43;, Haskell, JS, TS, Ruby…)</title>
      <link>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description>Guides used https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/ https://github.com/emacs-lsp/lsp-java  1 2 3 4 5  Debug Adaptor Protocol DAP The LSP of debugging. https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website    State of languages with LSP in my own environment    Language LSP Working Fallback working Current user experience TabNine enabled REPL / Playground DAP (debug) Working Static analysis Complaints Custom LSP improvements     Go ✓ ✓ Amazing ✓ ✓  ✓ Go toolchain changes too quickly    Python ✓ ✓ Amazing ✓ ✓ ✓ ✓     Racket ✓ ✓ racket-mode Amazing  ✓  ✓     Java ✓ ✓ eclim Good ✓ ✓ (default) ✓ ✓ A little slow.</description>
    </item>
    
    <item>
      <title>Searching for gists</title>
      <link>https://mullikine.github.io/posts/searching-for-gists/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/searching-for-gists/</guid>
      <description>Create a gist-search script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } gr gist &amp;#34;$@&amp;#34; | grep //gist.github.com/ | urldecode | scrape &amp;#34;.*gist.github.com/[^?/]+&amp;#34; | sort | uniq | scrape &amp;#34;[^/]+$&amp;#34; | { if is_tty; then fzf | xa gist-list else cat fi }   Demonstration</description>
    </item>
    
    <item>
      <title>Extending gist-list to copy the URL, browse and download gists</title>
      <link>https://mullikine.github.io/posts/extending-gist-list/</link>
      <pubDate>Tue, 03 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-gist-list/</guid>
      <description>Using gist-list 1  x -sh &amp;#34;gist-list erantapaa&amp;#34; -e &amp;#34;Id&amp;#34; -c s -s non-blocking -c m -a   1  + ebbcd56... 10/20/15 20:57 public non-blocking I/O examples in Haskell   
Sometimes it doesn&amp;rsquo;t open  error After 0 kbd macro iterations: run-hooks: Cannot open load file: No such file or directory, drupal-mode  Extracting tabulated-list-id and forming a URL is the solution.
 solution tabulated-list-id &amp;quot;16b1a208e2725e7d9487dbb648c65034&amp;quot; This is a text property.</description>
    </item>
    
    <item>
      <title>Exploring Hoogle</title>
      <link>https://mullikine.github.io/posts/exploring-hoogle/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/exploring-hoogle/</guid>
      <description>Prereading Real-time interactive documentation lookup for haskell type-declarative search // Bodacious Blog GHCi and Haskell code intermixed in babel // Bodacious Blog  Finding package from the module name / an import statement Demonstration 
I created these two functions 1 2 3 4 5 6 7 8 9  hsImportToPackage :: String -&amp;gt; IO String hsImportToPackage modulename = do (_, Just hout, _, _) &amp;lt;- createProcess (proc &amp;#34;hs-import-to-package&amp;#34; [modulename]){ std_out = CreatePipe } hGetContents hout printIOString :: IO String -&amp;gt; IO () printIOString a = do str &amp;lt;- a putStrLn str   1  ghciol &amp;#34;:i fmap&amp;#34;   class Functor (f :: * -&amp;gt; *) where fmap :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b .</description>
    </item>
    
    <item>
      <title>Overview of Flask, Jinja2, templating engine</title>
      <link>https://mullikine.github.io/posts/jinja2/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/jinja2/</guid>
      <description>Original reading Jinja2 Explained in 5 Minutes! - codeburst  Demonstration working with a simple flask app 
Flask Example apps  https://github.com/greyli/flask-examples (4 months old) https://github.com/miguelgrinberg/flask-examples (6 years old)  greyli/flask-examples Hello world
$MYGIT/greyli/flask-examples/hello/app.py
https://github.com/greyli/flask-examples/blob/master/hello/app.py
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  # -*- coding: utf-8 -*- &amp;#34;&amp;#34;&amp;#34; :author: Grey Li (李辉) :url: http://greyli.</description>
    </item>
    
    <item>
      <title>A makeshift template processor in bash</title>
      <link>https://mullikine.github.io/posts/makeshift-template-processor/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/makeshift-template-processor/</guid>
      <description>1  echo -n &amp;#34;Hi &amp;lt;name&amp;gt;. How are you?&amp;#34; | tl -name Shane   This is similar to python f-strings 1 2 3  name = &amp;#34;Eric&amp;#34; age = 74 print(f&amp;#34;Hello, {name}. You are {age}.&amp;#34;)   Hello, Eric. You are 74. In fact, I should make an f-strings-based utility.
Build the replace-substring script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!</description>
    </item>
    
    <item>
      <title>Future of emacs</title>
      <link>https://mullikine.github.io/posts/future-of-emacs/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/future-of-emacs/</guid>
      <description>This doesn&amp;rsquo;t actually represent my own view on the future of emacs.
I do agree about the current extension language being a major shortcoming and I see emacs lisp as not being a declarative programming language as being the main existential threat.
 References Emacs: The Editor for the Next Forty Years - Perry E. Metzger - EmacsConf 2019  Shortcomings of emacs  Extension language still mediocre. Implementation language is terrible.</description>
    </item>
    
    <item>
      <title>GHCi and Haskell code intermixed in babel</title>
      <link>https://mullikine.github.io/posts/babel-ghci-and-haskell/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/babel-ghci-and-haskell/</guid>
      <description>Demonstration Running ghcih inside neovim inside emacs 
Create the ghcih script 1 2 3 4 5 6  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null xs ghci -H &amp;#34;$@&amp;#34;   Create the ghci case in xs When -H is provided, it will split the input code by assuming that the initial part is a haskell module and anything from the first ghci : command and onwards is ghci code.</description>
    </item>
    
    <item>
      <title>Generate emacs functions from CLI commands</title>
      <link>https://mullikine.github.io/posts/generate-emacs-functions-from-cli-commands/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/generate-emacs-functions-from-cli-commands/</guid>
      <description>Prerequisite reading Didactic emacs-lisp macro example (ie. a tutorial) // Bodacious Blog  Define the commands 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  (defmacro defshellfilter (&amp;amp;rest body) &amp;#34;Define a new string filter function based on a shell command&amp;#34; (let* (;; (s (str2sym (concat &amp;#34;sh/&amp;#34; (sym2str (first body))))) (base (slugify (list2string body) t)) (sm (str2sym (concat &amp;#34;sh/m/&amp;#34; base))) (sf (str2sym (concat &amp;#34;sh/&amp;#34; base))) (sfptw (str2sym (concat &amp;#34;sh/ptw/&amp;#34; base)))) `(progn (defmacro ,sm (&amp;amp;rest body) `(bp ,@&amp;#39;,body ,@body)) (defun ,sf (&amp;amp;rest body) (eval `(bp ,@&amp;#39;,body ,@body))) ;; This last one is the thing the function returns.</description>
    </item>
    
    <item>
      <title>Interactively loading GHCi commands</title>
      <link>https://mullikine.github.io/posts/interactively-loading-ghci-commands/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/interactively-loading-ghci-commands/</guid>
      <description>I&amp;rsquo;d like to be able to load commands into ghci and have the commands verbosely printed.
Likely you have a lot of .ghci files 1  locate .ghci   Case in point This file is actually a .ghci file as it contains commands such as :t (&amp;gt;)
https://github.com/bishboria/learnyouahaskell/blob/master/02/2%5Ftypes.hs
I created an expect script for this purpose using my expect-generation script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  hs|ghci) { cmd=&amp;#34;$1&amp;#34; shift if stdin_exists; then tfin=&amp;#34;$(cat | tf txt)&amp;#34; inpara=&amp;#34;-sf $(aqf &amp;#34;$tfin&amp;#34;)&amp;#34; else : ${cmd:=&amp;#34;foldl (/) 64 [4,2,4]&amp;#34;} fi # x -cd &amp;#34;$(pwd)&amp;#34; -sh &amp;#34;ghci&amp;#34; -r &amp;#34;^.</description>
    </item>
    
    <item>
      <title>Python environment</title>
      <link>https://mullikine.github.io/posts/python-environment/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/python-environment/</guid>
      <description>https://pipxproject.github.io/pipx/comparisons/
pyenv Makes it easy to install, manage, and switch between multiple Pythons.
1 2 3 4 5 6 7 8 9  # install a bunch of pythons pyenv install 3.8.0 pyenv install 3.7.4 pyenv install 3.6.9 pyenv install 2.7.16 pyenv install pypy3.6-7.1.1 # set the default python pyenv global 3.8.0   using pyenv Check which version is set and which are available 1  pyenv versions   * system (set by /home/shane/.</description>
    </item>
    
    <item>
      <title>Coding faster with Deep TabNine</title>
      <link>https://mullikine.github.io/posts/using-deep-tabnine/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/using-deep-tabnine/</guid>
      <description>Example of using Deep TabNine to write with example code</description>
    </item>
    
    <item>
      <title>Simulating mouse clicks in emacs</title>
      <link>https://mullikine.github.io/posts/simulating-mouse-clicks-in-emacs/</link>
      <pubDate>Tue, 12 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/simulating-mouse-clicks-in-emacs/</guid>
      <description>Using tmux, emacs and vim, I create some bindings to allow you to send mouse clicks to the terminal programmatically.
I had attempted to do this with emacs lisp but it was overly complicated and had I succeeded only emacs would be able to understand the mouse codes.
Click at the cursor location Make the tmux bindings 1 2  bind -n C-M-x run -b &amp;#34;tm mousedown&amp;#34; bind -n C-M-z run -b &amp;#34;tm mouseup&amp;#34;   Make the tm script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51  mousedown|mouseup) { while [ $# -gt 0 ]; do opt=&amp;#34;$1&amp;#34;; case &amp;#34;$opt&amp;#34; in -t) { TMUX_PANE=&amp;#34;$2&amp;#34; shift shift } ;; *) break; esac; done [ -n &amp;#34;$1&amp;#34; ] &amp;amp;&amp;amp; x=&amp;#34;$1&amp;#34; &amp;amp;&amp;amp; shift [ -n &amp;#34;$1&amp;#34; ] &amp;amp;&amp;amp; y=&amp;#34;$1&amp;#34; &amp;amp;&amp;amp; shift : ${TMUX_PANE:=&amp;#34;$CALLER_PANE&amp;#34;} # tm cursor if test -z &amp;#34;$x&amp;#34;; then x=&amp;#34;$(tmux display -t &amp;#34;$TMUX_PANE&amp;#34; -p &amp;#34;#{cursor_x}&amp;#34;)&amp;#34; fi if test -z &amp;#34;$y&amp;#34;; then y=&amp;#34;$(tmux display -t &amp;#34;$TMUX_PANE&amp;#34; -p &amp;#34;#{cursor_y}&amp;#34;)&amp;#34; fi # ns &amp;#34;$f $TMUX_PANE $x $y&amp;#34; &amp;amp;&amp;gt;/dev/null if [ -n &amp;#34;$TMUX_PANE&amp;#34; ] &amp;amp;&amp;amp; [ -n &amp;#34;$x&amp;#34; ] &amp;amp;&amp;amp; [ -n &amp;#34;$y&amp;#34; ]; then case &amp;#34;$f&amp;#34; in mousedown) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -d $x $y)&amp;#34; } ;; mouseup) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -u $x $y)&amp;#34; } ;; click) { tmux send-keys -t &amp;#34;$TMUX_PANE&amp;#34; -l &amp;#34;$(xterm-click -d $x $y)&amp;#34; sleep 0.</description>
    </item>
    
    <item>
      <title>Editing grep results with emacs</title>
      <link>https://mullikine.github.io/posts/editing-grep-results-with-emacs/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/editing-grep-results-with-emacs/</guid>
      <description>Either require ivy or steal it&amp;rsquo;s function 1 2 3 4 5 6  (defun ivy-wgrep-change-to-wgrep-mode () &amp;#34;Forward to `wgrep-change-to-wgrep-mode&amp;#39;.&amp;#34; (interactive) (if (require &amp;#39;wgrep nil &amp;#39;noerror) (wgrep-change-to-wgrep-mode) (error &amp;#34;Package wgrep isn&amp;#39;t installed&amp;#34;)))   When grep-mode is started, wgrep-setup must run to prepare wgrep 1 2 3 4 5 6 7 8 9 10 11 12  (defun grep-mode-hook-run () ;; This saves the keymap so it can be restored (wgrep-setup) (define-key compilation-button-map (kbd &amp;#34;C-m&amp;#34;) &amp;#39;compile-goto-error) (define-key grep-mode-map (kbd &amp;#34;C-m&amp;#34;) &amp;#39;compile-goto-error) ;; (define-key grep-mode-map (kbd &amp;#34;C-c C-p&amp;#34;) #&amp;#39;wgrep-change-to-wgrep-mode) ) (add-hook &amp;#39;grep-mode-hook &amp;#39;grep-mode-hook-run t) ;; If =C-x C-q= is not available we can use this binding instead (define-key grep-mode-map (kbd &amp;#34;C-c C-p&amp;#34;) #&amp;#39;ivy-wgrep-change-to-wgrep-mode)   Set up grep-mode 1 2 3 4 5 6  ;; Unmap some keys so we can type in grep-mode (define-key grep-mode-map (kbd &amp;#34;h&amp;#34;) nil) (define-key grep-mode-map (kbd &amp;#34;g&amp;#34;) nil) ;; This connects grep-mode to wgrep (define-key grep-mode-map (kbd &amp;#34;C-x C-q&amp;#34;) #&amp;#39;ivy-wgrep-change-to-wgrep-mode)   Set up wgrep-mode 1 2  (setq wgrep-auto-save-buffer t) (define-key wgrep-mode-map (kbd &amp;#34;C-m&amp;#34;) #&amp;#39;compile-goto-error)   wgrep-auto-save-buffer is needed so that when grep results are edited, they save automatically.</description>
    </item>
    
    <item>
      <title>Automating tcl/expect</title>
      <link>https://mullikine.github.io/posts/automating-expect/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/automating-expect/</guid>
      <description>Using tmux, expect and bash I made a script which you can use to automate practically anything on the command line in an easy way.
 Related articles semi-automated interactive stream editing: piping through expect and emacs // Bodacious Blog Complex Dwarf Fortress macros with tcl/expect, emacs and tmux // Bodacious Blog Automating TOR and TPB // Bodacious Blog  Build the x scriptdescription>
    </item>
    
    <item>
      <title>C&#43;&#43; template metaprogramming with Racket</title>
      <link>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/cpp-template-metaprogramming-with-racket/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #lang fulmar (require fulmar/meta) (definitions (define/meta zero) (define/meta succ (n)) (define/meta (add m n) [((succ n-minus-one) m) (add n-minus-one (succ m))] [((zero) m) m]) (define/meta (m-equal a b) [(v v) v])) #&amp;lt;&amp;lt;tests-section-end int main(int argc, const char *argv[]) { Add&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero &amp;gt; &amp;gt;, Succ&amp;lt;Zero&amp;gt; &amp;gt;::result typedef result; MEqual&amp;lt;result, Succ&amp;lt;Succ&amp;lt;Succ&amp;lt;Zero&amp;gt; &amp;gt; &amp;gt; &amp;gt;::result typedef assert; return 0; } tests-section-end   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  /* This file was generated by fulmar version 0.</description>
    </item>
    
    <item>
      <title>Graphviz and Hugo</title>
      <link>https://mullikine.github.io/posts/graphviz/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/graphviz/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph-ascii :async :results verbatim code  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ s1 ┃ ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ v ∘━━━━∘ #================================# ∘━━━━∘ ┃ s5 ┃ &amp;lt;━┄┄H low-priority H &amp;lt;━┄┄┃ s2 ┃ ∘━━━━∘ #================================# ∘━━━━∘ ^ ┃ ┃ ^ ┃ ┃ wait-time exceeded ┃ ┃ ┃ v ┃ ┃ ┃ #=====================# ┃ ∘━━━━∘ ∘━━━━━━┄┄H high-priority H ┃ ┃ s3 ┃ #=====================# ┃ ∘━━━━∘ ┃ ┃ ┃ ┃ v ┃ ∘━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ s4 ┃ &amp;lt;∘ ∘━━━━━━━━━━━━━━━━━━━━━∘   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph priority :async :results raw drawer  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #+BEGIN_SRC graphviz-dot-n :filter dot-digraph-ascii-lr :async :results verbatim code  &amp;#34;low-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;high-priority&amp;#34; [shape=&amp;#34;doublecircle&amp;#34; color=&amp;#34;orange&amp;#34;]; &amp;#34;s1&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s2&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;s3&amp;#34; -&amp;gt; &amp;#34;low-priority&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; &amp;#34;low-priority&amp;#34; -&amp;gt; &amp;#34;high-priority&amp;#34; [label=&amp;#34;wait-time exceeded&amp;#34;]; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s4&amp;#34;; &amp;#34;high-priority&amp;#34; -&amp;gt; &amp;#34;s5&amp;#34;; #+END_SRC   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ∘━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━∘ ┃ ┃ ┃ ∘━━━━∘ #==============# wait-time exceeded #===============# ∘━━━━∘ ┃ ┃ s1 ┃ ━━&amp;gt; H H ━━━━━━━━━━━━━━━━━━━━&amp;gt; H high-priority H ━━&amp;gt; ┃ s4 ┃ ┃ ∘━━━━∘ H H #===============# ∘━━━━∘ ┃ H H ^ ┃ H low-priority H ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━∘ ┃ H H ┃ ∘━━━━∘ H H ∘━━━━━━━━━━━━━━━∘ ┃ ┃ s2 ┃ ━━&amp;gt; H H &amp;lt;━━━━━━━━━━━━━━━━━━━┄┄┃ s3 ┃ ┃ ∘━━━━∘ #==============# ∘━━━━━━━━━━━━━━━∘ ┃ ┃ ┃ ┃ ┃ v ┃ ∘━━━━━━━━━━━━━━∘ ∘━━━━━━━━━━-&amp;gt; ┃ s5 ┃ ∘━━━━━━━━━━━━━━∘   1 2 3 4 5 6 7 8 9  &amp;#34;Back&amp;#34; [shape=&amp;#34;egg&amp;#34; color=&amp;#34;green&amp;#34; style=&amp;#34;filled&amp;#34; fillcolor=&amp;#34;yellow&amp;#34;]; &amp;#34;Forth&amp;#34; [shape=&amp;#34;house&amp;#34; color=&amp;#34;red&amp;#34;]; &amp;#34;Other&amp;#34; [shape=&amp;#34;invtriangle&amp;#34; color=&amp;#34;blue&amp;#34;]; &amp;#34;Back&amp;#34; -&amp;gt; &amp;#34;Forth&amp;#34; [color=&amp;#34;orange&amp;#34; label=&amp;#34;weee&amp;#34;]; &amp;#34;Forth&amp;#34; -&amp;gt; &amp;#34;Back&amp;#34; [color=&amp;#34;purple&amp;#34; label=&amp;#34;eeew&amp;#34;]; &amp;#34;Other&amp;#34; -&amp;gt; &amp;#34;Forth&amp;#34; &amp;#34;Other&amp;#34; -&amp;gt; &amp;#34;Back&amp;#34;     1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  subgraph clusterEncoders { style = filled fillcolor = lightgrey node [style=filled,fillcolor=lightgrey,shape=circle]; label = &amp;#34;Set of encoders&amp;#34; subgraph clusterEncoder1 { fillcolor = white label = &amp;#34;Encoder 1&amp;#34;; f1[label=&amp;#34;FFNN&amp;#34;] a1[label=&amp;#34;Self-Attention layer&amp;#34;] a1 -&amp;gt; f1 } subgraph clusterEncoder2 { fillcolor = white label = &amp;#34;Encoder 2&amp;#34;; f2[label=&amp;#34;FFNN&amp;#34;] a2[label=&amp;#34;Self-Attention layer&amp;#34;] a2 -&amp;gt; f2 } subgraph clusterEncoderN { fillcolor = white label = &amp;#34;Encoder N&amp;#34;; etc [label=&amp;#34;.</description>
    </item>
    
    <item>
      <title>Deep TabNine and emacs</title>
      <link>https://mullikine.github.io/posts/emacs-deep-tab-nine/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/emacs-deep-tab-nine/</guid>
      <description>Deep TabNine can supplement your autocompletion needs by providing you with example code.
 plugin https://github.com/TommyX12/company-tabnine/  Objective Have two bindings; one for regular company complete and one for tabnine.
   kb f     M-` company-complete   M-Tab company-tabnine    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  (require &amp;#39;company-tabnine) ;; TODO Fix ;; While browsing the completions list, if I press &amp;lt;space&amp;gt; then company aborts.</description>
    </item>
    
    <item>
      <title>LaTeX in emacs</title>
      <link>https://mullikine.github.io/posts/latex-in-emacs/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/latex-in-emacs/</guid>
      <description>Prereading Compounding Confoundment: arbitrary interpreters for Babel // Bodacious Blog
Setup Create the texalg2png script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #!/bin/bash export TTY read -r -d &amp;#39;&amp;#39; texcode &amp;lt;&amp;lt;HEREDOC \documentclass{standalone} \usepackage{varwidth} \usepackage{algorithm} %ctan.org\pkg\algorithms \usepackage{algpseudocode} \begin{document} \begin{varwidth}{\linewidth} \par\noindent \begin{algorithmic}[1] $(cat) \end{algorithmic} \end{varwidth} \end{document} HEREDOC printf -- &amp;#34;%s&amp;#34; &amp;#34;$texcode&amp;#34; | tex2png &amp;#34;$@&amp;#34;   Create the tex2png script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  #!</description>
    </item>
    
    <item>
      <title>emacs for scraping Google search results</title>
      <link>https://mullikine.github.io/posts/use-emacs-to-scrape-google-search-results/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/use-emacs-to-scrape-google-search-results/</guid>
      <description>I have had issues with using python libraries for scraping Google search results.
It appears that pip libraries keep going out of order.
Therefore, I switched to scraping with emacs.
I have developed a faith in the eww browser due to its reliability.
Create the elisp function which uses xurls to scrape URLs from text 1 2 3 4 5  (defun google-scrape-after-loaded () ;; (new-buffer-from-string (sh/ptw/uniqnosort (sh/ptw/xurls (format &amp;#34;%S&amp;#34; (buffer-string)))) &amp;#34;*google-results*&amp;#34;) (let ((results (sh/ptw/uniqnosort (sh/ptw/xurls (format &amp;#34;%S&amp;#34; (buffer-string)))))) (write-string-to-file results &amp;#34;/tmp/eww-scrape-output.</description>
    </item>
    
    <item>
      <title>Playing with Kaggle, R and ESS</title>
      <link>https://mullikine.github.io/posts/kaggle-r-ess/</link>
      <pubDate>Fri, 25 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/kaggle-r-ess/</guid>
      <description>Build the script kag This is used for
 Downloading datasets to an organised directory structure Viewing CSV results in visidata by default Keeping track of history Caching results   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null is_tty() { # If stout is a tty [[ -t 1 ]] } slug=&amp;#34;$(echo &amp;#34;$3&amp;#34; | slugify)&amp;#34; dsname=&amp;#34;$(echo &amp;#34;$3&amp;#34; | sed &amp;#39;s=.</description>
    </item>
    
    <item>
      <title>Extending Babel</title>
      <link>https://mullikine.github.io/posts/extending-babel/</link>
      <pubDate>Thu, 24 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-babel/</guid>
      <description>previous article Compounding Confoundment: arbitrary interpreters for Babel // Bodacious Blog  Automate the process of changing the babel block wrapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  (defun org-babel-raise () &amp;#34;Move the interior of a babel to the outside: remove the babel block chrome and keep only the source code.</description>
    </item>
    
    <item>
      <title>Using sqlite with postgres table browsing pager in emacs</title>
      <link>https://mullikine.github.io/posts/sqlite-output-in-postgres-viewer-in-emacs/</link>
      <pubDate>Sun, 20 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/sqlite-output-in-postgres-viewer-in-emacs/</guid>
      <description>Create the edbi script 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #!/bin/bash export TTY path=&amp;#34;$1&amp;#34; case &amp;#34;$path&amp;#34; in *.sqlite|*.db) { sp -e &amp;#34;(edbi-sqlite $(aqf &amp;#34;$path&amp;#34;))&amp;#34; } ;; *) { orspe -ci &amp;#34;edbi:open-db-viewer&amp;#34; } ;; esac   add the rules for ranger 1 2  ext sqlite = o-db &amp;#34;$@&amp;#34; ext db = o-db &amp;#34;$@&amp;#34;</description>
    </item>
    
    <item>
      <title>Taming term-mode</title>
      <link>https://mullikine.github.io/posts/taming-term/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/taming-term/</guid>
      <description>First attempt You can skip this and scroll down to the solution or read it to see some of the problems I was having with term.el.
Problems with term.el Any minor mode which is enabled while term is running will override bindings Therefore, if you can, make any such bindings that may interfere with term into global mappings instead.
1 2 3 4 5 6 7 8  ;; Comment this out ;; (define-key my-mode-map (kbd &amp;#34;M-k&amp;#34;) &amp;#39;avy-goto-char) ;; Unload binding (define-key my-mode-map (kbd &amp;#34;M-k&amp;#34;) nil) ;; Replace with this (define-key global-map (kbd &amp;#34;M-k&amp;#34;) &amp;#39;avy-goto-char)   gud-mode stole C-c C-a C-a is important in many programs for going to the start of the line.</description>
    </item>
    
    <item>
      <title>awk-ward mode for emacs</title>
      <link>https://mullikine.github.io/posts/awk-ward/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/awk-ward/</guid>
      <description>https://gitlab.com/kisaragi-hiu/awk-ward.el
This is a neat plugin that lets you edit awk scripts with real time feedback, displaying both the output and any errors.
Update awk-ward to enable updates on any buffer modification The problem as it has been designed to updates only when you are typing text in to the program.
Patch Use post-command-hook instead of post-self-insert-hook (07a56482) Commits Shane Mulligan / awk-ward.el GitLab
Demonstration of awk-ward with the patch working</description>
    </item>
    
    <item>
      <title>Review of CI tools for emacs</title>
      <link>https://mullikine.github.io/posts/continuous-integration-emacs/</link>
      <pubDate>Sun, 06 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/continuous-integration-emacs/</guid>
      <description>Emacs plugins  plugin list  magit-circleci magit-gh-pulls magit-gitflow jenkins jenkins-watch travis org-link-travis magit-circleci    Demonstration of jenkins.el for emacs 
TODO Review these jenkins plugins  plugin list  folders OWASP markup formatter build timeout crenditials binding timestamper workspace cleanup ant gradle pipeline github branch source pipeline: github groovy libraries pipeline: stage view git subversion ssh slaves matrix authorization strategy PAM authentication LDAP Email extension mailer    </description>
    </item>
    
    <item>
      <title>Extending magit with more convenient worktrees</title>
      <link>https://mullikine.github.io/posts/extending-magit/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/extending-magit/</guid>
      <description>What is magit? It&amp;rsquo;s a really awesome git porcelain.
Using git worktree with magit to browse different versions of a repository https://magit.vc/manual/magit/Worktree.html
http://webcache.googleusercontent.com/search?q=cache:https://medium.com/@gaurav5430/git-using-git-worktree-to-run-2-versions-of-the-code-at-the-same-time-1b4586315a6c
Basic git worktree bindings This is because git manages the set of worktrees.
Magit makes use of this 1  % g (magit-worktree-status)   1  j magit-list-worktrees   1  find-function magit-list-worktrees    Example  1 2  cd &amp;#34;$MYGIT/kisaragi-hiu/awk-ward.el&amp;#34;; git worktree list --porcelain    This is where the info is stored: 1 2  cd &amp;#34;$MYGIT/kisaragi-hiu/awk-ward.</description>
    </item>
    
    <item>
      <title>Tremendous Task: Searching for code on GitHub with BigQuery and GHTorrent</title>
      <link>https://mullikine.github.io/posts/github-search-with-bigquery/</link>
      <pubDate>Fri, 04 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/github-search-with-bigquery/</guid>
      <description>Searching GitHub for regular expression matches in code is a tremendous task.
Prerequisites Set up the bq command https://cloud.google.com/bigquery/docs/bq-command-line-tool
Lots of money Sample search About US$5 per search.
This is cheaper than searching all files.
   shell variable function     $query a regular expression that searches the contents of files   $path_re a regex that matches on the file path   $path_re_exclude a regex that matches on the file path for pruning results    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  #standardSQL SELECT sample_repo_name, sample_path, (SELECT STRING_AGG(snip) FROM snippets.</description>
    </item>
    
    <item>
      <title>Scrape URLs from eww region selection</title>
      <link>https://mullikine.github.io/posts/scrape-urls-from-eww-region-selection/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +1300</pubDate>
      
      <guid>https://mullikine.github.io/posts/scrape-urls-from-eww-region-selection/</guid>
      <description>The idea is you select a region of text on the screen and the text properties will be searched for URLs.
A new buffer is created with all the list of URLs in the region you selected.
This works on any emacs mode.
This also works with w3m for emacs.
If a browser is used through ansi-term or the like then emacs most likely wont be able to scrape these URLs from the text properties.</description>
    </item>
    
    <item>
      <title>Circumventing paywalls with eww browser</title>
      <link>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser/</guid>
      <description>Use Google cache Often Google cache has a full copy of an article.
Check for the existence of the cache for a given URL as some URLs may not be cached.
I had originally used curl for this.
Circumventing paywalls with eww browser and curl // Bodacious Blog
This is not an accurate science. Sometimes the cache is needed and sometimes it is not, but the more information we bring in (such as if the cache exists), the better, as this leads to a more informed decision.</description>
    </item>
    
    <item>
      <title>Getting arxiv in the terminal</title>
      <link>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/getting-arxiv-in-the-terminal/</guid>
      <description>It all starts with this emacs plugin 1  (require &amp;#39;biblio-arxiv)   We create a bash script We name it arxiv-summary.
Cant name this &amp;lsquo;as&amp;rsquo; because it interferes with pip.
Sometimes packages installed wtih pip need the assembler.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  #!</description>
    </item>
    
    <item>
      <title>Reading YouTube rather than watching it</title>
      <link>https://mullikine.github.io/posts/reading-youtube-rather-than-watching-it/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/reading-youtube-rather-than-watching-it/</guid>
      <description>It all starts with youtube-dl youtube-dl is a YouTube video downloader. You can install it with sudo pip install youtube-dl.
Let&amp;rsquo;s make some scripts Use the spaCy NLP library to semantically segregate sentences.
Segment-sentences 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #!/usr/bin/env python3.5 #!/usr/bin/env python3.6 # -*- coding: utf-8 -*- # python3.6 -m spacy download en import sys import spacy text = sys.</description>
    </item>
    
    <item>
      <title>Circumventing paywalls with eww browser and curl</title>
      <link>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser-and-curl/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +1200</pubDate>
      
      <guid>https://mullikine.github.io/posts/circumventing-paywalls-with-eww-browser-and-curl/</guid>
      <description>Use Google cache and curl Often Google cache has a full copy of an article.
We use curl to check the existence of the cache for a given URL as some URLs may not be cached.
This is not an accurate science. Sometimes the cache is needed and sometimes it is not, but the more information we bring in (such as if the cache exists), the better, as this leads to a more informed decision.</description>
    </item>
    
    <item>
      <title>cmake</title>
      <link>https://mullikine.github.io/posts/cmake/</link>
      <pubDate>Wed, 10 Jan 2018 00:00:00 +0800</pubDate>
      
      <guid>https://mullikine.github.io/posts/cmake/</guid>
      <description>Resources learnxinyminutes   1 2 3 4 5 6 7 8 9 10 11 12 13  semver Semantic Version https://semver.org/ Given a version number MAJOR.MINOR.PATCH, increment the: - MAJOR version when you make incompatible API changes, - MINOR version when you add functionality in a backwards-compatible manner, and - PATCH version when you make backwards-compatible bug fixes. Additional labels for pre-release and build metadata are available as extensions to the MAJOR.</description>
    </item>
    
  </channel>
</rss>